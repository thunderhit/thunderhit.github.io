<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>函数 | Thunderhit</title>
    <link>https://thunderhit.github.io/tag/%E5%87%BD%E6%95%B0/</link>
      <atom:link href="https://thunderhit.github.io/tag/%E5%87%BD%E6%95%B0/index.xml" rel="self" type="application/rss+xml" />
    <description>函数</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>zh-Hans</language><lastBuildDate>Fri, 19 Jun 2020 16:39:11 +0800</lastBuildDate>
    <image>
      <url>https://thunderhit.github.io/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>函数</title>
      <link>https://thunderhit.github.io/tag/%E5%87%BD%E6%95%B0/</link>
    </image>
    
    <item>
      <title>Python内置常用函数</title>
      <link>https://thunderhit.github.io/post/09-%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</link>
      <pubDate>Fri, 19 Jun 2020 16:39:11 +0800</pubDate>
      <guid>https://thunderhit.github.io/post/09-%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</guid>
      <description>&lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#heading&#34;&gt;&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#数学相关&#34;&gt;数学相关&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#类型转换&#34;&gt;类型转换&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#功能函数&#34;&gt;功能函数&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#eval&#34;&gt;eval()&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#ziplst1-lst2lst3&#34;&gt;zip(lst1, lst2,lst3&amp;hellip;)&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#typehelp&#34;&gt;type/help&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#mapfunc-lst映射运算&#34;&gt;map(func, lst)映射运算&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#printvalue-endn&#34;&gt;print(value, end=&amp;rsquo;\n&amp;rsquo;)&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#openfile-moder-encodingnone&#34;&gt;open(file, mode=&#39;r&amp;rsquo;, encoding=None)&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#重点函数&#34;&gt;重点函数&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#支持&#34;&gt;支持&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;iframe
    src=&#34;//player.bilibili.com/player.html?bvid=BV1eb411h7sP&amp;page=11&#34;
    scrolling=&#34;no&#34;
    height=&#34;768px&#34;
    width=&#34;1024px&#34;
    frameborder=&#34;no&#34;
    framespacing=&#34;0&#34;
    allowfullscreen=&#34;true&#34;
&gt;
&lt;/iframe&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;heading&#34;&gt;&lt;/h1&gt;
&lt;p&gt;有三大类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数学相关函数&lt;/li&gt;
&lt;li&gt;类型转化函数&lt;/li&gt;
&lt;li&gt;功能函数&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&#34;数学相关&#34;&gt;数学相关&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;th&gt;例子&lt;/th&gt;
&lt;th&gt;运行结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;abs(a)&lt;/td&gt;
&lt;td&gt;对a取绝对值&lt;/td&gt;
&lt;td&gt;abs(-1)&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;max(lst)、min(lst)&lt;/td&gt;
&lt;td&gt;寻找lst中的最大、最小值&lt;/td&gt;
&lt;td&gt;max([3, 2, 9])&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sum(lst)&lt;/td&gt;
&lt;td&gt;对lst内所有数字求和&lt;/td&gt;
&lt;td&gt;sum([3, 2, 9])&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;sorted(lst， reverse)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;对lst排序； 参数reverse为布尔值控制升降序&lt;/td&gt;
&lt;td&gt;sorted([3, 2, 9])&lt;/td&gt;
&lt;td&gt;[2, 3, 9]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;range(start, end, step)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;生成以步长step，生成从start到end的数列,默认step=1，结果取不到end&lt;/td&gt;
&lt;td&gt;list(range(1,5))&lt;/td&gt;
&lt;td&gt;[1, 2, 3,4]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#取绝对值
abs(-1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#取最大
max([3, 2, 9])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;9
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#取最小
min([3, 2, 9])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#求和
sum([3, 2, 9])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;14
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#排序
sorted([3,2,9])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[2, 3, 9]
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#排序(方向调整)
sorted([3,2,9], reverse=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[9, 3, 2]
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#生成序列
list(range(1, 10))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4, 5, 6, 7, 8, 9]
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list(range(1, 10, 2))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1, 3, 5, 7, 9]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;类型转换&#34;&gt;类型转换&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;th&gt;例子&lt;/th&gt;
&lt;th&gt;运行结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;int(string)&lt;/td&gt;
&lt;td&gt;将字符串数改为整数型&lt;/td&gt;
&lt;td&gt;int(&amp;lsquo;9&amp;rsquo;)&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float(int/str)&lt;/td&gt;
&lt;td&gt;将int或str改为浮点型&lt;/td&gt;
&lt;td&gt;float(9)、float(&amp;lsquo;9&amp;rsquo;)&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list(iterable)&lt;/td&gt;
&lt;td&gt;将可迭代对象为列表。这里的iterable可以为字符串，可以是列表&lt;/td&gt;
&lt;td&gt;list(range(1,5))&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[1,2,3,4] &lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;enumerate(lst)&lt;/td&gt;
&lt;td&gt;返回带有索引值的序列seq,&lt;strong&gt;需要list(seq)处理后才能看到seq&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;list(enumerate([&amp;lsquo;a&amp;rsquo;, &amp;lsquo;b&amp;rsquo;, &amp;lsquo;c&amp;rsquo;]))&lt;/td&gt;
&lt;td&gt;[(0,&amp;lsquo;a&amp;rsquo;), (1, &amp;lsquo;b&amp;rsquo;), (2, &amp;lsquo;c&amp;rsquo;)]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tuple(lst)&lt;/td&gt;
&lt;td&gt;将lst变为tuple&lt;/td&gt;
&lt;td&gt;tuple([1,2,3])&lt;/td&gt;
&lt;td&gt;(1,2,3)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;set(lst)&lt;/td&gt;
&lt;td&gt;将lst变为集合&lt;/td&gt;
&lt;td&gt;set([1,4,4,4,3])&lt;/td&gt;
&lt;td&gt;{1,3,4}&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = 9
b = 9

a+b
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;18
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#变转化为整数
int(&#39;9&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;9
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#转化为小数
float(&#39;9&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;9.0
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;float(9)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;9.0
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#转化为列表
list(range(1, 5))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#给列表中每个元素分配一个索引值
names = [&#39;张三&#39;, &#39;李四&#39;, &#39;王五&#39;]

list(enumerate(names))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[(0, &#39;张三&#39;), (1, &#39;李四&#39;), (2, &#39;王五&#39;)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;功能函数&#34;&gt;功能函数&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;th&gt;例子&lt;/th&gt;
&lt;th&gt;运行结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;eval(expression)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;执行一个字符串表达式&lt;/td&gt;
&lt;td&gt;eval(&amp;lsquo;1+1&amp;rsquo;)&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;zip(lst1,lst2&amp;hellip;)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;将lst1,lst2&amp;hellip;合并,返回zip对象。&lt;strong&gt;需要list处理一下zip对象&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;list(zip([1,2,3],[4,5,6]))&lt;/td&gt;
&lt;td&gt;[(1, 4), (2, 5), (3, 6)]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;type(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;查看X的类型&lt;/td&gt;
&lt;td&gt;type(&amp;lsquo;2&amp;rsquo;)&lt;/td&gt;
&lt;td&gt;&amp;lt;class &amp;lsquo;str&#39;&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;help(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;查看X的相关信息&lt;/td&gt;
&lt;td&gt;help([1, 2])&lt;/td&gt;
&lt;td&gt;Help on list object..&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;map(func, lst)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;对lst中的每一个个体都进行func操作&lt;/td&gt;
&lt;td&gt;list(map(sum, [[1,1], [1,2]]))&lt;/td&gt;
&lt;td&gt;[2, 3]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;print(value, end=&amp;rsquo;\n&amp;rsquo;)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;打印value&lt;/td&gt;
&lt;td&gt;print(&amp;lsquo;abc&amp;rsquo;)&lt;/td&gt;
&lt;td&gt;abc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;open(file， encoding)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;打开file文件， encoding是file的文件编码&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;eval&#34;&gt;eval()&lt;/h3&gt;
&lt;p&gt;eval(str_expression)&lt;/p&gt;
&lt;p&gt;str_expression 是字符串表达式，可以是变量、函数等&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = 9
b = 9
c = &#39;a+b&#39;

print(a+b)
print(c)
print(eval(c))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;18
a+b
18
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;eval(&#39;a+b&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;18
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d = &#39;hello world&#39;
print(&#39;d&#39;)
print(eval(&#39;d&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;d
hello world
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def hello():
    print(&#39;hello python&#39;)
    
print(&#39;hello()&#39;)

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;hello()
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;eval(&#39;hello()&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;hello python
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;ziplst1-lst2lst3&#34;&gt;zip(lst1, lst2,lst3&amp;hellip;)&lt;/h3&gt;
&lt;p&gt;将lst1， lst2， lst3按照顺序进行合并&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;names = [&#39;David&#39;, &#39;Mary&#39;, &#39;Henry&#39;, &#39;Unique&#39;]
sexs = [&#39;male&#39;, &#39;femal&#39;, &#39;male&#39;, &#39;male&#39;]
ages = [25, 22, 30, 40]

list(zip(names, sexs, ages))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[(&#39;David&#39;, &#39;male&#39;, 25),
 (&#39;Mary&#39;, &#39;femal&#39;, 22),
 (&#39;Henry&#39;, &#39;male&#39;, 30),
 (&#39;Unique&#39;, &#39;male&#39;, 40)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;typehelp&#34;&gt;type/help&lt;/h3&gt;
&lt;p&gt;查看数据类型、查看感兴趣对象的介绍&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = [1,3,5]
type(a)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;list
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;help(a)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Help on list object:

class list(object)
 |  list(iterable=(), /)
 |  
 |  Built-in mutable sequence.
 |  
 |  If no argument is given, the constructor creates a new empty list.
 |  The argument must be an iterable if specified.
 |  
 |  Methods defined here:
 |  
.........
 |  append(self, object, /)
 |      Append object to the end of the list.
 |  
 |  
 |  count(self, value, /)
 |      Return number of occurrences of value.
 |  
 |  extend(self, iterable, /)
 |      Extend list by appending elements from the iterable.
 |  
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(print)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;builtin_function_or_method
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;help(print)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Help on built-in function print in module builtins:

print(...)
    print(value, ..., sep=&#39; &#39;, end=&#39;\n&#39;, file=sys.stdout, flush=False)
    
    Prints the values to a stream, or to sys.stdout by default.
    Optional keyword arguments:
    file:  a file-like object (stream); defaults to the current sys.stdout.
    sep:   string inserted between values, default a space.
    end:   string appended after the last value, default a newline.
    flush: whether to forcibly flush the stream.
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h3 id=&#34;mapfunc-lst映射运算&#34;&gt;map(func, lst)映射运算&lt;/h3&gt;
&lt;p&gt;将func运算映射到lst上每个元素&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lst = [[1,1], [1,2], [1,2], [1,2], [1,2], [1,2], [1,2]]

res = map(sum, lst)
list(res)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[2, 3, 3, 3, 3, 3, 3]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;printvalue-endn&#34;&gt;print(value, end=&amp;rsquo;\n&amp;rsquo;)&lt;/h3&gt;
&lt;p&gt;打印value，默认使用换行结束&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;help(print)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Help on built-in function print in module builtins:

print(...)
    print(value, ..., sep=&#39; &#39;, end=&#39;\n&#39;, file=sys.stdout, flush=False)
    
    Prints the values to a stream, or to sys.stdout by default.
    Optional keyword arguments:
    file:  a file-like object (stream); defaults to the current sys.stdout.
    sep:   string inserted between values, default a space.
    end:   string appended after the last value, default a newline.
    flush: whether to forcibly flush the stream.
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;hello world!&#39;)
print(&#39;hello python!&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;hello world!
hello python!
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;hello world!&#39;, end=&#39;\t&#39;)
print(&#39;hello python!&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;hello world!	hello python!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;openfile-moder-encodingnone&#34;&gt;open(file, mode=&#39;r&amp;rsquo;, encoding=None)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;file 文件路径&lt;/li&gt;
&lt;li&gt;mode 操作方式们，最常用的是r和a+。r读取， a+是追加写入&lt;/li&gt;
&lt;li&gt;encoding 编码方式 ，常见的文件编码方式主要是utf-8和gbk&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;读取返回io对象&lt;/p&gt;
&lt;p&gt;io对象有read()方法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;相对路径&lt;/p&gt;
&lt;p&gt;data&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;绝对路径&lt;/p&gt;
&lt;p&gt;C:Users\thunderhit\Desktop\Python数据分析入门\02-Python语法入门\data&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    建议大家都要用相对路径
  &lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 读取数据
open(&#39;data/test.txt&#39;, encoding=&#39;utf-8&#39;).read()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;章节设计\n\n第一部分  环境配置\n第二部分  快速入门python\n第三部分  网络爬虫\n第四部分  简单的文本分析\n第五部分  进阶文本分析&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 新建文件/在已有的文件内插入内容
f = open(&#39;data/test2.txt&#39;, mode=&#39;a+&#39;, encoding=&#39;utf-8&#39;)
f.write(&#39;我在学python，现在是下午五点&#39;)
f.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 新建文件/在已有的文件内插入内容
f = open(&#39;data/test2.txt&#39;, mode=&#39;a+&#39;, encoding=&#39;utf-8&#39;)
f.write(&#39;\nLife is short, so to learn Python&#39;)
f.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 新建文件/在已有的文件内插入内容
f = open(&#39;data/test2.txt&#39;, mode=&#39;a+&#39;, encoding=&#39;utf-8&#39;)
f.write(&#39;\nLife is short, so to learn Python&#39;)
f.write(&#39;\nLife is short, so to learn music&#39;)
f.write(&#39;\nLife is short, so to learn english&#39;)
f.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;重点函数&#34;&gt;重点函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; sorted(lst， ascending)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; range(start, end, step)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; enumerate(lst)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; eval(expression)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; zip(lst1, lst2..)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; map(func, lst)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; print(x)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; open(file, mode, encoding)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;支持&#34;&gt;支持&lt;/h2&gt;
&lt;p&gt;分享不易，谢谢大家分享（或红包）支持^_^&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/my_zanshang_qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>理解函数</title>
      <link>https://thunderhit.github.io/post/08-%E7%90%86%E8%A7%A3%E5%87%BD%E6%95%B0/</link>
      <pubDate>Fri, 19 Jun 2020 16:39:11 +0800</pubDate>
      <guid>https://thunderhit.github.io/post/08-%E7%90%86%E8%A7%A3%E5%87%BD%E6%95%B0/</guid>
      <description>&lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#函数&#34;&gt;函数&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#位置参数&#34;&gt;位置参数&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#关键词参数&#34;&gt;关键词参数&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#默认参数&#34;&gt;默认参数&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#支持&#34;&gt;支持&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;iframe
    src=&#34;//player.bilibili.com/player.html?bvid=BV1eb411h7sP&amp;page=10&#34;
    scrolling=&#34;no&#34;
    height=&#34;768px&#34;
    width=&#34;1024px&#34;
    frameborder=&#34;no&#34;
    framespacing=&#34;0&#34;
    allowfullscreen=&#34;true&#34;
&gt;
&lt;/iframe&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;流水线每个环节都有质量要求，只有符合质量规范，才能流通到下一个环节。这样环环相扣，设计好后经过试运营就可以投产了。Python编程也一样，编程序其实也是设计流水线，而函数就是流水线上的一个个的环节。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;featured.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;函数&#34;&gt;函数&lt;/h1&gt;
&lt;p&gt;可重复使用的代码块&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;%E5%87%BD%E6%95%B0.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;def函数常见参数定义&amp;amp;调用方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;位置参数&lt;/li&gt;
&lt;li&gt;关键词参数&lt;/li&gt;
&lt;li&gt;默认参数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;位置参数&#34;&gt;位置参数&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def hello1(name, age):
    return &#39;我是{0},今年{1}&#39;.format(name, age)
    
hello1(&#39;张三&#39;, 25)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;我是张三,今年25&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;hello1(25,&#39;张三&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;我是25,今年张三&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;关键词参数&#34;&gt;关键词参数&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def hello2(name, age):
    return &#39;我是{0},今年{1}&#39;.format(name, age)
    
    
hello2(name=&#39;张三&#39;, age=25)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;我是张三,今年25&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;hello2(age=25, name=&#39;张三&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;我是张三,今年25&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;默认参数&#34;&gt;默认参数&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def hello3(name, age, gender=&#39;男&#39;):
    return &#39;我是{0},今年{1}, 性别{2}&#39;.format(name, age, gender)

    
hello3(&#39;David&#39;, 25)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;我是David,今年25, 性别男&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;hello3(&#39;David&#39;, 25, gender=&#39;male&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;我是David,今年25, 性别male&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;支持&#34;&gt;支持&lt;/h2&gt;
&lt;p&gt;分享不易，谢谢大家分享（或红包）支持^_^&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/my_zanshang_qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
