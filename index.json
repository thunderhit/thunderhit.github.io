[{"authors":["大邓"],"categories":null,"content":"","date":1593912006,"expirydate":-62135596800,"kind":"taxonomy","lang":"zh","lastmod":1593912006,"objectID":"27bdb5faec546bfee57db3cf7ca86930","permalink":"https://thunderhit.github.io/author/%E5%A4%A7%E9%82%93/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/%E5%A4%A7%E9%82%93/","section":"authors","summary":"","tags":null,"title":"大邓","type":"authors"},{"authors":["大邓"],"categories":["数据分析","pandas","python"],"content":"目录    1. 读取数据 2. 新增city字段 3. 三个字段公用一个apply函数 4. 薪资 5. 工作年限 6. 员工人数 7. 教育 8. 城市/薪酬关系 9. 学历/薪酬关系 10. 城市/学历/薪酬关系 支持     \n  数据代码下载链接:https://pan.baidu.com/s/1kz2slEYpW0FU2XsPd2lbkQ 密码:hwsi   1. 读取数据 import pandas as pd import numpy as np df = pd.read_csv('data/Jobs.csv') df.head(2)  # 总数 len(df)  356  2. 新增city字段 df['job_area'].unique()  array(['深圳·南山区', '深圳·龙岗区', '深圳', '深圳·福田区', '深圳·光明区', '深圳·龙华区', '深圳·宝安区', 'job_area', '北京', '北京·朝阳区', '北京·海淀区', '北京·通州区', '北京·东城区', '北京·丰台区', '北京·大兴区', '北京·昌平区', '北京·西城区', '上海', '上海·杨浦区', '上海·浦东新区', '上海·徐汇区', '上海·长宁区', '上海·青浦区', '上海·静安区', '上海·普陀区', '上海·黄浦区', '上海·闵行区', '上海·虹口区', '上海·松江区', '广州·增城区', '广州·黄埔区', '广州·越秀区', '广州·番禺区', '广州·天河区', '广州', '广州·海珠区', '广州·荔湾区', '广州·白云区'], dtype=object)  def extract_city(job_area): if '深圳' in job_area: return '深圳' elif '广州' in job_area: return '广州' elif '北京' in job_area: return '北京' elif '上海' in job_area: return '上海' else: return None extract_city('上海-静安区')  '上海'  df['job_area'].apply(extract_city)  0 深圳 1 深圳 2 深圳 3 深圳 4 深圳 .. 351 广州 352 广州 353 广州 354 广州 355 广州 Name: job_area, Length: 356, dtype: object  df['city']=df['job_area'].apply(extract_city) df.head(2)  3. 三个字段公用一个apply函数  salary experience population   步骤:\n 正则表达式抽取出数字列表 求均值  import re text = '300-1000人' def avg(text): nums = re.findall('\\d+', text) nums = [float(x) for x in nums] if nums: return np.mean(nums) else: return 0 avg('300-1000人')  650.0  4. 薪资 salary\ndf['new_salary'] = df['salary'].apply(avg) df.head(2)  5. 工作年限 experience\ndf['experience'].apply(avg)  0 2.0 1 4.0 2 0.0 3 7.5 4 4.0 ... 351 4.0 352 2.0 353 6.0 354 4.0 355 0.0 Name: experience, Length: 356, dtype: float64  df['new_experience'] = df['experience'].apply(avg) df.head(2)  6. 员工人数 population\ndf['population'].apply(avg)  0 10000.0 1 10000.0 2 10000.0 3 10000.0 4 10000.0 ... 351 299.5 352 59.5 353 59.5 354 299.5 355 10.0 Name: population, Length: 356, dtype: float64  df['new_population'] = df['population'].apply(avg) df.head(2)  7. 教育  设计一个函数，出现正规学历，返回True(包括”不限“) 使用逻辑索引，把正规学历的招聘信息都保留  df['edu'].unique()  array(['本科', '博士', '硕士', '大专', '不限', 'edu', '6个月', '3个月', '7个月', '4天/周'], dtype=object)  def edu_bool(level): if level in ['本科', '博士', '硕士', '大专', '不限']: return True else: return False edu_bool('博士')  True  df['Edu_bool'] = df['edu'].apply(edu_bool) df.head(2)  # 逻辑索引 new_df = df[df['Edu_bool']==True] new_df.head(2)  8. 城市/薪酬关系 city/salary\n会用到df.groupby\nnew_df.groupby('city').mean()  9. 学历/薪酬关系 edu/salary\n会用到df.groupby\nnew_df.groupby('edu').mean()  10. 城市/学历/薪酬关系 透视表\npd.pivot_table(df, index, columns, values, aggfunc, margins)\npd.pivot_table(new_df, index='city', columns='edu', values='new_salary', aggfunc=np.mean, margins=True)  支持 分享不易，谢谢大家分享（或红包）支持^_^\n","date":1593912006,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1593912006,"objectID":"bdf8d0b1044a377e631f4ab5a1247162","permalink":"https://thunderhit.github.io/post/pandas_boss_analysis/","publishdate":"2020-07-05T09:20:06+08:00","relpermalink":"/post/pandas_boss_analysis/","section":"post","summary":"含视频、代码和数据","tags":["pandas","数据分析"],"title":"使用Pandas对Python岗位需求进行分析","type":"post"},{"authors":["刘早起"],"categories":["教程","python","pandas"],"content":"目录  前言 使用说明 一些例子    基本样式 选择某列 格式化输出 style内置方法   支持      作者:刘早起\n公众号: 早起Python   本文数据和代码下载链接:https://pan.baidu.com/s/1sFPXqa65BFVOT8jTmpqxYA 密码:gjua   前言 在Pandas中每一个DataFrame都有一个Style属性，我们可以通过修改该属性来给数据添加一些基本的样式。 使用说明 通过修改Styler对象的属性，将样式传递给DataFrame，主要有两种传递方式\n Styler.applymap：对所有的单元格操作样式 Styler.apply：对列/行/表操作样式 Styler.applymap通过DataFrame对所有的单元格操作样式。 Styler.apply根据axis参数，按列使用axis=0，按行使用axis=1，以及axis=None作用于整个表。所以\n 若使用Styler.applymap，我们的函数应返回带有CSS属性-值对的单个字符串。 若使用Styler.apply，我们的函数应返回具有相同形状的Series或DataFrame，其中每个值都是具有CSS属性值对的字符串。 不会CSS？没关系，作为调包侠的我们大多是改改HTML颜色代码即可完成样式修改，下面看一些示例。   一些例子 基本样式 首先我们创建一组没有任何样式的数据\nimport pandas as pd df = pd.read_csv('test.csv') df  我们之前说过，DataFrame是有style属性的，所以在没有做任何修改的情况下，使用df.style应该和上图一样\ndf.style  现在让我们编写一个简单的样式函数，该函数可以将负数变为红色，使正数保持黑色。\ndef color_negative_red(val): color = 'red' if val\u0026lt; 0 else 'black' return 'color: {}'.format(color)  现在来应用这段函数\ndf.style.applymap(color_negative_red)  现在如果我们想突出显示每列中的最大值，需要重新定义一个函数。\ndef highlight_max(series): is_max = series==series.max() return ['background-color: yellow' if v else '' for v in is_max] #测试一下 highlight_max(df['E'])  ['', '', 'background-color: yellow', '', '', '', '', '', '', '']  之前我们是以单元格为单位进行操作，使用的是.applymap。现在我们待操作的对象是列，所以这里用的是.apply方法\ndf.style.apply(highlight_max)  现在可以使用\ndf.style.applymap(color_negative_red).apply(highlight_max)  当然我们也可以通过修改样式函数并使用.apply来高亮整个DataFrame的最大值，\nimport numpy as np def highlight_max(data, color='yellow'): attr = 'background-color: {}'.format(color) if data.ndim ==1: is_max = data==data.max() return [attr if v else '' for v in is_max] else: is_max = data==data.max().max() return pd.DataFrame(np.where(is_max, attr, ''), index=data.index, columns=data.columns) df.style.apply(highlight_max, color='darkorange', axis=None)  选择某列 我们也可以通过subset对选中的某列或某几列进行样式修饰\ndf.style.apply(highlight_max, axis=0, #列方向 subset=['B', 'C', 'D']) #选择BCD列  格式化输出 我们也可以使用Styler.format来快速格式化输出，比如将小数格式化为百分数\ndf.style.format(\u0026quot;{:.2%}\u0026quot;)  也支持使用字典或lambda表达式来更灵活的使用\ndf.style.format({'B': \u0026quot;{:.3f}\u0026quot;, #保留小数点后3位 'D': '{:+.3f}'})#带符号，保留小数点后三位  style内置方法    方法 功能     style.format() 格式化   style.hide_columns(subset) 隐藏某列   style.hide_index() 隐藏行索引   style.background_gradient() 梯度下降着色   style.bar() 每个数值型单元格显示横向条形图   style.highlight_max(color='yellow\u0026rsquo;) df中每列最大的值着色   style.highlight_min(color='yellow\u0026rsquo;) df中每列最小的值着色   style.highlight_null(null_color='red\u0026rsquo;) df中缺失值着色   style.to_excel(xlsxfile) 将dataframe带着样式存到xlsx文件中    #隐藏A列 df.style.hide_columns('A')  #隐藏行索引 df.style.hide_index()  #梯度下降着色 df.style.background_gradient()  # 最大值着色 #df.style.highlight_max() #最小值着色 df.style.highlight_min()  #保存样式到xlsx文件中 new_df = df.style.background_gradient() new_df.to_excel('test.xlsx')  用MS Excel打开test.xlsx文件，\n支持 分享不易，谢谢大家分享（或红包）支持^_^\n","date":1593788284,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1593788284,"objectID":"06724b12ce0818eb966d027a21ba0daa","permalink":"https://thunderhit.github.io/post/pandas_style/","publishdate":"2020-07-03T22:58:04+08:00","relpermalink":"/post/pandas_style/","section":"post","summary":"让pandas好用好看，还能带着样式存到excel中","tags":["pandas","python"],"title":"Pandas也能修改样式？快速给你的数据换个Style","type":"post"},{"authors":["大邓"],"categories":["教程"],"content":"目录      安装     快速上手    可视化 数据准备 可视化   支持      bar_chart_race_cn是对bar_chart_race库的汉化版，具体文档可查看 原创作者的文档\n安装 pip install bar_chart_race_cn  快速上手 可视化 import bar_chart_race_cn as bcr bcr.bar_chart_race(df=df, filename='近20年各省财政收入.mp4', title='近20年各省财政收入(单位: 亿元)' )  数据准备 数据自国家统计局，以财政收入.csv\nimport pandas as pd df = pd.read_csv('data/财政收入.csv') def year2timestamp(year): #转为可比较大小的日期格式 return pd.Timestamp(str(year)) #把year转化为可比较日期大小的行索引index df['year'] = df['year'].apply(year2timestamp) df.set_index('year', inplace=True) df.sort_index(inplace=True) df.head(2)   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  北京市 天津市 河北省 山西省 内蒙古自治区 辽宁省 吉林省 黑龙江省 上海市 江苏省 ... 重庆市 四川省 贵州省 云南省 西藏自治区 陕西省 甘肃省 青海省 宁夏回族自治区 新疆维吾尔自治区   year                          2000-01-01 345.00 133.61 248.76 114.48 95.03 295.63 103.83 185.34 485.38 448.31 ... 87.24 233.86 85.23 180.75 5.38 114.97 61.28 16.58 20.82 79.07   2001-01-01 454.17 163.64 283.50 132.76 99.43 370.44 121.10 213.64 609.47 572.15 ... 106.12 271.12 99.75 191.28 6.11 135.81 69.95 19.82 27.57 95.09    2 rows × 31 columns\n 可视化 import bar_chart_race_cn as bcr bcr.bar_chart_race(df=df, filename='近20年各省财政收入.mp4', title='近20年各省财政收入(单位: 亿元)' )  效果\n 支持 分享不易，谢谢大家分享（或红包）支持^_^\n","date":1593755884,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1593755884,"objectID":"8cb27e8d9e19b986459ffad285f7b122","permalink":"https://thunderhit.github.io/post/bar_chart_race_cn/","publishdate":"2020-07-03T13:58:04+08:00","relpermalink":"/post/bar_chart_race_cn/","section":"post","summary":"bar_chart_race_cn库","tags":["可视化","python"],"title":"用Python绘制近20年地方财政收入变迁史视频","type":"post"},{"authors":["大邓"],"categories":["培训","课程"],"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n","date":1593455400,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1593455400,"objectID":"96344c08df50a1b693cc40432115cbe3","permalink":"https://thunderhit.github.io/talk/example/","publishdate":"2020-06-06T00:00:00Z","relpermalink":"/talk/example/","section":"talk","summary":"模块化课程设计，兼顾理论与实战","tags":["网络爬虫","文本分析","机器学习"],"title":"Python＆Stata应用能力提升与实证前沿云特训","type":"talk"},{"authors":["大邓"],"categories":["教程"],"content":"在大数据的今天，通过互联网超文本链接，无数的个人、团体、公司、政府等不同组织形态的主体均深深嵌入到互联网世界，在网络世界中留下了大量的文本。社会、管理、经济、营销、金融等不同学科，均可以研究网络上海量的文本，扩宽的研究对象和研究领域。下面大部分内容是三份文档翻译汇总而来，我觉得讲的挺明白的，其中加入了我的一点点理解和扩充。\n目录    一、文本产生及其作用方式 二、如何使用文本数据 三、文本信息的指标 四、文本分析步骤 五、文本分析技术对比 相关文献     一、文本产生及其作用方式  How text reflects its producer？ How text impacts its receiver？  文本信息的生产者producer与消费者receiver，涵盖**个人、公司(组织)、国家(社会)**三个层面。\n 需要注意的是文本的反映reflects和影响impacts并不是非此即彼，往往会同时起作用。\n    \u0026mdash; 研究目的 自变量 因变量 因变量     Reflects 文本可以反映producer的一些信息，帮助研究者理解producer。例如试图挖掘producer的个性personality或属于什么社会团体。 了解公司的品牌个性；\n年报也会有未来业绩表现的有价值线索；\n消费者们在品牌社区的言语能更深的投射出消费者对品牌的态度；\n而更宏大的层面，文本也能反映出文化差异。\n了解消费者是否喜欢新产品，消费者如何看待品牌，消费者最看重什么 文本 文本   Affects 知道文本如何影响receiver，receiver会有什么样的行为和选择。 检验文本是否以及如何导致消费者诸如购买、分享和卷入行为。\n广告会塑造消费者的消费行为\n消费者杂志会扭曲消费者产品分类感知\n电影剧本会影响观众的反应 文本消费者 文本消费者    \n二、如何使用文本数据    \u0026mdash; Reflects Affects 目的 应用 难点     Predict 预测 producer的状态、特性、性格等 预测 receiver阅读、分享和购买行为 研究人员不怎么关系任意的文本特质，他们更关心预测的表现。 什么消费者最喜欢贷款\n什么电影会大火\n未来股市走向\n 文本数据可以生成成千上万的特征(相当于变量x1，x2\u0026hellip;xn)，而文本数据记录数甚至可能少于特征数。\n为了解决这个为题，使用新的特征分类方法，减少特征数量，又有可能存在拟合问题。   Understanding 为什么当人们压抑的时候会使用特殊人称。 来理解为何带有情绪的文本会更容易被阅读和分享 理解为什么事情发生以及如何发生的这类研究往往会用到心理学、社会学的方法，旨在理解文本的什么特征会导致什么后续结果，以及为什么产生这样的后果。 消费者怎样表达会如何影响口碑\n为何某些推文会被挑中分享？\n歌曲为何变火？\n品牌如何让消费者忠诚？ 找出观测数据背后的因果关系。相应的，该领域的工作可能会强调实验数据，以允许对关键的独立变量进行操作。\n另一个挑战是解释文本特征之间的关系。    \n三、文本信息的指标 粗略的分，文本信息可以分为定性与定量两种类型\n   定性/量 分析方法 优点 缺点     定性（text as text） 质性（扎根） 依靠研究者领域知识，可以对少量的数据做出深刻洞见。 难以应对大规模数据；编码过程并不能保证唯一；   定量 textual data(text as data) 明显的文本特征，如词频、可阅读性 标准如一；适合大规模文本挖掘；纷繁复杂中涌现出潜在规律 需要破坏文本的结构，丧失了部分信息量    早先的营销领域，如在线评论文本分析指标多为\n 数量，如文本长度(e.g., Godes and Mayzlin 2004; Moe and Trusov2011) 情感得分(效价，评论评分) (e.g., Godes and Silva 2012; Moe and Schweidel 2012; Ying, Feinberg and Wedel 2006)· 方差，如信息墒(e.g., Godes and Mayzlin 2004).  然而如今这些指标经常忽略了文本的丰富度。以下几种是更好用的指标\n   指标 功能 补充     实体词词频 使用相应的实体词典，统计实体出现次数，这样可以对不同实体进行比较 更长的文本通常含有更多的实体(的数量)；还有一个局限就是某些实体会比其他实体更多的出现，如“电脑”商品的在线评论中“电脑”出现次数会远多于其他词。   相似度 文档之间的相似度感兴趣。\n如两个广告之间的相似程度如何？\n两首歌的歌词相似程度多少？ 相似度的计算方法有\ncos余弦相似\njaccard相似   可读性 同样的意思可以用不同的难度的词汇去表达，造成阅读的难易程度。可读性反映了作者的内容复杂度和读者的阅读难度。 常见的可读性算法有Flesch–Kincaid和the simple measure of gobbledygook (SMOG)。\n可阅读性经常将得分设置到1-12分之间，在美国学校里阅读理解成绩水平得分就是1-12分。    \n四、文本分析步骤    序号 步骤 解释 中文 英文     1 读取数据 数据一般存储于不同的文件夹不同文件内，需要将其导入到计算机     2 分词 导入到计算的文本是字符串数据，需要整理为更好用的列表 例如“我爱你中国”分词后得到[\u0026ldquo;我\u0026rdquo;, \u0026ldquo;爱\u0026rdquo;, \u0026ldquo;你\u0026rdquo;, \u0026ldquo;中国\u0026rdquo;] \u0026ldquo;I love China\u0026quot;分为[\u0026ldquo;I\u0026rdquo;, \u0026ldquo;love\u0026rdquo;, \u0026ldquo;China\u0026rdquo;]   3 剔除符号和无意义的停止词 为了降低计算机运行时间，对分析结果影响较小的字符，诸如符号和无意义的词语需要剔除掉 如“的”，“她”， ”呢”， “了” \u0026ldquo;is\u0026rdquo; , \u0026ldquo;a\u0026rdquo;, \u0026ldquo;the\u0026rdquo;   4 字母变小写，词干化 同义词归并，同主体词归并 “中铁”，“中国铁建”，“中铁集团”都可以归并为“中铁” 先变为小写，这样“I”和“i”都归并为“i”；“was”，“are”，“is”都归并为“be”   5 构建文档词频矩阵 使用一定的编码方式，即用某种方式表示文本。常见的有词袋法、tf-idf；可以使用scikit-learn构建文档词频矩阵，但中英文略有区别，需要注意 “我爱你中国”需要先整理为“我 爱 你 中国” “I love China”    \n五、文本分析技术对比    技术 描述 优点 缺点 常被应用(领域) 软件     主题分析Thematic analysis 需要有经验的人员基于自身经验和李俊杰，对研究的数据进行挖掘。编码过程为迭代进行 使用参与者自己的话语或者构念来挖掘数据，对少量文本理解的更深入 属于时间、劳动密集型任务，不适合大规模数据。由于不同的编码人员有不同的经历和偏好，编码过程的标准不可靠 社会学、管理学 Nvivo；   内容分析/基于字典方法 统计文本中词语/词组的出现频率 允许对研究的数据进行定量分析 采用的词典应尽量与研究问题适应，词典适配性问题突出 管理学 LIWC、Nvivo、DICTION；   词袋法（Bag of words） 将文本字符串转为计算机能理解的数字化向量 编码标准稳定简单，具有统计学特性，扩展性强 编码过程忽略词语的先后顺序 管理学 Python的scikit-learn、gensim、nltk等；R   监督模型(Supervise models),如SVM、Bayes、Logistic Regression 研究者要知道输入数据X和标签y；需要核实的模型需要X和y之间的关系和规律 允许事先定义编码规则(如选择词袋法还是tfidf)；逻辑简单 需要高质量的标注数据(工作量大)；you与特征词太多，训练的模型很容易过拟合。 计算机学、政治学、管理学 Python的scikit-learn、gensim、nltk等；R（topicmodels， stm）   无监督学习(Kmeans、 LDA话题模型) 使用聚类、话题分析，让计算机自动对数据进行分组 在没有人工标注的情况下，加速了数据的“标注”或“分类” “标注”是机器按照数字特征进行的分组，需要研究者解读才可以赋予“标准“意义；训练过程需要大量的调参 计算机学、政治学、管留学 Python的scikit-learn、gensim、nltk等；R（topicmodels， stm）   自然语言处理 按照人类对语言的理解进行建模，考虑词语顺序 计算机自动化；可分析语义 大多数模型是人类无法解读的黑箱；虽然代码编程量小，但训练代码耗时巨大 计算科学；市场营销；心理学 pytorch、tensorflow    据被压缩成词组频数，定性的文本数据转化为定量的频数。 腾讯课堂《Python网络爬虫与文本数据分析》https://ke.qq.com/course/482241?tuin=163164df中会涉及到的内容\n Thematic Analysis 定性 Content Analysis Dictionary Bag of words 词袋法 Supervised ，监督学习 文本分类问题 Unsupervised，如非监督LDA话题模型 Natural language processing  \n相关文献  链接:https://pan.baidu.com/s/1-BgBsWyYGtm_lHQ1LUEXCQ 密码:krct    [1]Berger, Jonah, Ashlee Humphreys, Stephan Ludwig, Wendy W. Moe, Oded Netzer, and David A. Schweidel. \u0026ldquo;Uniting the tribes: Using text for marketing insight.\u0026rdquo; Journal of Marketing (2019): 0022242919873106.\n[2]Kenneth Benoit. July 16, 2019. “[Text as Data: An Overview](https://kenbenoit.net/pdfs/28 Benoit Text as Data draft 2.pdf).” Forthcoming in Cuirini, Luigi and Robert Franzese, eds. Handbook of Research Methods in Political Science and International Relations. Thousand Oaks: Sage.\n[3]Banks, George C., Haley M. Woznyj, Ryan S. Wesslen, and Roxanne L. Ross. \u0026ldquo;A review of best practice recommendations for text analysis in R (and a user-friendly app).\u0026rdquo; Journal of Business and Psychology 33, no. 4 (2018): 445-459.\n \n","date":1593073410,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1593073410,"objectID":"b1fb2b3d7db52b1a71b4a3ad0a3c5693","permalink":"https://thunderhit.github.io/post/%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90%E5%9C%A8%E7%BB%8F%E7%AE%A1%E9%A2%86%E5%9F%9F%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%E6%A6%82%E8%BF%B0/","publishdate":"2020-06-25T16:23:30+08:00","relpermalink":"/post/%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90%E5%9C%A8%E7%BB%8F%E7%AE%A1%E9%A2%86%E5%9F%9F%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%E6%A6%82%E8%BF%B0/","section":"post","summary":"在大数据的今天，通过互联网超文本链接，无数的个人、团体、公司、政府**等不同组织形态的主体均深深嵌入到互联网世界，在网络世界中留下了大量的文本。社会、管理、经济、营销、金融**等不同学科，均可以研究网络上海量的文本，扩宽的研究对象和研究领域。下面大部分内容是三份文档翻译汇总而来，我觉得讲的挺明白的，其中加入了我的一点点理解和扩充。","tags":["文本分析","Python","经管","学术"],"title":"文本分析在经管领域中的应用概述","type":"post"},{"authors":["大邓"],"categories":["教程","R语言"],"content":"目录  1. dplyr简介 2. 安装并导入dplyr库 3. 读取数据 4. dplyr常用函数  4.1 Arrange 4.2 Select 4.3 Filter 4.4 Mutate 4.5 Group_By      实验数据及代码下载链接:https://pan.baidu.com/s/1Tg2D7ZEgJGOuaGAlMcHO2Q 密码:mag6    课程代码关注【公众号：大邓和他的Python】，回复关键词【python入门】   1. dplyr简介 dplyr是R语言的数据分析包，类似于python中的pandas，能对dataframe类型的数据做很方便的数据处理和分析操作。最初我也很奇怪dplyr这个奇怪的名字，我查到其中一种解释 - d代表dataframe - plyr是英文钳子plier的谐音\ndplyr如同R的大多数包，都是函数式编程，这点跟Python面向对象编程区别很大。优点是初学者比较容易接受这种函数式思维，有点类似于流水线，每个函数就是一个车间，多个车间共同完成一个生产（数据分析）任务。\n而在dplyr中，就有一个管道符 %\u0026gt;% ，符号左侧表示数据的输入，右侧表示下游数据处理环节。\n2. 安装并导入dplyr库 pacman库的p_load函数功能包含了\n install.packages(“dplyr”) library(dplyr)  该写法更简单易用\npacman::p_load(\u0026quot;dplyr\u0026quot;)  3. 读取数据 #设置工作目录 setwd(\u0026quot;/Users/thunderhit/Desktop/dplyr_learn\u0026quot;) #导入csv数据 aapl \u0026lt;- read.csv('aapl.csv', header=TRUE, sep=',', stringsAsFactors = FALSE) %\u0026gt;% as_tibble() head(aapl)   A tibble: 6 × 6  DateOpenHighLowCloseVolume \u0026lt;chr\u0026gt;\u0026lt;dbl\u0026gt;\u0026lt;dbl\u0026gt;\u0026lt;dbl\u0026gt;\u0026lt;dbl\u0026gt;\u0026lt;int\u0026gt;   7-Jul-17 142.90144.75142.90144.1819201712 6-Jul-17 143.02143.50142.41142.7324128782 5-Jul-17 143.69144.79142.72144.0921569557 3-Jul-17 144.88145.30143.10143.5014277848 30-Jun-17144.45144.96143.78144.0223024107 29-Jun-17144.71145.13142.28143.6831499368   查看数据类型\nclass(aapl)   .list-inline {list-style: none; margin:0; padding: 0} .list-inlineli {display: inline-block} .list-inlineli:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}  'tbl_df''tbl''data.frame' 查看数据的字段\ncolnames(aapl)   .list-inline {list-style: none; margin:0; padding: 0} .list-inlineli {display: inline-block} .list-inlineli:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}  'Date''Open''High''Low''Close''Volume' 查看记录数、字段数\ndim(aapl)   .list-inline {list-style: none; margin:0; padding: 0} .list-inlineli {display: inline-block} .list-inlineli:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}  2516 4. dplyr常用函数 4.1 Arrange 对appl数据按照字段Volume进行降序排序\narrange(aapl, -Volume)   A tibble: 6 × 6  DateOpenHighLowCloseVolume \u0026lt;chr\u0026gt;\u0026lt;dbl\u0026gt;\u0026lt;dbl\u0026gt;\u0026lt;dbl\u0026gt;\u0026lt;dbl\u0026gt;\u0026lt;int\u0026gt;   14-Sep-16108.73113.03108.60111.77112340318 1-Feb-17 127.03130.49127.01128.75111985040 27-Jul-16104.26104.35102.75102.95 92344820 15-Sep-16113.86115.73113.49115.57 90613177 16-Sep-16115.12116.13114.04114.92 79886911 12-Jun-17145.74146.09142.51145.42 72307330   我们也可以用管道符 %\u0026gt;% ，两种写法得到的运行结果是一致的，可能用久了会觉得管道符 %\u0026gt;% 可读性更强，后面我们都会用 %\u0026gt;% 来写代码。\naapl %\u0026gt;% arrange(-Volume)   A tibble: 6 × 6  DateOpenHighLowCloseVolume \u0026lt;chr\u0026gt;\u0026lt;dbl\u0026gt;\u0026lt;dbl\u0026gt;\u0026lt;dbl\u0026gt;\u0026lt;dbl\u0026gt;\u0026lt;int\u0026gt;   14-Sep-16108.73113.03108.60111.77112340318 1-Feb-17 127.03130.49127.01128.75111985040 27-Jul-16104.26104.35102.75102.95 92344820 15-Sep-16113.86115.73113.49115.57 90613177 16-Sep-16115.12116.13114.04114.92 79886911 12-Jun-17145.74146.09142.51145.42 72307330   4.2 Select 选取 Date、Close和Volume三列\naapl %\u0026gt;% select(Date, Close, Volume)   A tibble: 6 × 3  DateCloseVolume \u0026lt;chr\u0026gt;\u0026lt;dbl\u0026gt;\u0026lt;int\u0026gt;   7-Jul-17 144.1819201712 6-Jul-17 142.7324128782 5-Jul-17 144.0921569557 3-Jul-17 143.5014277848 30-Jun-17144.0223024107 29-Jun-17143.6831499368   只选取Date、Close和Volume三列，其实另外一种表达方式是“排除Open、High、Low，选择剩下的字段的数据”。\naapl %\u0026gt;% select(-c(\u0026quot;Open\u0026quot;, \u0026quot;High\u0026quot;, \u0026quot;Low\u0026quot;))   A tibble: 6 × 3  DateCloseVolume \u0026lt;chr\u0026gt;\u0026lt;dbl\u0026gt;\u0026lt;int\u0026gt;   7-Jul-17 144.1819201712 6-Jul-17 142.7324128782 5-Jul-17 144.0921569557 3-Jul-17 143.5014277848 30-Jun-17144.0223024107 29-Jun-17143.6831499368   4.3 Filter 按照筛选条件选择数据\n#从数据中选择appl股价大于150美元的交易数据 aapl %\u0026gt;% filter(Close\u0026gt;=150)   A tibble: 6 × 6  DateOpenHighLowCloseVolume \u0026lt;chr\u0026gt;\u0026lt;dbl\u0026gt;\u0026lt;dbl\u0026gt;\u0026lt;dbl\u0026gt;\u0026lt;dbl\u0026gt;\u0026lt;int\u0026gt;   8-Jun-17155.25155.54154.40154.9921250798 7-Jun-17155.02155.98154.48155.3721069647 6-Jun-17153.90155.81153.78154.4526624926 5-Jun-17154.34154.45153.46153.9325331662 2-Jun-17153.58155.45152.89155.4527770715 1-Jun-17153.17153.33152.22153.1816404088   从数据中选择appl - 股价大于150美元 且 收盘价大于开盘价 的交易数据\naapl %\u0026gt;% filter((Close\u0026gt;=150) \u0026amp; (Close\u0026gt;Open))   A tibble: 11 × 6  DateOpenHighLowCloseVolume \u0026lt;chr\u0026gt;\u0026lt;dbl\u0026gt;\u0026lt;dbl\u0026gt;\u0026lt;dbl\u0026gt;\u0026lt;dbl\u0026gt;\u0026lt;int\u0026gt;   7-Jun-17 155.02155.98154.48155.3721069647 6-Jun-17 153.90155.81153.78154.4526624926 2-Jun-17 153.58155.45152.89155.4527770715 1-Jun-17 153.17153.33152.22153.1816404088 30-May-17153.42154.43153.33153.6720126851 25-May-17153.73154.35153.03153.8719235598 18-May-17151.27153.34151.13152.5433568215 12-May-17154.70156.42154.67156.1032527017 11-May-17152.45154.07152.31153.9527255058 9-May-17 153.87154.88153.45153.9939130363 8-May-17 149.03153.70149.03153.0148752413   4.4 Mutate 将现有的字段经过计算后生成新字段。\n#将最好价High减去最低价Low的结果定义为maxDif，并取log aapl %\u0026gt;% mutate(maxDif = High-Low, log_maxDif=log(maxDif))   A tibble: 6 × 8  DateOpenHighLowCloseVolumemaxDiflog_maxDif \u0026lt;chr\u0026gt;\u0026lt;dbl\u0026gt;\u0026lt;dbl\u0026gt;\u0026lt;dbl\u0026gt;\u0026lt;dbl\u0026gt;\u0026lt;int\u0026gt;\u0026lt;dbl\u0026gt;\u0026lt;dbl\u0026gt;   7-Jul-17 142.90144.75142.90144.18192017121.850.6151856 6-Jul-17 143.02143.50142.41142.73241287821.090.0861777 5-Jul-17 143.69144.79142.72144.09215695572.070.7275486 3-Jul-17 144.88145.30143.10143.50142778482.200.7884574 30-Jun-17144.45144.96143.78144.02230241071.180.1655144 29-Jun-17144.71145.13142.28143.68314993682.851.0473190   得到记录的位置(行数)\naapl %\u0026gt;% mutate(n=row_number())   A tibble: 6 × 7  DateOpenHighLowCloseVolumen \u0026lt;chr\u0026gt;\u0026lt;dbl\u0026gt;\u0026lt;dbl\u0026gt;\u0026lt;dbl\u0026gt;\u0026lt;dbl\u0026gt;\u0026lt;int\u0026gt;\u0026lt;int\u0026gt;   7-Jul-17 142.90144.75142.90144.18192017121 6-Jul-17 143.02143.50142.41142.73241287822 5-Jul-17 143.69144.79142.72144.09215695573 3-Jul-17 144.88145.30143.10143.50142778484 30-Jun-17144.45144.96143.78144.02230241075 29-Jun-17144.71145.13142.28143.68314993686   4.5 Group_By 对资料进行分组，这里导入新的 数据集 weather\n#导入csv数据 weather \u0026lt;- read.csv('weather.csv', header=TRUE, sep=',', stringsAsFactors = FALSE) %\u0026gt;% as_tibble() weather   A tibble: 6 × 5  Datecitytemperaturewindspeedevent \u0026lt;chr\u0026gt;\u0026lt;chr\u0026gt;\u0026lt;int\u0026gt;\u0026lt;int\u0026gt;\u0026lt;chr\u0026gt;   1/1/2017new york32 6Rain  1/1/2017mumbai 90 5Sunny  1/1/2017paris 4520Sunny  1/2/2017new york36 7Sunny  1/2/2017mumbai 8512Fog  1/2/2017paris 5013Cloudy   按照城市分组\nweather %\u0026gt;% group_by(city)   A grouped_df: 6 × 5  Datecitytemperaturewindspeedevent \u0026lt;chr\u0026gt;\u0026lt;chr\u0026gt;\u0026lt;int\u0026gt;\u0026lt;int\u0026gt;\u0026lt;chr\u0026gt;   1/1/2017new york32 6Rain  1/1/2017mumbai 90 5Sunny  1/1/2017paris 4520Sunny  1/2/2017new york36 7Sunny  1/2/2017mumbai 8512Fog  1/2/2017paris 5013Cloudy   为了让大家看到分组的功效，咱们按照城市分别计算平均温度\nweather %\u0026gt;% group_by(city) %\u0026gt;% summarise(mean_temperature = mean(temperature))  `summarise()` ungrouping output (override with `.groups` argument)   A tibble: 3 × 2  citymean_temperature \u0026lt;chr\u0026gt;\u0026lt;dbl\u0026gt;   mumbai 87.5 new york34.0 paris 47.5   weather %\u0026gt;% summarise(mean_temperature = mean(temperature))   A tibble: 1 × 1  mean_temperature \u0026lt;dbl\u0026gt;   56.33333   #支持\n分享不易，谢谢大家点赞分享和红包^_^\n","date":1592984679,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1592984679,"objectID":"04825bd59049052fc9d20ff714a93c89","permalink":"https://thunderhit.github.io/post/r%E8%AF%AD%E8%A8%80dplyr%E5%8C%85%E5%AE%9E%E6%93%8D%E5%85%A5%E9%97%A8/","publishdate":"2020-06-24T15:44:39+08:00","relpermalink":"/post/r%E8%AF%AD%E8%A8%80dplyr%E5%8C%85%E5%AE%9E%E6%93%8D%E5%85%A5%E9%97%A8/","section":"post","summary":"R中的pandas库","tags":["R语言","数据分析","dplyr"],"title":"R语言dplyr包快速入门","type":"post"},{"authors":["大邓"],"categories":["教程","pandas","python"],"content":"pandas中有一个特别好用的apply方法，包括\n 列内计算，只对某列进行某种计算 列间计算，对多个列之间进行复杂的计算  下面我们看实验数据\nimport pandas as pd import numpy as np matrix = [ ['张三', '1995-12-31', '山东', '本科'], ['李四', '1993-05-29', '河北', '大专'], ['王五', '1995-03-14', '山西', '硕士'], ['赵六', '1992-07-08', '内蒙古', '本科'], ] df = pd.DataFrame(matrix, columns=['Name', 'Birthday', 'From', 'Edu']) df   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  Name Birthday From Edu     0 张三 1995-12-31 山东 本科   1 李四 1993-05-29 河北 大专   2 王五 1995-03-14 山西 硕士   3 赵六 1992-07-08 内蒙古 本科     df.apply(func)或series.apply(func) axis控制操作方向\n 0 表示列方向 1 表示行方向  列内计算 一般列内计算，实际上主要是对series做的操作，比如选中dataframe某列。\ndf['colname'].apply(func) 默认只对列方向对colname列做func操作，例如计算每个员工的出生年份、年龄。\ndef year(birthday): #截取birthday字符串的年份 return int(birthday[:4]) #对birthday列使用year函数操作 df['Year'] = df['Birthday'].apply(year) #年龄 df['Age'] = 2020-df['Year'] df   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  Name Birthday From Edu Year Age     0 张三 1995-12-31 山东 本科 1995 25   1 李四 1993-05-29 河北 大专 1993 27   2 王五 1995-03-14 山西 硕士 1995 25   3 赵六 1992-07-08 内蒙古 本科 1992 28     列间计算 df.apply(func, axis=1)不同列之间可以有复杂的计算，比如想计算 设计自我介绍模板\ndef intro(r): #r代指dataframe中的任意行，是series类型数据，拥有类似字典的使用方法。 return '大家好，我是{name},\\ 来自{province}省，\\ 今年{age}岁了！'.format(name=r['Name'], province=r['From'], age=r['Age']) df['Intro'] = df.apply(intro, axis=1) df   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  Name Birthday From Edu Year Age Intro     0 张三 1995-12-31 山东 本科 1995 25 大家好，我是张三, 来自山东省， 今年25岁了！   1 李四 1993-05-29 河北 大专 1993 27 大家好，我是李四, 来自河北省， 今年27岁了！   2 王五 1995-03-14 山西 硕士 1995 25 大家好，我是王五, 来自山西省， 今年25岁了！   3 赵六 1992-07-08 内蒙古 本科 1992 28 大家好，我是赵六, 来自内蒙古省， 今年28岁了！     ","date":1592882666,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1592882666,"objectID":"d6e23166d0d68a7b93f1103557538f6d","permalink":"https://thunderhit.github.io/post/pandas%E7%9A%84apply%E6%96%B9%E6%B3%95/","publishdate":"2020-06-23T11:24:26+08:00","relpermalink":"/post/pandas%E7%9A%84apply%E6%96%B9%E6%B3%95/","section":"post","summary":"df[colname].apply(func)和df.apply(func)","tags":["数据分析","pandas","apply","数据清洗"],"title":"小案例: Pandas的apply方法","type":"post"},{"authors":["大邓"],"categories":["教程","视频"],"content":" 课程代码关注【公众号：大邓和他的Python】，回复关键词【python入门】   视频观看时间加起来不超过3.5小时\n如果有遇到看不懂的地方，大家不需要纠结，很多时候自己照着代码操作一下，看看代码英文的意思，再看看代码运行前后的对比，就会自己有自己对代码独特的见解。\n内容目录 ⭐数量的多少表示内容难易程度:\n 1. Win环境配置⭐\n 1. Mac环境配置⭐\n 2. python跟英语一样是一门语言⭐\n 3. 数据类型-字符串⭐⭐⭐⭐\n 4. 数据类型-列表元组集合⭐⭐\n 5. 数据类型-字典⭐\n 6. 数据类型-布尔值\u0026amp;None⭐\n 7. 逻辑语句⭐⭐⭐⭐\n 8. 列表推导式⭐⭐⭐\n 9. 理解函数⭐\n 10. 常用内置函数⭐⭐⭐\n 11. 内置库之文件路径pathlib库⭐⭐⭐  12. 内置库之csv文件库⭐⭐\n 13. 内置库之正则表达式re库⭐⭐⭐⭐⭐\n 14. 初学python常出错误汇总⭐⭐⭐\n","date":1592727272,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1592727272,"objectID":"dcae6979735f23e0a642d9f87be6a338","permalink":"https://thunderhit.github.io/post/python%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/","publishdate":"2020-06-21T16:14:32+08:00","relpermalink":"/post/python%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/","section":"post","summary":"Python基础入门视频教程汇总贴，含视频+代码","tags":["python入门"],"title":"Python语法快速入门","type":"post"},{"authors":["大邓"],"categories":["教程","视频"],"content":"目录      1. Python的NLP实战分享-如何实现合同风险预测模型 2. NLP与心理学相遇 Where NLP and psychology meet - Alexandra Klochko 3. Tricks, tips and topics in Text Analysis - Bhargav Srinivasa Desikan        1. Python的NLP实战分享-如何实现合同风险预测模型  \n2. NLP与心理学相遇 Where NLP and psychology meet - Alexandra Klochko  \n3. Tricks, tips and topics in Text Analysis - Bhargav Srinivasa Desikan  \n ","date":1592726308,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1592726308,"objectID":"9d73f394b4db3ff113c81ea2a00e94fc","permalink":"https://thunderhit.github.io/post/nlp_resources/","publishdate":"2020-06-21T15:58:28+08:00","relpermalink":"/post/nlp_resources/","section":"post","summary":"B站","tags":["python","自然语言处理","nlp","文本分析","B站"],"title":"文本分析(自然语言处理)相关视频汇总","type":"post"},{"authors":["大邓"],"categories":["教程","视频"],"content":"目录    N级标题   This is an H1  This is an H2  This is an H3   加粗、斜体 高亮 下划线 删除线 引用 列表  有序列表 无序列表   代码块 表格 超链接 插入图片 任务清单 数学公式 mermaid图表 支持     学习编程的过程需要敲大量代码，遇到很多错误，好脑子不如烂笔头，能一边敲代码一边做笔记，学起来事倍功半，今天分享大家一个做笔记的工具软件Typora。\n N级标题 一个#就是一个级，最多支持六级标题。\n# This is an H1 ## This is an H2 ### This is an H3  效果如下\nThis is an H1 This is an H2 This is an H3 \n加粗、斜体 **加粗的文本**  加粗的文本\n*斜体文本*  斜体文本\n\n高亮 ==highlight==  ==highlight==\n\n下划线 \u0026lt;u\u0026gt;下划线内容\u0026lt;/u\u0026gt;  下划线内容\n\n删除线  ~~Mistaken text.~~  Mistaken text.\n\n引用 \u0026gt; This is another blockquote with one paragraph. There is three empty line to seperate two blockquote.  效果如下\n This is another blockquote with one paragraph. There is three empty line to seperate two blockquote.\n \n列表 有序列表 ordered list: 1. Red 2. Green 3.\tBlue  ordered list:\n  Red\n  Green\n  Blue\n   注意.之后留一个空格再书写内容   无序列表 un-ordered list: - Red - Green - Blue  效果如下\nun-ordered list:\n  Red\n  Green\n  Blue\n   注意.之后同样留一个空格再书写内容   \n代码块 一般情况下，word等office软件不支持代码高亮，且存储代码容易乱行。以typora为首的markdown语法完美支持各种代码，这里以Python代码为例\n​```python import requests url = 'https://www.baidu.com/' resp = requests.get(url) ​```  效果如下\nimport requests url = 'https://www.baidu.com/' resp = requests.get(url)  \n表格 | First Column | Second Column | | ------------- | ------------- | | Content Cell1 | Content Cell2 | | Content Cell3 | Content Cell4 |  效果\n   First Column Second Column     Content Cell1 Content Cell2   Content Cell3 Content Cell4    \n超链接 [百度](https://www.baidu.com/)   百度\n\n插入图片 ![](图片文件路径或网址) ![](https://thunderhit.github.io/post/hugo/featured_hu9a15b8275a5635099198061a5e2dc1dd_3029870_720x0_resize_lanczos_2.png)  效果如下\n\n任务清单 某日任务清单 - [x] 6点起床 - [ ] 步数达到10000步 - [x] 读一小时书 - [x] 日消费不超过50元  效果\n 6点起床 步数达到10000步 读一小时书 日消费不超过50元  \n数学公式 在markdown中用$夹住Latex公式表达式\n$\\lim_{x \\to \\infty} \\exp(-x) = 0$  效果如下\n$\\lim_{x \\to \\infty} \\exp(-x) = 0$\n\nmermaid图表 Typora中可以绘制流程图、序列图、状态图、甘特图、饼形图、类图等，这里以流程图为例\n​```mermaid graph LR A--\u0026gt;B B--\u0026gt;C C--\u0026gt;D ​```  效果\ngraph LR A--\u0026gt;B B--\u0026gt;C C--\u0026gt;D  更多mermaid可以看\n在Markdown中用mermaid语法绘制图表\n\n支持 分享不易，谢谢大家点赞分享和红包^_^\n","date":1592561547,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1592561547,"objectID":"0b4a6f22772b7e48647d3184b533cd14","permalink":"https://thunderhit.github.io/post/typora%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84%E5%85%8D%E8%B4%B9markdown%E8%BD%AF%E4%BB%B6/","publishdate":"2020-06-19T18:12:27+08:00","relpermalink":"/post/typora%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84%E5%85%8D%E8%B4%B9markdown%E8%BD%AF%E4%BB%B6/","section":"post","summary":"照着视频学markdown","tags":["markdown","typora","文字工具","笔记"],"title":"半小时学会Markdown标记语法","type":"post"},{"authors":["大邓"],"categories":["python语法入门","视频","教程"],"content":" Anaconda和Python都是python。一定要记住二选其一，不要都安装，不然在学习python第三方包安装的时，你会遇到一些麻烦。如果之前没安装过两个软件，建议从头到尾按照我的视频进行电脑配置   目录  Mac环境配置  软件包下载 一、Python安装  命令行打开的方法   二、pip3设置  2.1 更改pip3镜像 2.2 使用方法   三、Jupyter notebook  3.1 安装 3.2 调用 3.3 常用快捷键   四、Tips 支持     Mac环境配置 软件包下载  链接:https://pan.baidu.com/s/1tbgGBcAnYSMZXp80F0nM1Q 密码:t307    一、Python安装 官网 https://www.python.org/\n mac自带python2，为了与python2区别，凡是在命令行中使用pip和python，我们都要加上3。   安装成功的标准是==命令行可以调用python3==\n$ python3  \n命令行打开的方法 ==command+空格== 启动 ==聚焦搜索Spotlight==，再输入terminal\n\n二、pip3设置 pip3是python的命令行安装工具，可以帮我们安装第三方库。\n2.1 更改pip3镜像 为了保证安装的速度和成功率，命令行执行\npip3 config set global.index-url https://mirrors.aliyun.com/pypi/simple/  2.2 使用方法 pip3 install packagename  \n三、Jupyter notebook 3.1 安装 命令行执行\npip3 install jupyter  3.2 调用 命令行执行\njupyter notebook  3.3 常用快捷键    jupyter内快捷键 功能     ESC+A（ESC+B） 当前单元格上(下)新建一个新的Cell   D+D 删除当前单元格   Shift+Enter 执行单元格内的Python代码   ESC+M 单元格由代码模式转为Markdown标记模式     Markdown语法特别好用，强烈建议学习，顺便安装一个Typora软件   \n四、Tips  环境配置太难，而且有时候电脑还会出现一些视频里出现不了的问题。这时不妨在==淘宝==搜python环境配置，寻找一对一远程协助   支持 分享不易，谢谢大家分享（或红包）支持^_^\n","date":1592556092,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1592556092,"objectID":"7f2fae8e06e89e140f5266fee695b286","permalink":"https://thunderhit.github.io/post/python%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AEmac/","publishdate":"2020-06-19T16:41:32+08:00","relpermalink":"/post/python%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AEmac/","section":"post","summary":"照着视频配置Mac","tags":["环境配置","python"],"title":"Mac电脑Python环境配置","type":"post"},{"authors":["大邓"],"categories":["python语法入门","视频","教程"],"content":"有三大类内置函数\n 数学相关函数 类型转化函数 功能函数   函数名加粗的是都是重点   目录      数学相关 类型转换 功能函数 eval() zip(lst1, lst2,lst3\u0026hellip;) type/help map(func, lst)映射运算 print(value, end=\u0026rsquo;\\n\u0026rsquo;) open(file, mode='r\u0026rsquo;, encoding=None) 重点函数   支持      \n数学相关    函数 功能 例子 运行结果     abs(a) 对a取绝对值 abs(-1) 1   max(lst)、min(lst) 寻找lst中的最大、最小值 max([3, 2, 9]) 9   sum(lst) 对lst内所有数字求和 sum([3, 2, 9]) 14   sorted(lst， reverse) 对lst排序； 参数reverse为布尔值控制升降序 sorted([3, 2, 9]) [2, 3, 9]   range(start, end, step) 生成以步长step，生成从start到end的数列,默认step=1，结果取不到end list(range(1,5)) [1, 2, 3,4]    #取绝对值 abs(-1)  1  #取最大 max([3, 2, 9])  9  #取最小 min([3, 2, 9])  2  #求和 sum([3, 2, 9])  14  #排序 sorted([3,2,9])  [2, 3, 9]  #排序(方向调整) sorted([3,2,9], reverse=True)  [9, 3, 2]  #生成序列 list(range(1, 10))  [1, 2, 3, 4, 5, 6, 7, 8, 9]  list(range(1, 10, 2))  [1, 3, 5, 7, 9]  \n类型转换    函数 功能 例子 运行结果     int(string) 将字符串数改为整数型 int(\u0026lsquo;9\u0026rsquo;) 9   float(int/str) 将int或str改为浮点型 float(9)、float(\u0026lsquo;9\u0026rsquo;) 9.0   list(iterable) 将可迭代对象为列表。这里的iterable可以为字符串，可以是列表 list(range(1,5)) [1,2,3,4]    enumerate(lst) 返回带有索引值的序列seq,需要list(seq)处理后才能看到seq list(enumerate([\u0026lsquo;a\u0026rsquo;, \u0026lsquo;b\u0026rsquo;, \u0026lsquo;c\u0026rsquo;])) [(0,\u0026lsquo;a\u0026rsquo;), (1, \u0026lsquo;b\u0026rsquo;), (2, \u0026lsquo;c\u0026rsquo;)]   tuple(lst) 将lst变为tuple tuple([1,2,3]) (1,2,3)   set(lst) 将lst变为集合 set([1,4,4,4,3]) {1,3,4}    a = 9 b = 9 a+b  18  #变转化为整数 int('9')  9  #转化为小数 float('9')  9.0  float(9)  9.0  #转化为列表 list(range(1, 5))  [1, 2, 3, 4]  #给列表中每个元素分配一个索引值 names = ['张三', '李四', '王五'] list(enumerate(names))  [(0, '张三'), (1, '李四'), (2, '王五')]  \n功能函数    函数 功能 例子 运行结果     eval(expression) 执行一个字符串表达式 eval(\u0026lsquo;1+1\u0026rsquo;) 2   zip(lst1,lst2\u0026hellip;) 将lst1,lst2\u0026hellip;合并,返回zip对象。需要list处理一下zip对象 list(zip([1,2,3],[4,5,6])) [(1, 4), (2, 5), (3, 6)]   type(x) 查看X的类型 type(\u0026lsquo;2\u0026rsquo;) \u0026lt;class \u0026lsquo;str'\u0026gt;   help(x) 查看X的相关信息 help([1, 2]) Help on list object..   map(func, lst) 对lst中的每一个个体都进行func操作 list(map(sum, [[1,1], [1,2]])) [2, 3]   print(value, end=\u0026rsquo;\\n\u0026rsquo;) 打印value print(\u0026lsquo;abc\u0026rsquo;) abc   open(file， encoding) 打开file文件， encoding是file的文件编码      \neval() eval(str_expression)\nstr_expression 是字符串表达式，可以是变量、函数等\na = 9 b = 9 c = 'a+b' print(a+b) print(c) print(eval(c))  18 a+b 18  eval('a+b')  18  d = 'hello world' print('d') print(eval('d'))  d hello world  def hello(): print('hello python') print('hello()')  hello()  eval('hello()')  hello python  \nzip(lst1, lst2,lst3\u0026hellip;) 将lst1， lst2， lst3按照顺序进行合并\nnames = ['David', 'Mary', 'Henry', 'Unique'] sexs = ['male', 'femal', 'male', 'male'] ages = [25, 22, 30, 40] list(zip(names, sexs, ages))  [('David', 'male', 25), ('Mary', 'femal', 22), ('Henry', 'male', 30), ('Unique', 'male', 40)]  \ntype/help 查看数据类型、查看感兴趣对象的介绍\na = [1,3,5] type(a)  list  help(a)  Help on list object: class list(object) | list(iterable=(), /) | | Built-in mutable sequence. | | If no argument is given, the constructor creates a new empty list. | The argument must be an iterable if specified. | | Methods defined here: | ......... | append(self, object, /) | Append object to the end of the list. | | | count(self, value, /) | Return number of occurrences of value. | | extend(self, iterable, /) | Extend list by appending elements from the iterable. |  type(print)  builtin_function_or_method  help(print)  Help on built-in function print in module builtins: print(...) print(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False) Prints the values to a stream, or to sys.stdout by default. Optional keyword arguments: file: a file-like object (stream); defaults to the current sys.stdout. sep: string inserted between values, default a space. end: string appended after the last value, default a newline. flush: whether to forcibly flush the stream.  map(func, lst)映射运算 将func运算映射到lst上每个元素\nlst = [[1,1], [1,2], [1,2], [1,2], [1,2], [1,2], [1,2]] res = map(sum, lst) list(res)  [2, 3, 3, 3, 3, 3, 3]  \nprint(value, end=\u0026rsquo;\\n\u0026rsquo;) 打印value，默认使用换行结束\nhelp(print)  Help on built-in function print in module builtins: print(...) print(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False) Prints the values to a stream, or to sys.stdout by default. Optional keyword arguments: file: a file-like object (stream); defaults to the current sys.stdout. sep: string inserted between values, default a space. end: string appended after the last value, default a newline. flush: whether to forcibly flush the stream.  print('hello world!') print('hello python!')  hello world! hello python!  print('hello world!', end='\\t') print('hello python!')  hello world!\thello python!  \nopen(file, mode='r\u0026rsquo;, encoding=None)  file 文件路径 mode 操作方式们，最常用的是r和a+。r读取， a+是追加写入 encoding 编码方式 ，常见的文件编码方式主要是utf-8和gbk  读取返回io对象\nio对象有read()方法\n 相对路径\ndata\n  绝对路径\nC:Users\\thunderhit\\Desktop\\Python数据分析入门\\02-Python语法入门\\data\n  建议大家都要用相对路径   # 读取数据 open('data/test.txt', encoding='utf-8').read()  '章节设计\\n\\n第一部分 环境配置\\n第二部分 快速入门python\\n第三部分 网络爬虫\\n第四部分 简单的文本分析\\n第五部分 进阶文本分析'  # 新建文件/在已有的文件内插入内容 f = open('data/test2.txt', mode='a+', encoding='utf-8') f.write('我在学python，现在是下午五点') f.close()  # 新建文件/在已有的文件内插入内容 f = open('data/test2.txt', mode='a+', encoding='utf-8') f.write('\\nLife is short, so to learn Python') f.close()  # 新建文件/在已有的文件内插入内容 f = open('data/test2.txt', mode='a+', encoding='utf-8') f.write('\\nLife is short, so to learn Python') f.write('\\nLife is short, so to learn music') f.write('\\nLife is short, so to learn english') f.close()  \n重点函数  sorted(lst， ascending) range(start, end, step) enumerate(lst) eval(expression) zip(lst1, lst2..) map(func, lst) print(x) open(file, mode, encoding)  支持 分享不易，谢谢大家分享（或红包）支持^_^\n","date":1592555951,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1592555951,"objectID":"57a8d4be9b62e89d0d5560f317c3e17f","permalink":"https://thunderhit.github.io/post/09-%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/","publishdate":"2020-06-19T16:39:11+08:00","relpermalink":"/post/09-%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/","section":"post","summary":"简单实用","tags":["函数","python"],"title":"Python内置常用函数","type":"post"},{"authors":["大邓"],"categories":["python语法入门","视频","教程"],"content":"学习编程就是在遇到错误、认识错误、解决错误的过程。遇到错误，大家要发挥主观能动性，用自己的英文阅读能力去先读一下英文报错提示，一般情况下错误提示会告诉你是什么类型的错误，错误出在哪一行。\n再结合百度谷歌，80%以上的问题都能解决。现在我们了解一下常见的问题都有哪些，如何克服这些问题。\n 目录      1. 忘记写冒号 2. 误用 = 3. 错误的缩进 4. 变量没有定义 5. 中英文输入法导致的错误 6. 不同数据类型的拼接 7. 索引位置问题 8. 使用字典中不存在的键 9. 忘了括号 10. 漏传参数 11. 缺失依赖库 12. 使用了python中的关键词 13. 文件编码问题 那怎么找到正确的编码参数呢？   14. 路径字符串写法 支持     1. 忘记写冒号 在 if、elif、else、for、while、def语句后面忘记添加 :\nage = 42 if age == 42 print('Hello!')   File \u0026quot;\u0026lt;ipython-input-10-1f5acea116cf\u0026gt;\u0026quot;, line 3 if age == 42 ^ SyntaxError: invalid syntax  age = 42 if age == 42: print('Hello!')  Hello!  \n2. 误用 = = 是赋值操作，而判断两个值是否相等是 ==\ngender = '男' if gender = '男': print('Man')   File \u0026quot;\u0026lt;ipython-input-12-c3ceea5a9004\u0026gt;\u0026quot;, line 3 if gender = '男': ^ SyntaxError: invalid syntax  gender = '男' if gender == '男': print('Man')  Man  \n3. 错误的缩进 Python用缩进区分代码块，常见的错误用法：\nprint('Hello!') print('Howdy!')   File \u0026quot;\u0026lt;ipython-input-14-784bdb6e1df5\u0026gt;\u0026quot;, line 2 print('Howdy!') ^ IndentationError: unexpected indent  print('Hello!') print('Howdy!')  Hello! Howdy!  num = 25 if num == 25: print('Hello!')   File \u0026quot;\u0026lt;ipython-input-16-8e4debcdf119\u0026gt;\u0026quot;, line 3 print('Hello!') ^ IndentationError: expected an indented block  num = 25 if num == 25: print('Hello!')  Hello!  \n4. 变量没有定义 if c in ['New York', 'Bei Jing', 'Tokyo']: print('This is a mega city')  --------------------------------------------------------------------------- NameError Traceback (most recent call last) \u0026lt;ipython-input-21-d91d0b36da73\u0026gt; in \u0026lt;module\u0026gt; ----\u0026gt; 1 if c in ['New York', 'Bei Jing', 'Tokyo']: 2 print('This is a mega c') NameError: name 'c' is not defined  city ='New York' if city in ['New York', 'Bei Jing', 'Tokyo']: print('This is a mega city')  This is a mega city  \n5. 中英文输入法导致的错误  英文冒号 英文括号 英文逗号 英文单双引号  if 5\u0026gt;3： print('5比3大')   File \u0026quot;\u0026lt;ipython-input-23-47f8b985b82d\u0026gt;\u0026quot;, line 1 if 5\u0026gt;3： ^ SyntaxError: invalid character in identifier  if 5\u0026gt;3: print('5比3大')  5比3大  spam = [1, 2， 3]   File \u0026quot;\u0026lt;ipython-input-26-a003060d051a\u0026gt;\u0026quot;, line 1 spam = [1, 2， 3] ^ SyntaxError: invalid character in identifier  spam = [1, 2, 3] spam  [1, 2, 3]  if 5\u0026gt;3: print('5比3大’)   File \u0026quot;\u0026lt;ipython-input-30-ac2e4eb87092\u0026gt;\u0026quot;, line 2 print('5比3大’) ^ SyntaxError: EOL while scanning string literal  if 5\u0026gt;3: print('5比3大')  5比3大  \n6. 不同数据类型的拼接 同种数据类型 字符串/列表/元组 支持拼接\n字典/集合不支持拼接\n'I have ' + 12 + ' eggs.'  --------------------------------------------------------------------------- TypeError Traceback (most recent call last) \u0026lt;ipython-input-32-20c7c89a2ec6\u0026gt; in \u0026lt;module\u0026gt; ----\u0026gt; 1 'I have ' + 12 + ' eggs.' TypeError: can only concatenate str (not \u0026quot;int\u0026quot;) to str  'I have {} eggs.'.format(12)  'I have 12 eggs.'  ['a', 'b', 'c']+'def'  --------------------------------------------------------------------------- TypeError Traceback (most recent call last) \u0026lt;ipython-input-35-0e8919333d6b\u0026gt; in \u0026lt;module\u0026gt; ----\u0026gt; 1 ['a', 'b', 'c']+'def' TypeError: can only concatenate list (not \u0026quot;str\u0026quot;) to list  ('a', 'b', 'c')+['a', 'b', 'c']  --------------------------------------------------------------------------- TypeError Traceback (most recent call last) \u0026lt;ipython-input-36-90742621216d\u0026gt; in \u0026lt;module\u0026gt; ----\u0026gt; 1 ('a', 'b', 'c')+['a', 'b', 'c'] TypeError: can only concatenate tuple (not \u0026quot;list\u0026quot;) to tuple  set(['a', 'b', 'c'])+set(['d', 'e'])  --------------------------------------------------------------------------- TypeError Traceback (most recent call last) \u0026lt;ipython-input-37-ddf5fb1e6c8c\u0026gt; in \u0026lt;module\u0026gt; ----\u0026gt; 1 set(['a', 'b', 'c'])+set(['d', 'e']) TypeError: unsupported operand type(s) for +: 'set' and 'set'  grades1 = {'Mary':99, 'Henry':77} grades2 = {'David':88, 'Unique':89} grades1+grades2  --------------------------------------------------------------------------- TypeError Traceback (most recent call last) \u0026lt;ipython-input-38-1b1456844331\u0026gt; in \u0026lt;module\u0026gt; 2 grades2 = {'David':88, 'Unique':89} 3 ----\u0026gt; 4 grades1+grades2 TypeError: unsupported operand type(s) for +: 'dict' and 'dict'  \n7. 索引位置问题 spam = ['cat', 'dog', 'mouse'] print(spam[5])  --------------------------------------------------------------------------- IndexError Traceback (most recent call last) \u0026lt;ipython-input-41-e0a79346266d\u0026gt; in \u0026lt;module\u0026gt; 1 spam = ['cat', 'dog', 'mouse'] ----\u0026gt; 2 print(spam[5]) IndexError: list index out of range  \n8. 使用字典中不存在的键 在字典对象中访问 key 可以使用 []，\n但是如果该 key 不存在，就会导致：KeyError: \u0026lsquo;zebra\u0026rsquo;\nspam = {'cat': 'Zophie', 'dog': 'Basil', 'mouse': 'Whiskers'} print(spam['zebra'])  --------------------------------------------------------------------------- KeyError Traceback (most recent call last) \u0026lt;ipython-input-42-92c9b44ff034\u0026gt; in \u0026lt;module\u0026gt; 3 'mouse': 'Whiskers'} 4 ----\u0026gt; 5 print(spam['zebra']) KeyError: 'zebra'  为了避免这种情况，可以使用 get 方法\nspam = {'cat': 'Zophie', 'dog': 'Basil', 'mouse': 'Whiskers'} print(spam.get('zebra'))  None  key 不存在时，get 默认返回 None\n9. 忘了括号 当函数中传入的是函数或者方法时，容易漏写括号\nspam = {'cat': 'Zophie', 'dog': 'Basil', 'mouse': 'Whiskers'} print(spam.get('zebra') #end of funtion   File \u0026quot;\u0026lt;ipython-input-44-d105cc86097c\u0026gt;\u0026quot;, line 5 print(spam.get('zebra') #end of funtion ^ SyntaxError: unexpected EOF while parsing  spam = {'cat': 'Zophie', 'dog': 'Basil', 'mouse': 'Whiskers'} print(spam.get('zebra'))  None  \n10. 漏传参数 def diyadd(x, y, z): return x+y+z diyadd(1, 2)  --------------------------------------------------------------------------- TypeError Traceback (most recent call last) \u0026lt;ipython-input-46-7184f3f906ca\u0026gt; in \u0026lt;module\u0026gt; 2 return x+y+z 3 ----\u0026gt; 4 diyadd(1, 2) TypeError: diyadd() missing 1 required positional argument: 'z'  diyadd(1, 2, 4)  7  \n11. 缺失依赖库 电脑中没有相关的库\nimport packagename  --------------------------------------------------------------------------- ModuleNotFoundError Traceback (most recent call last) \u0026lt;ipython-input-48-6d7d6f569116\u0026gt; in \u0026lt;module\u0026gt; ----\u0026gt; 1 import packagename ModuleNotFoundError: No module named 'packagename'  !pip install packagename  \n12. 使用了python中的关键词 如try、except、def、class、object、None、True、False等\ntry = 5 print(try)   File \u0026quot;\u0026lt;ipython-input-49-508e87fe2ff3\u0026gt;\u0026quot;, line 1 try = 5 ^ SyntaxError: invalid syntax  a = 5 print(a)  5  def = 6 print(def)   File \u0026quot;\u0026lt;ipython-input-51-c797890e9b85\u0026gt;\u0026quot;, line 1 def = 6 ^ SyntaxError: invalid syntax  d = 6 print(d)  6  13. 文件编码问题 import pandas as pd df = pd.read_csv('data/twitter_sentiment.csv') df.head()  UnicodeDecodeError: 'utf-8' codec can't decode bytes in position 7-8: invalid continuation byte UnicodeDecodeError Traceback (most recent call last) \u0026lt;ipython-input-53-f7ee81cff3e5\u0026gt; in \u0026lt;module\u0026gt; 1 import pandas as pd 2 ----\u0026gt; 3 df = pd.read_csv('data/twitter_sentiment.csv') 4 df.head() pandas\\_libs\\parsers.pyx in pandas._libs.parsers._string_box_utf8() UnicodeDecodeError: 'utf-8' codec can't decode bytes in position 7-8: invalid continuation byte  import pandas as pd #gbk/utf-8只能解决大部分编码问题，但不能解决全部问题 df = pd.read_csv('data/twitter_sentiment.csv', encoding='gbk') df.head()  --------------------------------------------------------------------------- UnicodeDecodeError Traceback (most recent call last) \u0026lt;ipython-input-55-6aa161f42239\u0026gt; in \u0026lt;module\u0026gt; 2 3 #gbk/utf-8只能解决大部分编码问题，但不能解决全部问题 ----\u0026gt; 4 df = pd.read_csv('data/twitter_sentiment.csv', encoding='gbk') 5 df.head() c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\pandas\\io\\parsers.py in parser_f(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, dialect, error_bad_lines, warn_bad_lines, delim_whitespace, low_memory, memory_map, float_precision) 674 ) 675 -\u0026gt; 1891 self._reader = parsers.TextReader(src, **kwds) 1892 self.unnamed_cols = self._reader.unnamed_cols 1893 pandas\\_libs\\parsers.pyx in pandas._libs.parsers.TextReader.__cinit__() pandas\\_libs\\parsers.pyx in pandas._libs.parsers.TextReader._get_header() pandas\\_libs\\parsers.pyx in pandas._libs.parsers.TextReader._tokenize_rows() pandas\\_libs\\parsers.pyx in pandas._libs.parsers.raise_parser_error() UnicodeDecodeError: 'gbk' codec can't decode byte 0xbd in position 10717: illegal multibyte sequence  上面的程序会提示编码错误， 尝试encoding编码参数传入utf-8、gbk，也没有解决问题。\n那怎么找到正确的编码参数呢？ import chardet #读取为二进制数据 binary_data = open('data/twitter_sentiment.csv', 'rb').read() #传给chardet.detect，稍等片刻 chardet.detect(binary_data)  {'encoding': 'Windows-1252', 'confidence': 0.7291192008535122, 'language': ''}  import pandas as pd df = pd.read_csv('data/twitter_sentiment.csv', encoding='Windows-1252') df.head()   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  ItemID Sentiment SentimentText     0 1 0 is so sad for my APL frie...   1 2 0 I missed the New Moon trail...   2 3 1 omg its already 7:30 :O   3 4 0 .. Omgaga. Im sooo im gunna CRy. I'...   4 5 0 i think mi bf is cheating on me!!! ...     \n14. 路径字符串写法  Mac\u0026amp;Win 推荐使用 / 写法 如果使用\\ 写法，安全起见，请换成\\\\ （Mac不支持\\\\ ）  \\n \\t \\d  open('data/test.txt', encoding='utf-8').read()  '章节设计\\n\\n第一部分 环境配置\\n第二部分 快速入门python\\n第三部分 网络爬虫\\n第四部分 简单的文本分析\\n第五部分 进阶文本分析'  open('data\\test.txt', encoding='utf-8').read()  --------------------------------------------------------------------------- OSError Traceback (most recent call last) \u0026lt;ipython-input-59-d855ed58b500\u0026gt; in \u0026lt;module\u0026gt; ----\u0026gt; 1 open('data\\test.txt', encoding='utf-8').read() OSError: [Errno 22] Invalid argument: 'data\\test.txt'  open('data\\\\test.txt', encoding='utf-8').read()  '章节设计\\n\\n第一部分 环境配置\\n第二部分 快速入门python\\n第三部分 网络爬虫\\n第四部分 简单的文本分析\\n第五部分 进阶文本分析'  open('data\\Test.txt', encoding='utf-8').read()  '章节设计\\n\\n第一部分 环境配置\\n第二部分 快速入门python\\n第三部分 网络爬虫\\n第四部分 简单的文本分析\\n第五部分 进阶文本分析'  \n支持 分享不易，谢谢大家分享（或红包）支持^_^\n","date":1592555951,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1592555951,"objectID":"d5663092f40fa35d653ee667aea06d21","permalink":"https://thunderhit.github.io/post/13-%E5%88%9D%E5%AD%A6python%E5%B8%B8%E5%87%BA%E9%94%99%E8%AF%AF%E6%B1%87%E6%80%BB/","publishdate":"2020-06-19T16:39:11+08:00","relpermalink":"/post/13-%E5%88%9D%E5%AD%A6python%E5%B8%B8%E5%87%BA%E9%94%99%E8%AF%AF%E6%B1%87%E6%80%BB/","section":"post","summary":"读懂错误提示，轻松学习python","tags":["常见错误","python"],"title":"python常见错误及其解决办法","type":"post"},{"authors":["大邓"],"categories":["python语法入门","视频","教程"],"content":"目录      输出数字a的绝对数 Python与英语对比 每天积累一点点 Python是面向对象的编程语言 Python中的数据类型   支持      Python中流行这样一句话“Life is short, so we learn Python! ”恭喜你选择Python这门性感的语言，你一定会在学习的过程中感叹“Python大法就是好”~    输出数字a的绝对数 在学习代码之前，我给大家看一段话\n There is such a number a, if a is greater than or equal to 0, we will print a; if a is less than 0, we will print -a\n 相信大家一看就明白了这是求某数的绝对值方法的英文描述。下面我们用精炼的Python语言表示\na = -50 if a \u0026gt;= 0: print(a) else: print(-a)  50   Python号称是最说人话的编程语言，人话意思就是最接近人类自然语言的表达方式构建代码。   Python与英语对比 从上面的例子中，我们已经知道了Python和英语一样都是一种语言，学习语言就需要学习基本的知识点，包括背单词和了解语法。\n   英语 Python 例如     单词 数据类型 列表、字符串、字典等   语法 逻辑语句 if条件判读语句、for循环语句等    每天积累一点点 本部分非必须，仅仅为了展示python也可以作图\n#mac #!pip3 install matplotlib #win !pip install matplotlib  Looking in indexes: https://mirrors.aliyun.com/pypi/simple/ Requirement already satisfied: matplotlib in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (3.2.1) Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,\u0026gt;=2.0.1 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (2.4.7) Requirement already satisfied: cycler\u0026gt;=0.10 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (0.10.0) Requirement already satisfied: numpy\u0026gt;=1.11 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (1.18.2) Requirement already satisfied: kiwisolver\u0026gt;=1.0.1 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (1.2.0) Requirement already satisfied: python-dateutil\u0026gt;=2.1 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (2.8.1) Requirement already satisfied: six in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from cycler\u0026gt;=0.10-\u0026gt;matplotlib) (1.14.0)  import matplotlib.pyplot as plt import math %matplotlib inline ability = 1 scale = 1.01 records = [] days = range(1, 365) for day in days: ability = ability*scale records.append(ability) plt.plot(days, records) plt.title('Be better everyday!')  Text(0.5, 1.0, 'Be better everyday!')   Python是面向对象的编程语言 面向对象是最难理解的部分，这里大家只需要记住\n 类型和对象是紧密绑定的，说对象就是在说类型。 不同的类型有不同的功能，都是为了更高效的实现人类需求或者数据分析需求     类型 实例(对象) 实例(对象) 方法     猪 村东头老王家的猪 把猪把粮食变成肉 猪.产肉   牛 村东头老张家的耕牛 把粮食变成畜力 牛.耕地   列表 hobbies = ['跑步', '乒乓球'， '篮球'，'篮球'] 统计某群体爱好的分布, 查看各爱好的人数 hobbies.count('篮球')   字符串 str1 = \u0026quot;Hello，World!\u0026quot; 将文本内容由World更改为Python str1.replace('World', 'Python')   字典 grade = {'David':98, 'Mary':88,...} 方便数据检索 grade.get('David')   \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip;    Python中的数据类型 不同的数据类型适合处理不同的数据，有不同的应用场景。\n   数据类型 例子     数字 a = 5   字符串 my_str = \u0026quot;abcdefg\u0026quot;   列表 my_list = [1, 2, 3]   元组 my_tuple = (1, 2, 3)   字典 my_dict = {'David': 25, 'Mark':30}   空值 None    \n支持 分享不易，谢谢大家分享（或红包）支持^_^\n","date":1592555951,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1592555951,"objectID":"8abe5c08b34d2e541c925778ec604b2b","permalink":"https://thunderhit.github.io/post/01-python%E8%B7%9F%E8%8B%B1%E8%AF%AD%E4%B8%80%E6%A0%B7%E6%98%AF%E4%B8%80%E9%97%A8%E8%AF%AD%E8%A8%80/","publishdate":"2020-06-19T16:39:11+08:00","relpermalink":"/post/01-python%E8%B7%9F%E8%8B%B1%E8%AF%AD%E4%B8%80%E6%A0%B7%E6%98%AF%E4%B8%80%E9%97%A8%E8%AF%AD%E8%A8%80/","section":"post","summary":"了解python语言","tags":["python"],"title":"Python跟英语一样是一门语言","type":"post"},{"authors":["大邓"],"categories":["python语法入门","视频","教程"],"content":"目录  Win环境配置  软件包下载 一、Python安装  安装注意事项   二、pip配置  2.1 更改pip镜像 2.2 使用方法   三、Jupyter notebook  3.1 安装 3.2 调用 3.3 常用快捷键   四、Tips 支持      Anaconda和Python都是python。一定要记住二选其一，不要都安装，不然在学习python第三方包安装的时，你会遇到一些麻烦。如果之前没安装过两个软件，建议从头到尾按照我的视频进行电脑配置   Win环境配置 软件包下载  链接:https://pan.baidu.com/s/1tbgGBcAnYSMZXp80F0nM1Q 密码:t307    一、Python安装 官网 https://www.python.org/\n安装注意事项  推荐选择3.7.5. 最新的bug比较多 ==选择Install Now默认安装方式== 勾选Add Python 3.x to PATH，这样命令行可以调用python  \n二、pip配置 pip是python的命令行安装工具，可以帮我们安装第三方库。\n2.1 更改pip镜像 为了保证安装的速度和成功率，命令行执行\npip config set global.index-url https://mirrors.aliyun.com/pypi/simple/  2.2 使用方法 pip install packagename  \n三、Jupyter notebook 3.1 安装 命令行执行\npip install jupyter  3.2 调用 命令行执行\njupyter notebook  3.3 常用快捷键    jupyter内快捷键 功能     ESC+A（ESC+B） 当前单元格上(下)新建一个新的Cell   D+D 删除当前单元格   Shift+Enter 执行单元格内的Python代码   ESC+M 单元格由代码模式转为标记模式     Markdown语法特别好用，强烈建议学习，顺便安装一个Typora软件   \n四、Tips  环境配置太难，而且有时候电脑还会出现一些视频里出现不了的问题。这时不妨在==淘宝==搜python环境配置，寻找一对一远程协助   支持 分享不易，谢谢大家分享（或红包）支持^_^\n","date":1592555951,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1592555951,"objectID":"563f986b9e73ebcedfd9d94463071563","permalink":"https://thunderhit.github.io/post/python%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AEwin/","publishdate":"2020-06-19T16:39:11+08:00","relpermalink":"/post/python%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AEwin/","section":"post","summary":"照着视频配置Windows","tags":["环境配置","python"],"title":"Windows电脑Python环境配置","type":"post"},{"authors":["大邓"],"categories":["python语法入门","视频","教程"],"content":"在编程中一般不适用excel，而是用一种很像excel的csv来存储数据。而且Excel软件可以打开csv的。\n 目录      csv存储数据代码步骤 很多数据的存储   支持     \ncsv存储数据代码步骤  代码看不懂没关系，能背过最好。背不过也没关系，能理解代码功能，而且亲自上手调试过，调试正常无误的代码可以加入你的代码笔记本中，然后以后需要的时候复制粘贴修改参数即可    新建一个csv文件  import csv path = 'data/test.csv' csvf = open(path, 'a+', encoding='utf-8', newline='')  定义字段名，并初始化csv文件为writer  fieldnames = ['name', 'age'] writer = csv.DictWriter(csvf, fieldnames=fieldnames) writer.writeheader()  将待存储数据整理为字典格式  test_data = {'name': 'David', 'age': 25}  用writer往csv中存储数据  writer.writerow(test_data)  最后记得关闭csv文件  csvf.close()  import csv csvf = open('data/test1.csv', 'a+', encoding='utf-8', newline='') fieldnames = ['name', 'age'] writer = csv.DictWriter(csvf, fieldnames=fieldnames) writer.writeheader() csvf.close()  import csv csvf = open('data/test2.csv', 'a+', encoding='utf-8', newline='') fieldnames = ['name', 'age'] writer = csv.DictWriter(csvf, fieldnames=fieldnames) writer.writeheader() test_data = {'name': 'David', 'age': 25} writer.writerow(test_data) csvf.close()  \n很多数据的存储 datas = [{'name': 'David', 'age': 25}, {'name': 'Mary', 'age': 30}, {'name': 'Henry', 'age': 35}] datas  [{'name': 'David', 'age': 25}, {'name': 'Mary', 'age': 30}, {'name': 'Henry', 'age': 35}]  import csv csvf = open('data/test2.csv', 'a+', encoding='utf-8', newline='') fieldnames = ['name', 'age'] writer = csv.DictWriter(csvf, fieldnames=fieldnames) writer.writeheader() for data in datas: writer.writerow(data) csvf.close()  \n支持 分享不易，谢谢大家分享（或红包）支持^_^\n","date":1592555951,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1592555951,"objectID":"1b19ff0fb2e206285168530524f47db1","permalink":"https://thunderhit.github.io/post/11-%E5%86%85%E7%BD%AE%E5%BA%93%E4%B9%8Bcsv%E6%96%87%E4%BB%B6%E5%BA%93/","publishdate":"2020-06-19T16:39:11+08:00","relpermalink":"/post/11-%E5%86%85%E7%BD%AE%E5%BA%93%E4%B9%8Bcsv%E6%96%87%E4%BB%B6%E5%BA%93/","section":"post","summary":"多用于存储数据","tags":["数据存储","内置库","csv","python"],"title":"内置库-数据存储csv库","type":"post"},{"authors":["大邓"],"categories":["python语法入门","视频","教程"],"content":"路径是可以让程序知道待操作的文件在哪里，python中有os和pathlib两个内置的路径库，而pathlib是python中目前最好用的路径库。\n 目录  绝对vs相对 pathlib.Path()属性方法    cwd() joinpath(\u0026hellip;grandpadir, fatherdir, \u0026hellip;file) iterdir() glob(pattern) is_file() is_dir() exists() mkdir(parents=True, exist_ok=True)   支持     \n绝对vs相对  相对路径 'img' 绝对路径 'C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/img'   当移动文件夹位置或者将代码分享给朋友使用时，你的代码再次运行就会出错。为了避免这个问题，强烈建议用相对路径   import pathlib #当前代码所在的文件夹的相对路径 pathlib.Path()  WindowsPath('.')  from pathlib import Path #当前代码所在的文件夹的相对路径 Path()  WindowsPath('.')  \npathlib.Path()属性方法  下表加粗的都是常用的方法，其他了解即可      方法 功能     cwd() 获取代码所在的当前工作路径   joinpath(\u0026hellip;grandpadir, fatherdir, \u0026hellip;file) 生成路径   iterdir() 返回某路径下的文件(夹)目录   glob(pattern) 返回符合pattern的所有文件的文件路径   is_file() 判断某路径是否为文件，返回布尔值   is_dir() 判断某路径是否为文件夹，返回布尔值   exists() 判断某路径是否存在，返回布尔值   mkdir(parents=True, exist_ok=True) 创建某路径对应的文件夹    \ncwd() 例：获取当前代码所在文件夹的绝对路径\nPath().cwd()  WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门')  \njoinpath(\u0026hellip;grandpadir, fatherdir, \u0026hellip;file) 把\u0026hellip;grandpadir, fatherdir, \u0026hellip;file加入到某路径中\n例：获得data文件夹的路径\nPath().cwd().joinpath('data')  WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data')  例：获得data/test.txt文件的路径\nPath().cwd().joinpath('data', 'test.txt')  WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test.txt')  \niterdir() 返回某路径下的文件(夹)目录\n例：获得02-Python语法入门文件夹里的所有文件(夹)路径\nlist(Path().cwd().iterdir())  [WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/.ipynb_checkpoints'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/01-Python跟英语一样是一门语言.ipynb'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/02-数据类型之字符串.ipynb'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/03-数据类型之列表元组集合.ipynb'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/04-数据类型之字典.ipynb'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/05-数据类型之布尔值\u0026amp;None.ipynb'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/06-逻辑语句(if\u0026amp;for\u0026amp;tryexcept).ipynb'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/07-列表推导式.ipynb'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/08-理解函数.ipynb'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/09-常用内置函数.ipynb'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/09-常用函数.md'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/10-内置库之文件路径pathlib库.ipynb'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/11-内置库之csv文件库.ipynb'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/12. 内置库之正则表达式re库.ipynb'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/13-初学python常出错误汇总.ipynb'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/img')]  \nglob(pattern) 查找某路径内满足pattern的所有文件路径 。\npattern='*.*' 匹配任意格式任意名字的文件\npattern='*.txt' 匹配出所有的txt文件\n例：获得data文件夹内的所有的文件路径\nlist(Path().cwd().joinpath('data').glob('*.*'))  [WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test.txt'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test2.csv'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test2.txt'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/twitter_sentiment.csv')]  例：获得data文件夹内的所有的txt额路径\nlist(Path().cwd().joinpath('data').glob('*.txt'))  [WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test.txt'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test2.txt')]  例：获得data/reports内的pdf路径\ndirs = Path().cwd().joinpath('data', 'reports').iterdir() dirs = list(dirs) for dir in dirs: files = dir.glob('*.*') for file in files: print(file)  C:\\Users\\thunderhit\\Desktop\\Python数据分析入门\\02-Python语法入门\\data\\reports\\600000\\600000_20010901_1.pdf C:\\Users\\thunderhit\\Desktop\\Python数据分析入门\\02-Python语法入门\\data\\reports\\600004\\600004_2006_n.pdf C:\\Users\\thunderhit\\Desktop\\Python数据分析入门\\02-Python语法入门\\data\\reports\\600004\\600004_2006_z.pdf C:\\Users\\thunderhit\\Desktop\\Python数据分析入门\\02-Python语法入门\\data\\reports\\600007\\600007_2001_n.pdf ....... C:\\Users\\thunderhit\\Desktop\\Python数据分析入门\\02-Python语法入门\\data\\reports\\600007\\600007_2002_1.pdf C:\\Users\\thunderhit\\Desktop\\Python数据分析入门\\02-Python语法入门\\data\\reports\\603937\\603937_2018_z.pdf ...... C:\\Users\\thunderhit\\Desktop\\Python数据分析入门\\02-Python语法入门\\data\\reports\\603937\\603937_2019_3.pdf C:\\Users\\thunderhit\\Desktop\\Python数据分析入门\\02-Python语法入门\\data\\reports\\603937\\603937_2019_z.pdf  例**：获得data/reports内的 含有\u0026rdquo;_n\u0026rdquo; 额pdf路径\ndirs = Path().cwd().joinpath('data', 'reports').iterdir() dirs = list(dirs) for dir in dirs: files = dir.glob('*_n.pdf') for file in files: print(file)  C:\\Users\\thunderhit\\Desktop\\Python数据分析入门\\02-Python语法入门\\data\\reports\\600000\\600000_2006_n.pdf C:\\Users\\thunderhit\\Desktop\\Python数据分析入门\\02-Python语法入门\\data\\reports\\600000\\600000_2008_n.pdf ........ C:\\Users\\thunderhit\\Desktop\\Python数据分析入门\\02-Python语法入门\\data\\reports\\601872\\601872_2014_n.pdf C:\\Users\\thunderhit\\Desktop\\Python数据分析入门\\02-Python语法入门\\data\\reports\\601872\\601872_2015_n.pdf C:\\Users\\thunderhit\\Desktop\\Python数据分析入门\\02-Python语法入门\\data\\reports\\601872\\601872_2016_n.pdf  \nis_file() 判断某路径是否为一个文件。返回布尔值：\n True 真实存在的文件路径 False 不真实存在或者文件夹路径  例 \u0026lsquo;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test.txt\u0026rsquo;是文件路径？\nfpath = Path('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test.txt') fpath.is_file()  True  例 \u0026lsquo;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test222.txt\u0026rsquo;是文件路径？\nfpath = Path('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test222.txt') fpath.is_file()  False  fpath = Path('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data') fpath.is_file()  False  \nis_dir() 判断某路径是否为一个文件夹。返回布尔值，True、False\n例： \u0026lsquo;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data\u0026rsquo; 是 文件夹路径？\nfpath = Path('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data') fpath.is_dir()  True  \nexists() 判断某路径是否存在。返回布尔值，True、False\n例： \u0026lsquo;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data\u0026rsquo; 是否存在？\nfpath = Path('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data') fpath.exists()  True  fpath = Path('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/datasss') fpath.exists()  False  mkdir(parents=True, exist_ok=True) 创建某路径\npath = Path().cwd().joinpath('data', 'stocks', '800000') path.mkdir(parents=True, exist_ok=True)  支持 分享不易，谢谢大家分享（或红包）支持^_^\n","date":1592555951,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1592555951,"objectID":"d473d764149286072d8cd7532fbd952b","permalink":"https://thunderhit.github.io/post/10-%E5%86%85%E7%BD%AE%E5%BA%93%E4%B9%8B%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84pathlib%E5%BA%93/","publishdate":"2020-06-19T16:39:11+08:00","relpermalink":"/post/10-%E5%86%85%E7%BD%AE%E5%BA%93%E4%B9%8B%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84pathlib%E5%BA%93/","section":"post","summary":"多用于批量读取多个文件，做路径管理之用","tags":["pathlib","python","内置库"],"title":"内置库-文件路径pathlib库","type":"post"},{"authors":["大邓"],"categories":["python语法入门","视频","教程"],"content":"正则表达式主要用于数据清洗，比如从脏乱差的文本中抽取出自己需要的信息。常见于爬虫和文本分析。\n 目录    一、正则表达式中的符号  1.1 正则字符 1.2 限定字符 1.3 定位字符   二、re库常用方法 三、只需要掌握  3.1 检索找到自己需要的正则表达式 3.2 最简单最好用表达式(.*?)   四、案例  4.1 找出文本中出现的年份 4.2 re.split(pattern, string) 4.3 re.sub(pattern, repl, string) 4.4 . 统一表达 4.5 分割文本数据的章节 4.6 抽取出数字   支持     一、正则表达式中的符号 按照符号的功能，我将其分为三类，一般情况下表达式都是由这三种符号组成的。\n1.1 正则字符  预警，听不懂不要绞尽脑汁，本节后面会柳暗花明的   %}}    正则符号 描述 匹配自己时     \\ 转义字符。例如， \u0026lsquo;n\u0026rsquo; 匹配字符 \u0026lsquo;n\u0026rsquo;。 '\\n'   ( ) 标记一个子表达式的开始和结束位置。 \\( \\)   . 匹配除换行符 \\n 之外的任何单字符。 \\.    | |左右两侧均可参与匹配    \\d 匹配字符串中的单个数字    a-zA-Z 匹配全部英文字符    0-9 匹配全部数字    \\s 匹配字符串中的\\n,\\t,空格    [] 中括号内任意正则符号均可参与匹配 \\[ \\]   ^ 当在方括号表达式中使用，^对其后的正则表达式进行了反义表达。 \\^    1.2 限定字符  提前预警，听不懂不要绞尽脑汁，本节后面会柳暗花明的   %}}    正则符号 描述 匹配自己时     * 匹配前面的子表达式零次或多次。 \\*   ? 匹配前面的子表达式零次或一次 \\?   + 匹配前面的子表达式一次或多次。 \\+   {m} n 是一个非负整数。匹配确定的 m 次。    {m,} m 是一个非负整数。至少匹配m 次。    {m, n} m 和 n 均为非负整数，其中m \u0026lt;= n。最少匹配 m 次且最多匹配 n 次。     1.3 定位字符  预警，听不懂不要绞尽脑汁，本节后面会柳暗花明的   %}}    正则符号 描述 匹配自己时     ^ 匹配输入字符串的开始位置。 \\^   $ 匹配输入字符串的结尾位置 \\$   \\b 匹配一个单词边界，即字与空格间的位置    \\B 非单词边界匹配     \n二、re库常用方法  至暗时刻已过，光来了   %}}    re库常用函数 作用     re.findall(pattern, string) 根据pattern返回匹配结果（列表）    |re.split(pattern, string) |使用pattern分割string，返回列表 |re.sub(pattern, repl, string)|使用repl替换string中的pattern|\n\n三、只需要掌握  万能的百度谷歌+你的尝试，比什么都强大   %}}  搜索引擎检索到自己需要的正则表达式 最简单最好用表达式(.*?) 在 正则表达式测试网站验证自己的正则表达式  3.1 检索找到自己需要的正则表达式 比如我只需要中文，其余字符统统不要。\n我会在百度搜中文正则表达式\n发现很多网页中网友提到````，于是\n[\\u4e00-\\u9fa5]\nimport re pattern = '[\\u4e00-\\u9fa5]+' string = \u0026quot;\u0026quot;\u0026quot;Python是一门面向对象的编程语言，诞生于1991年。\\ 目前以广泛应用在网站开发、游戏软件开发、数据采集、机器学习等多个领域。\\ 一般情况下Python是Java的20%，所以说人生苦短，我用Python。\u0026quot;\u0026quot;\u0026quot; chinese_words = re.findall(pattern, string) chinese_text = ''.join(chinese_words) chinese_text  '是一门面向对象的编程语言诞生于年目前以广泛应用在网站开发游戏软件开发数据采集机器学习等多个领域一般情况下是的所以说人生苦短我用'  3.2 最简单最好用表达式(.*?)  (.*?)特别好用，ta的暗号及使用口诀一定要背过   pattern设计步骤：\n正则符号组成正则表达式，用于匹配需要的字符。\n 找到重复的一致的规律 复制粘贴到pattern中 扣掉想要的数据 替换为(.*?) 或者相应的正则符号表达式*  比如现在需要快速挖掘出intros中的姓名、籍贯和年龄\nimport re pattern = '我叫(.*?)，来自(.*?)，今年(.*?)岁。' intros = ['我叫张三，来自山东，今年25岁。', '我叫李四，来自河北，今年28岁。', '我叫王五，来自河南，今年24岁。'] for intro in intros: info = re.findall(pattern, intro) print(info)  [('张三', '山东', '25')] [('李四', '河北', '28')] [('王五', '河南', '24')]   特别需要注意的是pattern中的(.*?)左右两侧必须有字符，否则匹配失败    import re pattern = '(.*?)，来自(.*?)，今年(.*?)' intros = ['我叫张三，来自山东，今年25岁。', '我叫李四，来自河北，今年28岁。', '我叫王五，来自河南，今年24岁。'] for intro in intros: info = re.findall(pattern, intro) print(info)  [('我叫张三', '山东', '')] [('我叫李四', '河北', '')] [('我叫王五', '河南', '')]  由于\n'(.*?)，来自(.*?)，今年(.*?)'\n中最左侧和最右侧的(.*?)没有被其他字符左右包裹，导致匹配姓名和年龄失败。\nimport re pattern = '叫(.*?)，来自(.*?)，今年(.*?)岁' intros = ['我叫张三，来自山东，今年25岁。', '我叫李四，来自河北，今年28岁。', '我叫王五，来自河南，今年24岁。'] for intro in intros: info = re.findall(pattern, intro) print(info)  [('张三', '山东', '25')] [('李四', '河北', '28')] [('王五', '河南', '24')]  \n四、案例 4.1 找出文本中出现的年份 import re pattern = '\\d{4}' string = \u0026quot;\u0026quot;\u0026quot;Python是一门面向对象的编程语言，诞生于1991年。\\ 目前以广泛应用在网站开发、游戏软件开发、数据采集、机器学习等多个领域。\\ 一般情况下Python是Java的20%，所以说人生苦短，我用Python。\u0026quot;\u0026quot;\u0026quot; re.findall(pattern, string)  ['1991']  4.2 re.split(pattern, string) 断句\npattern = '；|。' string = \u0026quot;\u0026quot;\u0026quot;Python是一门面向对象的编程语言，诞生于1991年；\\ 目前以广泛应用在网站开发、游戏软件开发、数据采集、机器学习等多个领域。\\ 一般情况下Python是Java的20%，所以说人生苦短，我用Python。\u0026quot;\u0026quot;\u0026quot; res = re.split(pattern, string) res = [r for r in res if r] res  ['Python是一门面向对象的编程语言，诞生于1991年', '目前以广泛应用在网站开发、游戏软件开发、数据采集、机器学习等多个领域', '一般情况下Python是Java的20%，所以说人生苦短，我用Python']  4.3 re.sub(pattern, repl, string) 将数字替换为NUM\npattern = '\\d+' repl = 'NUM' string = \u0026quot;\u0026quot;\u0026quot;Python是一门面向对象的编程语言，诞生于1991年。\\ 一般情况下Python是Java的20%，所以说人生苦短，我用Python。\u0026quot;\u0026quot;\u0026quot; re.sub(pattern, repl, string)  'Python是一门面向对象的编程语言，诞生于NUM年。一般情况下Python是Java的NUM%，所以说人生苦短，我用Python。'  4.4 . 统一表达 将指代同一个主体的不同表达词语统一为同一个词\ntext = '中国铁路工程集团有限公司成立于1950年3月，总部位于北京。目前中国中铁已经发展成中国和亚洲最大的多功能综合型建设集团。' pattern = '中国铁路工程集团有限公司|中国中铁' repl = '中铁' re.sub(pattern, repl, text)  '中铁成立于1950年3月，总部位于北京。目前中铁已经发展成中国和亚洲最大的多功能综合型建设集团。'  text = '中国铁路工程集团有限公司成立于1950年3月，总部位于北京。目前中国中铁已经发展成中国和亚洲最大的多功能综合型建设集团。' pattern = '[中国铁路工程集团有限公司|中国中铁]+' repl = '中铁' re.sub(pattern, repl, text)  '中铁成立于1950年3月，总部位于北京。目前中铁已经发展成中铁和亚洲最大的多功能综合型建设中铁。'  4.5 分割文本数据的章节 一二三四五六七八九十零百\ntext = \u0026quot;\u0026quot;\u0026quot; 第一篇 Python简介 第二篇 Python入门语法 第三篇 Python网络爬虫 第四篇 文本数据编码 第五篇 数据分析 第六篇 可视化\u0026quot;\u0026quot;\u0026quot; pattern = '第[一二三四五六七八九十零百]+篇' res = re.split(pattern, text) res = [r.replace(' ', '') for r in res if ' '!=r] res  ['Python简介', 'Python入门语法', 'Python网络爬虫', '文本数据编码', '数据分析', '可视化']  4.6 抽取出数字 比如日期数据\ntext = '中国铁路工程集团有限公司成立于1950年3月，总部位于北京。目前中国中铁已经发展成中国和亚洲最大的多功能综合型建设集团。' pattern = '\\d+' '-'.join(re.findall(pattern, text))  '1950-3'  \n支持 分享不易，谢谢大家分享（或红包）支持^_^\n","date":1592555951,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1592555951,"objectID":"539e0d73146512c51753a8488857d3b4","permalink":"https://thunderhit.github.io/post/12.-%E5%86%85%E7%BD%AE%E5%BA%93%E4%B9%8B%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8Fre%E5%BA%93/","publishdate":"2020-06-19T16:39:11+08:00","relpermalink":"/post/12.-%E5%86%85%E7%BD%AE%E5%BA%93%E4%B9%8B%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8Fre%E5%BA%93/","section":"post","summary":"多用于文本数据清洗","tags":["正则表达式","re","python"],"title":"内置库-正则表达式re库","type":"post"},{"authors":["大邓"],"categories":["python语法入门","视频","教程"],"content":"列表推导式唯一的用处就是增强代码的可阅读性，初次接触可能比较难理解，但是大家一定要理解，文本分析中经常会用到ta。\n 目录    问题1 用列表表示集合X 问题2 表示集合Y   列表推导式  理解列表推导式 带条件的列表推导式 问题3 全部小写 问题4 计算lower_words列表数据的单词词频 问题5 支持     \n问题1 用列表表示集合X $X= {x| x \\in [1,2,3,4,5,6,7,8,9,10]}$\nX = [1,2,3,4,5,6,7,8,9,10] X  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  X = list(range(1, 10)) X  [1, 2, 3, 4, 5, 6, 7, 8, 9]  \n问题2 表示集合Y $Y = {x^2| x \\in [1,2,3,4,5,6,7,8,9,10]}$\nY = [] for x in X: Y.append(x*x) Y  [1, 4, 9, 16, 25, 36, 49, 64, 81]  \n列表推导式 实现步骤\n 先复制X 再对X中的元素x进行操作  #先复制X [x for x in X]  [1, 2, 3, 4, 5, 6, 7, 8, 9]  #再对x进行操作 [x*x for x in X]  [1, 4, 9, 16, 25, 36, 49, 64, 81]  理解列表推导式 带条件的列表推导式 $C= {x^2 | (x \\in X) \\cap (x\u0026gt;5)}$\n#复制X [x for x in X]  [1, 2, 3, 4, 5, 6, 7, 8, 9]  #X中的要大于5 #[x for x in X if x\u0026gt;5] [x for x in X if x\u0026gt;5]  [6, 7, 8, 9]  #对满足条件的x进行操作 #[x*x for x in X if x\u0026gt;5] [x*x for x in X if x\u0026gt;5]  [36, 49, 64, 81]  \n问题3 全部小写 words = ['Life', 'is', 'short', 'so', 'we', 'use', 'Python', 'python', 'is', 'easy', 'to', 'learn', 'and', 'easy', 'to', 'use'] words  ['Life', 'is', 'short', 'so', 'we', 'use', 'Python', 'python', 'is', 'easy', 'to', 'learn', 'and', 'easy', 'to', 'use']  lower_words = [w.lower() for w in words] lower_words  ['life', 'is', 'short', 'so', 'we', 'use', 'python', 'python', 'is', 'easy', 'to', 'learn', 'and', 'easy', 'to', 'use']  \n问题4 计算lower_words列表数据的单词词频 wordset = set(lower_words) [(w, lower_words.count(w)) for w in wordset]  [('so', 1), ('and', 1), ('learn', 1), ('use', 2), ('to', 2), ('we', 1), ('easy', 2), ('python', 2), ('is', 2), ('short', 1), ('life', 1)]  #1 生产词语集合 wordset = set(lower_words) print(wordset)  {'so', 'and', 'learn', 'use', 'to', 'we', 'easy', 'python', 'is', 'short', 'life'}  #2. wordset复制wordset自己 [w for w in wordset]  #3. 对wordset中每个词语w进行一些操作 [lower_words.count(w) for w in wordset]  [1, 1, 1, 2, 2, 1, 2, 2, 2, 1, 1]  #3. 词频和词语一起显示 [(w,lower_words.count(w)) for w in wordset]  [('so', 1), ('and', 1), ('learn', 1), ('use', 2), ('to', 2), ('we', 1), ('easy', 2), ('python', 2), ('is', 2), ('short', 1), ('life', 1)]  \n问题5 d = {'x': 'A', 'y': 'B', 'z': 'C' }  如何将d中的 键值对 拼接,输出为\n['xA', 'yB', 'zC]\nd = {'x': 'A', 'y': 'B', 'z': 'C' } d.items()  dict_items([('x', 'A'), ('y', 'B'), ('z', 'C')])  #1 自己复制d.items()自己 [i for i in d.items()]  [('x', 'A'), ('y', 'B'), ('z', 'C')]  #2 对任何一个元素都要进行字符串的拼接操作 [i[0]+i[1] for i in d.items()]  ['xA', 'yB', 'zC']  \n支持 分享不易，谢谢大家分享（或红包）支持^_^\n","date":1592555951,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1592555951,"objectID":"9ecbc46242099e31d21252c6b5939b3b","permalink":"https://thunderhit.github.io/post/07-%E5%88%97%E8%A1%A8%E6%8E%A8%E5%AF%BC%E5%BC%8F/","publishdate":"2020-06-19T16:39:11+08:00","relpermalink":"/post/07-%E5%88%97%E8%A1%A8%E6%8E%A8%E5%AF%BC%E5%BC%8F/","section":"post","summary":"5个小问题帮你理解推导式","tags":["列表推导式","python"],"title":"列表推导式","type":"post"},{"authors":["大邓"],"categories":["python语法入门","视频","教程"],"content":" 当你不知道用什么数据类型的时候，一定要记住list，大多数的脏活累活ta都帮你搞定    目录  列表list  定义 拼接 拆包 切片 列表常用方法   元组tuple  集合  集合的方法   支持     \n列表list 定义 list是一种有序的集合,内部可以由任何数据类型的组成的\n现在有5位员工的汇总信息，\n   id 姓名 年龄 性别 爱好     1 David 25 Male Basketball, Pingpang, Hiking   2 Mary 23 Female Reading, Movies   3 Henry 23 Male Diving, Hiking   4 Swift 21 Male Football, Music   5 Lenard 26 Male Stay at Home    现在我们需要用一种格式去组织5位员工的信息，以列表为例\nnames = ['David', 'Mary', 'Henry', 'Swift', 'Lenard'] ages = [25, 23, 23, 21, 26] hobbies = [['Basketball', 'Pingpang', 'Hiking'], ['Reading', 'Movies'], ['Diving', 'Hiking'], ['Football', 'Music'], ['Stay at Home']] print(type(names)) print(type(ages)) print(type(hobbies)) print(names) print(ages) print(hobbies)  \u0026lt;class 'list'\u0026gt; \u0026lt;class 'list'\u0026gt; \u0026lt;class 'list'\u0026gt; ['David', 'Mary', 'Henry', 'Swift', 'Lenard'] [25, 23, 23, 21, 26] [['Basketball', 'Pingpang', 'Hiking'], ['Reading', 'Movies'], ['Diving', 'Hiking'], ['Football', 'Music'], ['Stay at Home']]   组织数据的方式有很多种，list也可以用不同的方式去组织，大家可以自己想一想   \n拼接 a1 = ['Michael', 'Bob'] a2 = ['David', 'Lee'] print(a1 + a2) print(a2 + a1)  ['Michael', 'Bob', 'David', 'Lee'] ['David', 'Lee', 'Michael', 'Bob']  \n拆包  等号两边长度相同   name, age = ['David', 25] print(name) print(age)  David 25  \n切片 列表的切片与字符串类似\n   id 姓名 年龄 性别 爱好 正索引 倒索引     1 David 25 Male Basketball, Pingpang, Hiking 0 -5   2 Mary 23 Female Reading, Movies 1 -4   3 Henry 23 Male Diving, Hiking 2 -3   4 Swift 21 Male Football, Music 3 -2   5 Lenard 26 Male Stay at Home 4 -1    names = ['David', 'Mary', 'Henry', 'Swift', 'Lenard'] names  ['David', 'Mary', 'Henry', 'Swift', 'Lenard']  print(names[2]) print(names[-3])  Henry Henry  print(names[0:3]) print(names[-5:-2])  ['David', 'Mary', 'Henry'] ['David', 'Mary', 'Henry']  print(names[2:]) print(names[-3:])  ['Henry', 'Swift', 'Lenard'] ['Henry', 'Swift', 'Lenard']  print(names[:2]) print(names[:-3])  ['David', 'Mary'] ['David', 'Mary']  \n列表常用方法    常用方法 功能     list.append(a) 向list中添加元素a   list.extend(lst) 向list中添加列表lst   list.count(a) 统计list中a的个数    names = ['David', 'Mary', 'Henry', 'Swift', 'Lenard'] print(names) names.append('Mary') print(names)  ['David', 'Mary', 'Henry', 'Swift', 'Lenard'] ['David', 'Mary', 'Henry', 'Swift', 'Lenard', 'Mary']  names = ['David', 'Mary', 'Henry', 'Swift', 'Lenard'] print(names) names.extend(['Mary']) print(names)  ['David', 'Mary', 'Henry', 'Swift', 'Lenard'] ['David', 'Mary', 'Henry', 'Swift', 'Lenard', 'Mary']   ages = [25, 23, 23, 21, 26] print(ages.count(23))  2  one = ['David'] print(one[-1]) print(one[0])  David David  \n元组tuple 形似列表，也有\n 元组拼接 切片 拆包  name_list = ['David', 'Mary', 'Henry', 'Swift', 'Lenard'] name_tuple = ('David', 'Mary', 'Henry', 'Swift', 'Lenard') print(type(name_list)) print(type(name_tuple)) print(name_list) print(name_tuple)  \u0026lt;class 'list'\u0026gt; \u0026lt;class 'tuple'\u0026gt; ['David', 'Mary', 'Henry', 'Swift', 'Lenard'] ('David', 'Mary', 'Henry', 'Swift', 'Lenard')  print(name_list==name_tuple)  False  \n集合 names2 = ['David', 'Mary', 'David', 'Swift', 'David'] print(set(names2))  {'Swift', 'Mary', 'David'}  集合的方法  setdata.add(ele) 向setdata中加入ele  name_set = set(names2) print(name_set) name_set.add('William') print(name_set)  {'Swift', 'Mary', 'David'} {'William', 'Swift', 'Mary', 'David'}  name_set[2]  --------------------------------------------------------------------------- TypeError Traceback (most recent call last) \u0026lt;ipython-input-20-98cb669cc173\u0026gt; in \u0026lt;module\u0026gt; ----\u0026gt; 1 name_set[2] TypeError: 'set' object is not subscriptable   集合不能切片   \n支持 分享不易，谢谢大家分享（或红包）支持^_^\n","date":1592555951,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1592555951,"objectID":"c25b5fd303d5fad43ca30d365ec94184","permalink":"https://thunderhit.github.io/post/03-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%88%97%E8%A1%A8%E5%85%83%E7%BB%84%E9%9B%86%E5%90%88/","publishdate":"2020-06-19T16:39:11+08:00","relpermalink":"/post/03-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%88%97%E8%A1%A8%E5%85%83%E7%BB%84%E9%9B%86%E5%90%88/","section":"post","summary":"集合型数据类型","tags":["数据类型","列表","元组","集合","python"],"title":"数据类型-列表元组集合","type":"post"},{"authors":["大邓"],"categories":["python语法入门","视频","教程"],"content":" 最有层次感的数据类型，特别干净整洁。在写爬虫时，我们最希望遇到的数据类型就是ta    目录  字典    空字典 填充 更新 完整的信息   字典的方法 支持     \n字典 字典是有key，有value的 key-value-pair类型数据（键-值对）\n   id 姓名 年龄 性别 爱好     1 David 25 Male Basketball, Pingpang, Hiking   2 Mary 23 Female Reading, Movies   3 Henry 23 Male Diving, Hiking    将上面的员工信息以关键词name、age、hobbies 组织成字典数据\n空字典 david = dict() print(david)  {}  填充 david['age'] = 23 print(david)  {'age': 23}  david['hobbies'] = ['Basketball', 'Pingpang', 'Hiking'] print(david)  {'age': 23, 'hobbies': ['Basketball', 'Pingpang', 'Hiking']}  david['gender'] = 'Male' print(david)  {'age': 23, 'hobbies': ['Basketball', 'Pingpang', 'Hiking'], 'gender': 'Male'}  \n更新 david['age'] = 25 print(david)  {'age': 25, 'hobbies': ['Basketball', 'Pingpang', 'Hiking'], 'gender': 'Male'}  完整的信息 infos = {'David':{'age':25, 'gender':'Male', 'hobbies':['Basketball', 'Pingpang', 'Hiking']}, 'Mary':{'age':23, 'gender': 'Female', 'hobbies': ['Reading', 'Movies']}, 'Henry':{'age':23, 'gender': 'Male', 'hobbies': ['Diving', 'Hiking']} } print(infos)  {'David': {'age': 25, 'gender': 'Male', 'hobbies': ['Basketball', 'Pingpang', 'Hiking']}, 'Mary': {'age': 23, 'gender': 'Female', 'hobbies': ['Reading', 'Movies']}, 'Henry': {'age': 23, 'gender': 'Male', 'hobbies': ['Diving', 'Hiking']}}  字典的方法    方法 效果     dictdata.items() 返回dictdata所有item   dictdata.keys() 返回dictdata的所有关键词   dictdata.values() 返回dictdata的所有值   dictdata.get(keystr) 获取关键词keystr对应的值   dictdata[keystr] 获取关键词keystr对应的值    infos.items()  dict_items([('David', {'age': 25, 'gender': 'Male', 'hobbies': ['Basketball', 'Pingpang', 'Hiking']}), ('Mary', {'age': 23, 'gender': 'Female', 'hobbies': ['Reading', 'Movies']}), ('Henry', {'age': 23, 'gender': 'Male', 'hobbies': ['Diving', 'Hiking']})])  #把infos.items()转化为列表 list(infos.items())[0]  ('David', {'age': 25, 'gender': 'Male', 'hobbies': ['Basketball', 'Pingpang', 'Hiking']})  infos.keys()  dict_keys(['David', 'Mary', 'Henry'])  infos.values()  dict_values([{'age': 25, 'gender': 'Male', 'hobbies': ['Basketball', 'Pingpang', 'Hiking']}, {'age': 23, 'gender': 'Female', 'hobbies': ['Reading', 'Movies']}, {'age': 23, 'gender': 'Male', 'hobbies': ['Diving', 'Hiking']}])  print(infos['David']) print(infos.get('David'))  {'age': 25, 'gender': 'Male', 'hobbies': ['Basketball', 'Pingpang', 'Hiking']} {'age': 25, 'gender': 'Male', 'hobbies': ['Basketball', 'Pingpang', 'Hiking']}   两种功能等同，但是get获取方法更加安全稳定。   例如\nprint(infos['Will'])  --------------------------------------------------------------------------- KeyError Traceback (most recent call last) \u0026lt;ipython-input-16-f7c283c8ad8e\u0026gt; in \u0026lt;module\u0026gt; ----\u0026gt; 1 print(infos['Will']) KeyError: 'Will'  print(infos.get('Will'))  None  支持 分享不易，谢谢大家分享（或红包）支持^_^\n","date":1592555951,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1592555951,"objectID":"866f0386ac664e3f4e9d865dd4a4c668","permalink":"https://thunderhit.github.io/post/04-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%AD%97%E5%85%B8/","publishdate":"2020-06-19T16:39:11+08:00","relpermalink":"/post/04-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%AD%97%E5%85%B8/","section":"post","summary":"一种键值对(key-value pairs)数据的类型","tags":["字典","数据类型","python"],"title":"数据类型-字典","type":"post"},{"authors":["大邓"],"categories":["python语法入门","视频","教程"],"content":" 文本分析实际上就是对字符串做的处理，一定要熟悉字符串哦    目录  字符串string  定义 拼接+ 切片  切片总结     字符串常用方法 转义符\\ r  支持     \n字符串string 定义 字符串是以 单引号 或 双引号 或 三引号 括起来的任意文本，如\n \u0026lsquo;abc\u0026rsquo; \u0026ldquo;abc\u0026rdquo; \u0026lsquo;\u0026lsquo;\u0026lsquo;abc\u0026rsquo;\u0026rsquo;\u0026rsquo; \u0026ldquo;\u0026ldquo;\u0026ldquo;abc\u0026rdquo;\u0026rdquo;\u0026rdquo;  a = 'abc' a  'abc'  \u0026quot;abc\u0026quot;  'abc'  '''abc'''  'abc'  \u0026quot;\u0026quot;\u0026quot;abc\u0026quot;\u0026quot;\u0026quot;  'abc'  print('abc') print(\u0026quot;abc\u0026quot;) print('''abc''') print(\u0026quot;\u0026quot;\u0026quot;abc\u0026quot;\u0026quot;\u0026quot;)  abc abc abc abc  print('abc') print('efg')  abc efg  注意:\n 这里所说的引号都是英文引号 '' 或 \u0026quot;\u0026quot; 本身不是字符串的一部分，因此，字符串 'abc' 只有a，b，c这3个字符。 notebook中只显示最后一个，所以这里用了两个print   这里所说的引号都是英文引号\n'' 或 \u0026quot;\u0026quot; 本身不是字符串的一部分，因此，字符串 'abc' 只有a，b，c这3个字符。\nnotebook中只显示最后一个，所以这里用了两个print\n  \n拼接+ 按顺序拼接\na = 'P' b = 'ython' print(a+b) print(b+a)  Python ythonP  a = 'P' print(a+b) print(b+a)   \n切片 切片就像切糕，把自己想要的那块切下来\nname = 'My Name is Mike'  name[0]  'M'  name[-15]  'M'  name[3:6]  'Nam'  name[-12:-9]  'Nam'  name[0:2]  'My'  name[:2]  'My'  name[5:]  'me is Mike'  name[-7:]  'is Mike'  \n切片总结    切片表达式 解读     从左往右 索引值从0开始，0表示\u0026rsquo;第一个\u0026rsquo;   从右向左 -1表示倒数第一个，-2表示倒数第二个   a:b 选取列表索引位置为a，a+1...b-2, b-1的值   a: 选取列表中a之后的所有元素(含a)   :b 选取列表中b之前的所有元素(不含b)    字符串常用方法  再次强调，数据类(型)与猪牛羊不同的动物类型一样，都有满足人类需要的特殊本领(方法)。方法可以理解为数据类(型)一种特殊的本性、属性、特性      字符串常用方法 功能     str.lower() 变小写   str.upper() 变大写   str.split(sep) 使用sep将字符串分割，默认sep为空格   str.replace(old, new) 将str中的old替换为new   str.format() 向str中填充内容    words = 'Python is poweful!' words.lower()  'python is poweful!'  words.upper()  'PYTHON IS POWEFUL!'  words  'Python is poweful!'  words.split(' ')  ['Python', 'is', 'poweful!']  words.replace('Python', 'Python programing language')  'Python programing language is poweful!'  需要发送每个员工的工资组成详情。\n\u0026quot;张三,你这个月的工资是2310元；以下是你的工资详情。。。。\u0026quot; \u0026quot;李四,你这个月的工资是3456元；以下是你的工资详情。。。。\u0026quot; \u0026quot;王五,你这个月的工资是2431元；以下是你的工资详情。。。。\u0026quot;  如何自动化自动化填充?\ntemplate = '{name},你这个月的工资是{salary}元；以下是你的工资详情' print(template.format(name='张三', salary='2310')) print(template.format(name='李四', salary='3456')) print(template.format(name='王五', salary='2431'))  张三,你这个月的工资是2310元；以下是你的工资详情 李四,你这个月的工资是3456元；以下是你的工资详情 王五,你这个月的工资是2431元；以下是你的工资详情  \n转义符\\ 如果字符串内部既包含 单引号 又包含 双引号， 会发生什么？\nprint('I'm \u0026quot;OK\u0026quot;!')   File \u0026quot;\u0026lt;ipython-input-28-af5dc904b170\u0026gt;\u0026quot;, line 1 print('I'm \u0026quot;OK\u0026quot;!') ^ SyntaxError: invalid syntax  # 可以用 转义字符\\ 来标识，比如： print('I\\'m \\\u0026quot;OK\\\u0026quot;!')  I'm \u0026quot;OK\u0026quot;!  常见的转义符还有\n \\n 换行 \\t 制表符 字符\\ 本身也要转义，所以 \\\\ 表示的字符就是 \\  可以试着自己运行下面代码，看看下面打印结果是?：\nprint('Hello\\tWorld!') print('转义\\n换行!') print('反斜杠线\\\\')  print('Hello\\tWorld!') print('Hello World!')  Hello\tWorld! Hello World!  print('转义\\n换行!')  转义 换行!  print('反斜杠线\\\\')  反斜杠线\\  \nr 如果字符串里面有很多字符都需要转义，就需要加很多\\,\n为了简化，Python还允许用r''表示''内部的字符串默认不转义,例如\nprint('\\\\\\t\\\\') print(r'\\\\\\t\\\\') print('hello world!')  print('\\\\\\t\\\\')  \\\t\\  print(r'\\\\\\t\\\\')  \\\\\\t\\\\  \n支持 分享不易，谢谢大家分享（或红包）支持^_^\n","date":1592555951,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1592555951,"objectID":"ebc525560c89254b61a837d8167d538d","permalink":"https://thunderhit.github.io/post/02-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2/","publishdate":"2020-06-19T16:39:11+08:00","relpermalink":"/post/02-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2/","section":"post","summary":"常见于文本数据中","tags":["数据类型","字符串","python"],"title":"数据类型-字符串string","type":"post"},{"authors":["大邓"],"categories":["python语法入门","视频","教程"],"content":"目录  布尔值Boolean  布尔运算 比较运算 成员运算符in   None  支持      布尔值Boolean 用于逻辑判断，一般与if结合使用。\na = True print(a)  True  True  True  False  False  其他产生布尔值的方式\n 布尔运算 比较运算 成员运算  布尔运算  中学数学课里的且或非      运算符号 功能 例子 等于     x and y 且 True and False False   x or y 或 True or False True   not x 非 not True False    x = True and False print(x)  False  x = True or False print(x)  True  x = not True print(x)  False  x = not False print(x)  True  比较运算  注意=和==的区别，=用来把某个值传给某个变量(赋值操作)，==用来判断两个值(变量)是否相等(判断操作)      比较运算符号 功能 例子 等于     == 相等 5==3 False   != 不等于 5!=3 True   \u0026gt; 大于 5\u0026gt;3 True   \u0026lt; 小于 5\u0026lt;3 False   \u0026lt;= 小于等于 5\u0026lt;=3 False   \u0026gt;= 小于 5\u0026gt;=3 True    a = 5 b = 3 x = a\u0026lt;b print(x) print(type(x))  False \u0026lt;class 'bool'\u0026gt;  print(5==5)  True  print(5!=5)  False   注意:比较符两侧必须为同样的数据类型   a = '5' b = 5 print(a\u0026gt;b)  --------------------------------------------------------------------------- TypeError Traceback (most recent call last) \u0026lt;ipython-input-15-861d7a553a1d\u0026gt; in \u0026lt;module\u0026gt; 2 b = 5 3 ----\u0026gt; 4 print(a\u0026gt;b) TypeError: '\u0026gt;' not supported between instances of 'str' and 'int'  a = '5' b = '5' print(a==b)  True  \n成员运算符in 用来判断某个值是否在集合中（这个集合可以使列表、元组、字符串等)\n   案例 结果     4 in [1,2,4] True   4 not in [1,2,4] False   3 in [1,2,4] False   3 not in [1,2,4] True    x = 4 in [1,2,4] x  True  y = 4 not in [1,2,4] y  False  \nNone 特殊的空值，类似于C语言中的Null。\nNone  ''  ''  []  []  dict()  {}  type(None)  NoneType   支持 分享不易，谢谢大家分享（或红包）支持^_^\n","date":1592555951,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1592555951,"objectID":"776320b56e0f81b63131d16f05c978e6","permalink":"https://thunderhit.github.io/post/05-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%B8%83%E5%B0%94%E5%80%BCnone/","publishdate":"2020-06-19T16:39:11+08:00","relpermalink":"/post/05-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%B8%83%E5%B0%94%E5%80%BCnone/","section":"post","summary":"是非空","tags":["数据类型","布尔值","None","python"],"title":"数据类型-布尔值\u0026None","type":"post"},{"authors":["大邓"],"categories":["python语法入门","视频","教程"],"content":"流水线每个环节都有质量要求，只有符合质量规范，才能流通到下一个环节。这样环环相扣，设计好后经过试运营就可以投产了。Python编程也一样，编程序其实也是设计流水线，而函数就是流水线上的一个个的环节。\n目录  函数  位置参数 关键词参数 默认参数 支持      \n函数 可重复使用的代码块\ndef函数常见参数定义\u0026amp;调用方式\n 位置参数 关键词参数 默认参数  \n位置参数 def hello1(name, age): return '我是{0},今年{1}'.format(name, age) hello1('张三', 25)  '我是张三,今年25'  hello1(25,'张三')  '我是25,今年张三'  \n关键词参数 def hello2(name, age): return '我是{0},今年{1}'.format(name, age) hello2(name='张三', age=25)  '我是张三,今年25'  hello2(age=25, name='张三')  '我是张三,今年25'  \n默认参数 def hello3(name, age, gender='男'): return '我是{0},今年{1}, 性别{2}'.format(name, age, gender) hello3('David', 25)  '我是David,今年25, 性别男'  hello3('David', 25, gender='male')  '我是David,今年25, 性别male'  \n支持 分享不易，谢谢大家分享（或红包）支持^_^\n","date":1592555951,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1592555951,"objectID":"3ce9304912300538e3f3a858513378cf","permalink":"https://thunderhit.github.io/post/08-%E7%90%86%E8%A7%A3%E5%87%BD%E6%95%B0/","publishdate":"2020-06-19T16:39:11+08:00","relpermalink":"/post/08-%E7%90%86%E8%A7%A3%E5%87%BD%E6%95%B0/","section":"post","summary":"编程就是设计流水线，而函数就是流水线上的某个环节","tags":["函数","python"],"title":"理解函数","type":"post"},{"authors":["大邓"],"categories":["python语法入门","视频","教程"],"content":"目录  if条件判断  condition为布尔值、布尔运算、成员运算符 特殊的conditon   for循环    上面这个图可以解读为   重复做某事  问题1   迭代出数据中的内容   try-except  练习1   安装包的方法  练习2 支持      \nif条件判断 condition为布尔值、布尔运算、成员运算符 通常我们理解的condition为布尔值\n#Tab condition = True if condition: print('condition为True') else: print('condition为False')  condition为True  age = 17 if age\u0026gt;=18: print('你是成年人了') else: print('你还是个孩子')  你还是个孩子  age = 20 if age\u0026gt;=55: print('老年人') elif 35\u0026lt;=age\u0026lt;55: print('中年') elif 18\u0026lt;=age\u0026lt;35: print('青年') elif 0\u0026lt;=age\u0026lt;18: print('儿童')  青年  \n特殊的conditon  各种空值(空字符串、空列表等)作用等同于False 各种非空值，作用等同于True  a = None if a: print('a是非空数据') else: print('a是空数据')  a是空数据  \nfor循环  重复做某件事 迭代出数据中的内容(元素)   上面这个图可以解读为 我们想对iterable这个集合中的每一个item:\n做点事(对item做操作)  重复做某事 问题1 计算1+2+3+\u0026hellip;+97+98+99+100=?\n1 + 2 = 3 3 + 3 = 6 6 + 4 = 10 10 + 5 = 15\nresult = 0 #int for i in range(1, 101): result = result + i print(result)  5050  迭代出数据中的内容 从某种“集合”（这个“集合”可以使list、set、tuple等），只要“集合”内部有多个成员就可以使用for循环迭代出内部的成员\nnames = ['David', 'Henry', 'Mary'] for name in names: print(name)  David Henry Mary  name = 'David' for s in name: print(s)  D a v i d  infos = {'David':{'age':25, 'gender':'Male'}, 'Mary':{'age':23, 'gender': 'Female'}, 'Henry':{'age':23, 'gender': 'Male'} } for item in infos.items(): print(item)  ('David', {'age': 25, 'gender': 'Male'}) ('Mary', {'age': 23, 'gender': 'Female'}) ('Henry', {'age': 23, 'gender': 'Male'})  for name, info in infos.items(): print(name, info)  David Mary Henry  \ntry-except  遇到无关紧要的bug，不会停下来，让程序有一定的容错能力   for x in [1,2,0,2,1]: print(10/x)  10.0 5.0 --------------------------------------------------------------------------- ZeroDivisionError Traceback (most recent call last) \u0026lt;ipython-input-19-83bea9c92c0e\u0026gt; in \u0026lt;module\u0026gt; 1 for x in [1,2,0,2,1]: ----\u0026gt; 2 print(10/x) ZeroDivisionError: division by zero  for x in [1,2,0,2,1]: try: print(10/x) except: print('0除错误') #pass  10.0 5.0 0除错误 5.0 10.0  \n练习1 假设现在某人的能力为1， 每天比前一天进步0.01， 一年后他的能力是多少？\nability = 1 scale = 1.01 records = [] for i in range(365): ability = ability * 1.01 records.append(ability) print(records)  [1.01, 1.0201, 1.030301, 1.04060401, 1.0510100501, 1.061520150601, 1.0721353521070098, 1.08285670562808, 1.0936852726843609, 1.1046221254112045, 1.1156683466653166, ...................36.30913774096189, 36.672229118371504, 37.03895140955522, 37.40934092365077, 37.783434332887275]  import matplotlib.pyplot as plt import math %matplotlib inline ability = 1 scale = 1.02 records = [] days = range(1, 365) for day in days: ability = ability*scale records.append(ability) plt.plot(days, records) plt.title('Be better everyday!')  Text(0.5, 1.0, 'Be better everyday!')  \n安装包的方法  命令行执行 pip install packagename jupyter notebook的Cell中执行!pip install packagename 如果是mac，pip写成pip3  !pip install matplotlib  Looking in indexes: https://mirrors.aliyun.com/pypi/simple/ Requirement already satisfied: matplotlib in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (3.2.1) Requirement already satisfied: kiwisolver\u0026gt;=1.0.1 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (1.2.0) Requirement already satisfied: python-dateutil\u0026gt;=2.1 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (2.8.1) Requirement already satisfied: cycler\u0026gt;=0.10 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (0.10.0) Requirement already satisfied: numpy\u0026gt;=1.11 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (1.18.2) Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,\u0026gt;=2.0.1 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (2.4.7) Requirement already satisfied: six\u0026gt;=1.5 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from python-dateutil\u0026gt;=2.1-\u0026gt;matplotlib) (1.14.0)  练习2 打印九九乘法表格 用到的知识点:\n for循环 字符串format方法 print函数(涉及到end参数)  for row in range(1, 10): #print(row) for col in range(1, row+1): formula = '{col}*{row}={res}'.format(col=col, row=row, res=col*row) print(formula, end='\\t') print('')  1*1=1\t1*2=2\t2*2=4\t1*3=3\t2*3=6\t3*3=9\t1*4=4\t2*4=8\t3*4=12\t4*4=16\t1*5=5\t2*5=10\t3*5=15\t4*5=20\t5*5=25\t1*6=6\t2*6=12\t3*6=18\t4*6=24\t5*6=30\t6*6=36\t1*7=7\t2*7=14\t3*7=21\t4*7=28\t5*7=35\t6*7=42\t7*7=49\t1*8=8\t2*8=16\t3*8=24\t4*8=32\t5*8=40\t6*8=48\t7*8=56\t8*8=64\t1*9=9\t2*9=18\t3*9=27\t4*9=36\t5*9=45\t6*9=54\t7*9=63\t8*9=72\t9*9=81\t help(print)  Help on built-in function print in module builtins: print(...) print(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False) Prints the values to a stream, or to sys.stdout by default. Optional keyword arguments: file: a file-like object (stream); defaults to the current sys.stdout. sep: string inserted between values, default a space. end: string appended after the last value, default a newline. flush: whether to forcibly flush the stream.  for row in range(1, 10): for col in range(1, row+1): formula = '{col}*{row}={res}' content = formula.format(col=col, row=row, res=col*row) print(content, end='\\t') print()  1*1=1\t1*2=2\t2*2=4\t1*3=3\t2*3=6\t3*3=9\t1*4=4\t2*4=8\t3*4=12\t4*4=16\t1*5=5\t2*5=10\t3*5=15\t4*5=20\t5*5=25\t1*6=6\t2*6=12\t3*6=18\t4*6=24\t5*6=30\t6*6=36\t1*7=7\t2*7=14\t3*7=21\t4*7=28\t5*7=35\t6*7=42\t7*7=49\t1*8=8\t2*8=16\t3*8=24\t4*8=32\t5*8=40\t6*8=48\t7*8=56\t8*8=64\t1*9=9\t2*9=18\t3*9=27\t4*9=36\t5*9=45\t6*9=54\t7*9=63\t8*9=72\t9*9=81\t \n支持 分享不易，谢谢大家分享（或红包）支持^_^\n","date":1592555951,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1592555951,"objectID":"7347107ca25d013f3629bca63eae1cc3","permalink":"https://thunderhit.github.io/post/06-%E9%80%BB%E8%BE%91%E8%AF%AD%E5%8F%A5iffortryexcept/","publishdate":"2020-06-19T16:39:11+08:00","relpermalink":"/post/06-%E9%80%BB%E8%BE%91%E8%AF%AD%E5%8F%A5iffortryexcept/","section":"post","summary":"python编程语言中的逻辑","tags":["程序语句","python"],"title":"程序语句-逻辑语句(if\u0026for\u0026tryexcept)","type":"post"},{"authors":["大邓"],"categories":["教程","生产力工具"],"content":"Mermaid可以用文本方式绘制图表和流程图，相比Visio而言更加的轻量便捷，此外Markdown内部支持Mermaid语法，可以有效避免切换软件，让我们更加专注于内容本身。\n mermaid官方文档\n目录  图表类型支持 饼形图 流程图 时序图 状态图 甘特图 class类图  支持     图表类型支持   饼形图(Pie Chart)\n  流程图（Flow Chart）\n  时序图（Sequence Diagram）\n  状态图(State Diagram)\n  甘特图（Gantt Diagram）\n  类图(class Diagram)\n  等等\n饼形图 饼形图是我们经常用到的图表，在mermaid中最简单，基本上一看就会\npie title Pets adopted by volunteers \u0026quot;Dogs\u0026quot; : 386 \u0026quot;Cats\u0026quot; : 85 \u0026quot;Rats\u0026quot; : 15  代码\n​```mermaid pie title Pets adopted by volunteers \u0026quot;Dogs\u0026quot; : 386 \u0026quot;Cats\u0026quot; : 85 \u0026quot;Rats\u0026quot; : 15 ​```  用到的关键词\n   关键词 功能     pie 定义饼形图   title 标题    \n  流程图 graph TD A--\u0026gt;B A--\u0026gt;C B--\u0026gt;D C--\u0026gt;D  该流程图就是用下方的代码再markdown中实现的\n​```mermaid graph RL; A--\u0026gt;B; A--\u0026gt;C; B--\u0026gt;D; C--\u0026gt;D; ​```  关键词解读\n   关键词 功能     graph 定义流程图   TD 流程图方向。mermai的方位还有T、D、L、 R，分别代表上、下、左、右。两个方位组合成一个流动方向。本案例是从上到下，即TD   --\u0026gt; 有向箭头    节点还可以用:::调用修饰函数，如下\ngraph LR A:::someclass --\u0026gt; B classDef someclass fill:#f96;  ​```mermaid graph LR A:::someclass --\u0026gt; B classDef someclass fill:#f96; ​```  \n时序图 时序图用于描述对象之间的传递消息的时间顺序, 即用例中的行为顺序.\nsequenceDiagram participant Alice participant Bob participant John Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good!  顺序图稍微复杂了一丢丢，代码如下\n​```mermaid sequenceDiagram participant Alice participant Bob participant John Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! ​```  用到的关键词\n   关键词 功能     sequenceDiagram 定义顺序表   participant 定义图中的节点   loop 、end 循环体代码块，以loop开头，end结束；   Note 提示框   right of 方位关键词   -\u0026gt;\u0026gt; 实线箭头连接线   --\u0026gt;\u0026gt; 虚线箭头    \n状态图 通过建立对象的生存周期模型来描述对象随时间变化的动态行为\nstateDiagram Start --\u0026gt; First First --\u0026gt; Second First --\u0026gt; Third Second --\u0026gt; End Third --\u0026gt; End state First { [*] --\u0026gt; fir fir --\u0026gt; [*] } state Second { [*] --\u0026gt; sec sec --\u0026gt; [*] } state Third {}  代码\n​```mermaid stateDiagram Start --\u0026gt; First First --\u0026gt; Second First --\u0026gt; Third Second --\u0026gt; End Third --\u0026gt; End state First { [*] --\u0026gt; fir fir --\u0026gt; [*] } state Second { [*] --\u0026gt; sec sec --\u0026gt; [*] } state Third {} ​```  代码关键词解读\n   关键词 功能     stateDiagram 用于定义状态图   [*] 实心黑点   --\u0026gt; 有向实线   state 用于定义状态    我们可以看到状态state还可以定义内部的流程，如First和Second；Third没有定义内部处理过程。\n\n甘特图 gantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid excludes 2014-01-10 section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d  代码如下\n​```mermaid gantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid excludes weekdays 2014-01-10 section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d ​```  用到的关键词\n   关键词 功能     gantt 定义甘特图   dataFormat 定义日期格式   title 标题   excludes 排除项目周期中的放假休息等日期   section 定义一个项目   :done 、 :active、: 项目中的状态   after 紧随其后    \nclass类图 面向对象的编程会经常看到类，类与类有所属关系。比如中国人是人类的一员，而人类又隶属于灵长类动物。\nclassDiagram Animal \u0026lt;|-- Duck Animal \u0026lt;|-- Fish Animal \u0026lt;|-- Zebra Animal : int age Animal : String gender Animal: isMammal() Animal: mate() class Duck{ String beakColor swim() quack() } class Fish{ int sizeInFeet canEat() } class Zebra{ bool is_wild run() eat() }  代码\n​```mermaid classDiagram Animal \u0026lt;|-- Duck Animal \u0026lt;|-- Fish Animal \u0026lt;|-- Zebra Animal : int age Animal : String gender Animal: isMammal() Animal: mate() class Duck{ String beakColor swim() quack() } class Fish{ int sizeInFeet canEat() } class Zebra{ bool is_wild run() eat() } ​```  用到的关键词\n   关键词 功能     classDiagram 定义类图   \u0026lt;-- 隶属于某类   Animal : int age 定义Animal的年龄属性(属性没有用括号)   Animal: isMammal() 定义Animal的是否为哺乳动物方法(方法有括号)   class Duck 定义Duck类    大家如果熟悉Python，就能理解类的属性和方法区别就是是否有括号。\n\n支持 分享不易，谢谢大家分享（或红包）支持^_^\n","date":1592455503,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1592455503,"objectID":"15ebc3278e244efc0b8ef20aa02716c8","permalink":"https://thunderhit.github.io/post/mermaid/","publishdate":"2020-06-18T12:45:03+08:00","relpermalink":"/post/mermaid/","section":"post","summary":"支持饼形图、流程图、类图、状态图、甘特图等","tags":["markdown","mermaid","流程图"],"title":"在Markdown中用mermaid语法绘制图表","type":"post"},{"authors":["大邓"],"categories":["Python","视频课"],"content":" Python数据挖掘\n与文本分析 \n 按Space键查看PPT\n   地点: 小鹅通云直播 时间: 2020年6月29号 ~ 7月2号\n   大数据时代，\n大家会遇到两大难题:  1.如何批量快速获取数据\n 2.如何处理分析非结构(多媒体)数据\n  这门Python课解决了:  1.入门Python语法\n 2.高效采集网络数据\n 3.非结构数据清洗与分析\n  课程亮点  1. 秉承20%时间学到80%常用易用知识\n 2. 理论+实战，每章节均穿插实战案例\n  Python有什么优点？  1.语法简单\n 2.功能强大\n 3.免费开源\n  语法简洁  Python是一种\u0026quot;说人话\u0026quot;的编程\u0026quot;语言\u0026rdquo;  \n  功能强大  1.Web网站开发\n 2.自动化办公(运营)\n 3.数据分析\n 4.机器学习AI\n 4.游戏开发\n 5.等等   Python培训\n含四大模块:  打通数据处理分析全流程\n  1.Python语法入门\n2.网络爬虫(数据采集)\n3.文本(数据)分析\n4.机器学习与文本分析\n  报名咨询方式  培训有对应的录播课，\n点击下方蓝色链接直接购买\n  Python网络爬虫与文本分析\n Thanks  ","date":1592352000,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1592352000,"objectID":"4e994214cd4c2e62510290a987ccfd1e","permalink":"https://thunderhit.github.io/slides/web_spider_and_text_mining/","publishdate":"2020-06-17T00:00:00Z","relpermalink":"/slides/web_spider_and_text_mining/","section":"slides","summary":"An introduction to using Academic's Slides feature.","tags":["网络爬虫","文本分析","机器学习","Python语法"],"title":"《Python数据挖掘与文本分析》培训介绍","type":"slides"},{"authors":["大邓"],"categories":["教程","视频"],"content":"在B站看到一位博主用Hugo制作个人博客的视频，感觉挺简单的，真的十几分钟就能看到云端出现自己的博客，当然了想让自己的博客更美观更炫酷，精雕细琢会花很多功夫。现在大家看到的效果，大邓用了一整天的时间，一点点修饰改动出来的。\n目录  1. 安装Hugo 2. 新建Hugo项目 3. Academic主题下载 4. 启动本地博客 5. 在本地新建一篇文章 6. 将本地博客部署到服务器 更多 实验代码下载 打赏   1. 安装Hugo 这里以Mac为例，安装Hugo，命令行输入\nbrew install hugo  \n2. 新建Hugo项目 切换到桌面(我喜欢把项目放到桌面), 命令行执行\ncd desktop  新建一个叫做MyBlog的hugo项目文件夹，命令行执行\nhugo new site MyBlog  现在可以在桌面看到一个MyBlog文件夹，接下来切换工作目录到MyBlog\ncd MyBlog  记者目前我们的命令行处于MyBlog的根目录 , 接下来下载网站主题\n\n3. Academic主题下载 Hugo有很多主题，我选择的 https://themes.gohugo.io/academic/，\n在命令行逐行执行下方命令\ncd themes git clone https://github.com/gcushen/hugo-academic.git   我们可以在 MyBlog/themes 看到多了一个 hugo-academic文件夹，把hugo-academic改为academic ，现在网站已经建立好了~    这里切换回项目根目录MyBlog   cd ..  命令行执行pwd，检查一下目录\npwd  得到\n/Users/电脑用户名/desktop/MyBlog  4. 启动本地博客 现在我们以academic主题为例，启动博客\n命令行执行\nhugo server -t academic --buildDrafts   补充: t的意思是主题   执行后，在命令行中会提示我们\nhttp://localhost:1313/  在浏览器中复制粘贴上方的链接，我们的Blog毛坯房搭建好了~\n5. 在本地新建一篇文章 依旧是MyBlog根目录，命令行执行\nhugo new post/first-article.md   在MyBlog/content内新生成了一个post文件夹，并且post内有了一个first-article.md文件。   接下来就是在first-article.md内用markdown方式写内容即可。\n我们测试一下现在的网站,继续回到MyBlog根目录，命令行执行\nhugo server -t academic --buildDrafts  在浏览器中我们可以看到有First Ariticle的文章。\n6. 将本地博客部署到服务器 在github新建一个仓库，仓库名命名方式\n\u0026lt;你的github用户名\u0026gt;.github.io  比如我的github账号名是thunderhit，那么仓库名为\nthunderhit.github.io  在MyBlog根目录，命令行执行\nhugo --theme=academic --baseUrl='https://thunderhit.github.io/' --buildDrafts   补充: 主题academic, 网站地址 https://thunderhit.github.io/ ，你们根据自己需要改成自己的仓库名   现在我们在MyBlog中多了一个public文件夹，其中有我们新建的文章内容。\n绑定public与github仓库\n命令行切换到public目录，初始化git\ncd public git init git add . git commit -m '我的hugo博客第一次提交'  把public与远程github仓库关联\n依次执行（大家的github地址略微不同，需要改动一下)\ngit remote add origin git@github.com:thunderhit/thunderhit.github.io.git git push -u origin master  命令行上传完毕后，在浏览器网址栏打开链接 https://thunderhit.github.io/\n就可以看到我们自己的博客了~\n\n更多 如果大家想学仔细学Hugo，推荐大家看B站Up主：ianianying的视频\n \n实验代码下载 如果实验没成功，大家可以下载我的博客项目。项目资源获取方式，【公众号：大邓和他的Python】后台回复关键词\u0026rdquo;Hugo\u0026rdquo;\n\n打赏 分享不易，谢谢大家分享（或红包）支持^_^\n","date":1592299880,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1592299880,"objectID":"1ba1da42e133e1a006844b4b012bf188","permalink":"https://thunderhit.github.io/post/hugo/","publishdate":"2020-06-16T17:31:20+08:00","relpermalink":"/post/hugo/","section":"post","summary":"适用于个人博客场景；学习难度适中，我用了一上午搭建好了一个漂亮的Blog","tags":["建站"],"title":"使用Hugo框架建立个人网站","type":"post"},{"authors":null,"categories":["培训","视频","python"],"content":"\n在过去的两年间，Python一路高歌猛进，成功窜上“最火编程语言”的宝座。惊奇的是使用Python最多的人群其实不是程序员，而是数据科学家，尤其是社会科学家，涵盖的学科有经济学、管理学、会计学、社会学、传播学、新闻学等等。\n大数据时代到来，网络数据正成为潜在宝藏，大量商业信息、社会信息以文本等非结构化、异构型数据格式存储于网页中。非计算机专业背景的人也可借助机器学习、人工智能等方法进行研究。使用网络世界数据进行研究，面临两大难点：\n 数据的批量获取 文本（非结构化）数据的处理与分析  参照已发表的社科类文章，希望帮大家解决这两大难点。课程设计的初衷是用最少的时间让大家学到最有用最常用最易用的知识点，降低学习难度。\n课程目录 第一节 课程简介  课程介绍 课程知识点分布情况\n  第二节 环境配置  Mac环境配置 Windows环境配置 pip安装问题解决办法 jupyter notebook使用方法\n  第三节 python基本语法  python跟英文一样也是一门语言，这很文科 字符串 列表 元组 字典 集合 if 条件语句 for循环语句 try-except异常处理语句\n  第四节 python高级语法  切片-对想要的数据字段进行切片 列表推导式 函数 csv文件存储库 os文件路径操作库 re正则表达式(文本分析利器) python初学者常见错误\n  第五节 网络爬虫原理  理解访问与请求 寻求网址规律 requests访问库 pyquery网页解析定位库\n  第六节 网络爬虫实战  静态网站-天涯论坛 静态网站-大众点评 静态网站-boss直聘 动态网站-百度企业信用 动态网站-京东评论 动态网站-B站弹幕 动态网站-B站评论 如何用pandas采集网页中的表格数据\n  第七节 初识文本分析  如何从不同格式的文件中读取数据 jieba分词、词频统计与可视化 海量公司年报的情感分析(中文) 英文数据的情感分析 如何对excel、csv文件做数据分析(pandas数据分析库)\n  第八节 文本分析与机器学习  机器学习概论 用机器学习做文本分析的步骤 机器学习库scikit-learn 文本特征工程(描述数据的方式) 在线评论情感分类 了解聚类Kmeans算法 文本相似度计算 LDA话题模型 计算消费者异质性(特征向量) 文本分析在经管研究中的应用案例\n  购买方式 1. 腾讯课堂-录播课  大邓个人开课，不能开票报销  2. 小鹅通-直播课  机构合作，可支持开票报销 2020年6月29日~7月2日   3. 现场工作坊  机构合作，可支持开票报销 地点杭州，由于疫情原因，开展不了现场教学，时间待定~  ","date":1591747200,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1591747200,"objectID":"5ddf2550046d35c7ae62e41be85f7603","permalink":"https://thunderhit.github.io/courses/python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90/","publishdate":"2020-06-10T00:00:00Z","relpermalink":"/courses/python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90/","section":"courses","summary":"学完本课，您将学会如何获取及处理大数据","tags":["python","网络爬虫","机器学习","文本分析"],"title":"Python网络爬虫与文本分析","type":"courses"},{"authors":null,"categories":["培训","python","视频"],"content":"\n很多职场人士想提高办公效率，python是一门很神奇的工具，ta可以帮我们职场人士做很多事情，尤其是在自动化办公领域，批量自动处理文件简直是职场人士的福音。自动化办公场景包括 excel、ppt、word等文件处理、邮件自动发送、网络爬虫（如数据采集、批量文件下载），这次我就来理一理 python 自动化办公的那些知识点。\n课程目录 准备篇  想象力丰富的自动化场景 快速上手一个小案例  简单文件处理篇  批量更改文件名 批量检索pdf、word 批量读取csv、excel 定制excel文件内单元格的格式 批量将txt汇总到一个excel中  网络爬虫  网络爬虫原理 你的第一个爬虫 自动下载某网站的pdf 自动下载某网站的图片 自动下载某网站视频  报告报表自动化  批量生成合同(word) 网店口碑可视化（词云图制作）  邮件自动化  如何设置邮箱，让Python控制你的邮箱(163邮箱为例) 月底给员工自动群发工资条邮件  生成图形界面篇  简单的图形界面设计 自动群发邮件软件的可视化窗口实现  购买方式 腾讯课堂-Python自动化办公实战 ","date":1591747200,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1591747200,"objectID":"09fca2c1615a4ff646334a745fd838ad","permalink":"https://thunderhit.github.io/courses/python%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8A%9E%E5%85%AC/","publishdate":"2020-06-10T00:00:00Z","relpermalink":"/courses/python%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8A%9E%E5%85%AC/","section":"courses","summary":"自动群发邮件、自动生成分析报告、数据采集等","tags":["python","网络爬虫","自动化办公","文本分析"],"title":"Python自动化办公实战","type":"courses"},{"authors":null,"categories":["B站","视频","python"],"content":" 课程代码关注【公众号：大邓和他的Python】，回复关键词【python入门】   视频观看时间加起来不超过3.5小时\n如果有遇到看不懂的地方，大家不需要纠结，很多时候自己照着代码操作一下，看看代码英文的意思，再看看代码运行前后的对比，就会自己有自己对代码独特的见解。\n内容目录 ⭐数量的多少表示内容难易程度：\n 1. Win环境配置⭐\n 1. Mac环境配置⭐\n 2. python跟英语一样是一门语言⭐\n 3. 数据类型-字符串⭐⭐⭐⭐\n 4. 数据类型-列表元组集合⭐⭐\n 5. 数据类型-字典⭐\n 6. 数据类型-布尔值\u0026amp;None⭐\n 7. 逻辑语句⭐⭐⭐⭐\n 8. 列表推导式⭐⭐⭐\n 9. 理解函数⭐\n 10. 常用内置函数⭐⭐⭐\n 11. 内置库之文件路径pathlib库⭐⭐⭐  12. 内置库之csv文件库⭐⭐\n 13. 内置库之正则表达式re库⭐⭐⭐⭐⭐\n 14. 初学python常出错误汇总⭐⭐⭐\n","date":1591747200,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1591747200,"objectID":"dcb39abd40799cfefe24e24dcb801003","permalink":"https://thunderhit.github.io/courses/python%E8%AF%AD%E6%B3%95%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/","publishdate":"2020-06-10T00:00:00Z","relpermalink":"/courses/python%E8%AF%AD%E6%B3%95%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/","section":"courses","summary":"免费的Python视频课","tags":["python","网络爬虫"],"title":"Python语法快速入门","type":"courses"},{"authors":null,"categories":["教程","python库"],"content":"一、cnsenti 中文情感分析库(Chinese Sentiment))可对文本进行情绪分析、正负情感分析。\n   github地址 https://github.com/thunderhit/cnsenti\n   pypi地址 https://pypi.org/project/cnsenti/\n  特性  情感分析默认使用的知网Hownet 情感分析可支持导入自定义txt情感词典(pos和neg) 情绪分析使用大连理工大学情感本体库，可以计算文本中的七大情绪词分布  安装 pip install cnsenti  二、快速上手 中文文本情感词正负情感词统计\nfrom cnsenti import Sentiment senti = Sentiment() test_text= '我好开心啊，非常非常非常高兴！今天我得了一百分，我很兴奋开心，愉快，开心' result = senti.sentiment_count(test_text) print(result)  Run\n{'words': 24, 'sentences': 2, 'pos': 4, 'neg': 0}  中文文本情绪统计\nfrom cnsenti import Emotion emotion = Emotion() test_text = '我好开心啊，非常非常非常高兴！今天我得了一百分，我很兴奋开心，愉快，开心' result = emotion.emotion_count(test_text) print(result)  Run\n{'words': 22, 'sentences': 2, '好': 0, '乐': 4, '哀': 0, '怒': 0, '惧': 0, '恶': 0, '惊': 0}  三、文档 cnsenti包括Emotion和Sentiment两大类，其中\n Emotion 情绪计算类,包括**emotion_count(text)**方法 Sentiment 正负情感计算类，包括**sentiment_count(text)和sentiment_calculate(text)**两种方法  3.1 emotion_count(text) emotion_count(text)y用于统计文本中各种情绪形容词出现的词语数。使用大连理工大学情感本体库词典，支持七种情绪统计(好、乐、哀、怒、惧、恶、惊)。\nfrom cnsenti import Emotion emotion = Emotion() test_text = '我好开心啊，非常非常非常高兴！今天我得了一百分，我很兴奋开心，愉快，开心' result = emotion.emotion_count(test_text) print(result)  返回\n{'words': 22, 'sentences': 2, '好': 0, '乐': 4, '哀': 0, '怒': 0, '惧': 0, '恶': 0, '惊': 0}  其中\n words 中文文本的词语数 sentences 中文文本的句子数 好、乐、哀、怒、惧、恶、惊 text中各自情绪出现的词语数  3.2 sentiment_count(text) 隶属于Sentiment类，可对文本text中的正、负面词进行统计。默认使用Hownet词典，后面会讲到如何导入自定义正、负情感txt词典文件。这里以默认hownet词典进行统计。\nfrom cnsenti import Sentiment senti = Sentiment() test_text = '我好开心啊，非常非常非常高兴！今天我得了一百分，我很兴奋开心，愉快，开心' result = senti.sentiment_count(test_text) print(result)  Run\n{'words': 24, 'sentences': 2, 'pos': 4, 'neg': 0}  其中\n words 文本中词语数 sentences 文本中句子数 pos 文本中正面词总个数 neg 文本中负面词总个数  3.3 sentiment_calculate(text) 隶属于Sentiment类，可更加精准的计算文本的情感信息。相比于sentiment_count只统计文本正负情感词个数，sentiment_calculate还考虑了\n 情感词前是否有强度副词的修饰作用 情感词前是否有否定词的情感语义反转作用  比如\nfrom cnsenti import Sentiment senti = Sentiment() test_text = '我好开心啊，非常非常非常高兴！今天我得了一百分，我很兴奋开心，愉快，开心' result1 = senti.sentiment_count(test_text) result2 = senti.sentiment_calculate(test_text) print('sentiment_count',result1) print('sentiment_calculate',result2)  Run\nsentiment_count {'words': 22, 'sentences': 2, 'pos': 4, 'neg': 0} sentiment_calculate {'sentences': 2, 'words': 22, 'pos': 27.0, 'neg': 0.0}  3.4 自定义词典 我们先看看没有情感形容词的情形\nfrom cnsenti import Sentiment senti = Sentiment() #两txt均为utf-8编码 test_text = '这家公司是行业的引领者，是中流砥柱。' result1 = senti.sentiment_count(test_text) result2 = senti.sentiment_calculate(test_text) print('sentiment_count',result1) print('sentiment_calculate',result2)  Run\nsentiment_count {'words': 10, 'sentences': 1, 'pos': 0, 'neg': 0} sentiment_calculate {'sentences': 1, 'words': 10, 'pos': 0, 'neg': 0}  如我所料，虽然句子是正面的，但是因为cnsenti自带的情感词典仅仅是形容词情感词典，对于很多场景而言，适用性有限，所以pos=0。\n3.4.1 自定词典格式 好在cnsenti支持导入自定义词典，但目前只有Sentiment类支持导入自定义正负情感词典，自定义词典需要满足\n 必须为txt文件 原则上建议encoding为utf-8 txt文件每行只有一个词  3.4.2 Sentiment自定义词典参数 senti = Sentiment(pos='正面词自定义.txt', neg='负面词自定义.txt', merge=True, encoding='utf-8')   pos 正面情感词典txt文件路径 neg 负面情感词典txt文件路径 merge 布尔值；merge=True，cnsenti会融合自定义词典和cnsenti自带词典；merge=False，cnsenti只使用自定义词典 encoding 两txt均为utf-8编码  3.4.3 自定义词典使用案例 这部分我放到test文件夹内,代码和自定义词典均在test内，所以我使用相对路径设定自定义词典的路径\n|test |---代码.py |---正面词自定义.txt |---负面词自定义.txt  正面词自定义.txt\n中流砥柱 引领者  from cnsenti import Sentiment senti = Sentiment(pos='正面词自定义.txt', #正面词典txt文件相对路径 neg='负面词自定义.txt', #负面词典txt文件相对路径 merge=True, #融合cnsenti自带词典和用户导入的自定义词典 encoding='utf-8') #两txt均为utf-8编码 test_text = '这家公司是行业的引领者，是中流砥柱。今年的业绩非常好。' result1 = senti.sentiment_count(test_text) result2 = senti.sentiment_calculate(test_text) print('sentiment_count',result1) print('sentiment_calculate',result2)  Run\nsentiment_count {'words': 16, 'sentences': 2, 'pos': 2, 'neg': 0} sentiment_calculate {'sentences': 2, 'words': 16, 'pos': 5, 'neg': 0}  上面参数我们传入了正面自定义词典和负面自定义词典，并且使用了融合模式（merge=True），可以利用cnsenti自带的词典和刚刚导入的自定义词典进行情感计算。\n补充：\n我设计的这个库目前仅能支持两类型pos和neg，如果你的研究问题是两分类问题，如好坏、美丑、善恶、正邪、友好敌对，你就可以定义两个txt文件，分别赋值给pos和neg，就可以使用cnsenti库。\n四、关于词典 目前比较有可解释性的文本分析方法是词典法，算法逻辑都很清晰。词典的好坏决定了情感分析的好坏。如果没有词典，也就限制了你进行文本情感计算。\n目前大多数人使用的是形容词情感词典，如大连理工大学情感本体库和知网Hownet，优点是直接拿来用，缺点也很明显，对于很多带情感却无形容词的文本无能为力。如这手机很耐摔， 使用形容词情感词典计算得分pos和neg均为0。类似问题在不同研究对象的文本数据应该都是挺普遍的，所以人工构建情感词典还是很有必要的。\n我封装了刘焕勇基于so_pmi算法的新词发现代码，将该库其命名为wordexpansion。wordexpansion可以极大的提高提高自定义词典的构建速度，感兴趣的童鞋详情可以访问 wordexpansion项目地址\n如果 如果您是经管人文社科专业背景，编程小白，面临海量文本数据采集和处理分析艰巨任务，个人建议学习 《python网络爬虫与文本数据分析》视频课。\n python入门 网络爬虫 数据读取 文本分析入门 机器学习与文本分析 文本分析在经管研究中的应用  感兴趣的童鞋不妨 戳一下 《python网络爬虫与文本数据分析》进来看看~\n更多   B站 公众号：大邓和他的python  知乎  github  支持 分享不易，谢谢大家分享（或红包）支持^_^\n","date":1589760000,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1589760000,"objectID":"52fc01deffd9b11f589883567900fec7","permalink":"https://thunderhit.github.io/project/cnsenti/","publishdate":"2020-05-18T00:00:00Z","relpermalink":"/project/cnsenti/","section":"project","summary":"快速构建不同领域(手机、汽车等)的情感词典","tags":["python库","文本分析","情感分析"],"title":"cnsenti库","type":"project"},{"authors":null,"categories":["教程","python库"],"content":"一、文本事理类型分析 中文复合事件抽取，可以用来识别文本的模式，包括条件事件、顺承事件、反转事件。\n我仅仅是对代码做了简单的修改，增加了函数说明注释和stats函数，可以用于统计文本中各种模式的分布(数量)情况。代码原作者为刘焕勇 https://github.com/liuhuanyong\n事件图谱（事理图谱）的类型 项目地址https://github.com/liuhuanyong/ComplexEventExtraction 项目介绍很详细，感兴趣的一定要去原项目看一下。\n   事件 含义 形式化 事件应用 图谱场景 举例     条件事件 某事件条件下另一事件发生 如果A那么B 事件预警 时机判定 \u0026lt;限制放宽,立即增产\u0026gt;   反转事件 某事件与另一事件形成对立 虽然A但是B 预防不测 反面教材 \u0026lt;起步晚,发展快\u0026gt;   顺承事件 某事件紧接着另一事件发生 A接着B 事件演化 未来意图识别 \u0026lt;去旅游,买火车票\u0026gt;    分析出文本中的条件、顺承、反转，理论上就可以构建知识网络(本库做不到这可视化)。 1、反转事件图谱 2、条件事件图谱 二、安装方法 pip install eventextraction  三、使用 3.1 主函数 from eventextraction import EventsExtraction extractor = EventsExtraction() content = '虽然你做了坏事，但我觉得你是好人。一旦时机成熟，就坚决推行' datas = extractor.extract_main(content) print(datas)  运行结果\n[{'sent': '虽然你做了坏事，但我觉得你是好人', 'type': 'but', 'tuples': {'pre_wd': '虽然', 'pre_part': '你做了坏事，', 'post_wd': '但', 'post_part ': '我觉得你是好人'}}, {'sent': '一旦时机成熟，就坚决推行', 'type': 'condition', 'tuples': {'pre_wd': '一旦', 'pre_part': '时机成熟，', 'post_wd': '就', 'post_part ': '坚决推行'}}]  3.2 统计 from eventextraction import EventsExtraction extractor = EventsExtraction() content = '虽然你做了坏事，但我觉得你是好人。一旦时机成熟，就坚决推行' datas = extractor.extract_main(content) print(extractor.stats(datas))  运行结果\n{'but': 1, 'condition': 1, 'seq': 0, 'more': 0, 'other': 0}  如果 如果您是经管人文社科专业背景，编程小白，面临海量文本数据采集和处理分析艰巨任务，个人建议学习 《python网络爬虫与文本数据分析》视频课。\n python入门 网络爬虫 数据读取 文本分析入门 机器学习与文本分析 文本分析在经管研究中的应用  感兴趣的童鞋不妨 戳一下 《python网络爬虫与文本数据分析》进来看看~\n更多   B站 公众号：大邓和他的python  知乎 [github](https://github.com/thunderhit）  支持 分享不易，谢谢大家点赞分享和红包^_^\n","date":1589587200,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1589587200,"objectID":"46ba17014d3db4bcd7e97eedc8d8321b","permalink":"https://thunderhit.github.io/project/eventextraction/","publishdate":"2020-05-16T00:00:00Z","relpermalink":"/project/eventextraction/","section":"project","summary":"快速构建不同领域(手机、汽车等)的情感词典","tags":["python库","文本分析"],"title":"eventextraction库","type":"project"},{"authors":null,"categories":["教程","python库","视频"],"content":"cntopic 简单好用的lda话题模型，支持中英文。该库基于gensim，简化了LDA代码量\n \n安装 pip install cntopic  \n使用 这里给大家引入一个场景，假设大家采集新闻数据，忘记采集新闻文本对应的新闻类别，如果人工标注又很费工夫。这时候我们可以用lda话题模型帮我们洞察数据中的规律，发现新闻有n种话题群体。这样lda模型对数据自动打标注topic_1, topic_2, topic_3\u0026hellip; ,topic_n。\n我们研究者的工作量仅仅限于解读topic_1, topic_2, topic_3\u0026hellip; ,topic_n分别是什么话题即可。\nlda训练过程，大致分为\n 读取文件 准备数据 训练lda模型 使用lda模型 存储与导入lda模型  \n1. 读取文件 这里我们用一个新闻数据,一共有10类，每类1000条数据，涵盖\n\u0026lsquo;时尚\u0026rsquo;, \u0026lsquo;财经\u0026rsquo;, \u0026lsquo;科技\u0026rsquo;, \u0026lsquo;教育\u0026rsquo;, \u0026lsquo;家居\u0026rsquo;, \u0026lsquo;体育\u0026rsquo;, \u0026lsquo;时政\u0026rsquo;, \u0026lsquo;游戏\u0026rsquo;, \u0026lsquo;房产\u0026rsquo;, \u0026lsquo;娱乐\u0026rsquo;\nimport pandas as pd df = pd.read_csv('chinese_news.csv') df.head()   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  label content     0 体育 鲍勃库西奖归谁属？ NCAA最强控卫是坎巴还是弗神新浪体育讯如今，本赛季的NCAA进入到了末...   1 体育 麦基砍28+18+5却充满寂寞 纪录之夜他的痛阿联最懂新浪体育讯上天对每个人都是公平的，贾维...   2 体育 黄蜂vs湖人首发：科比冲击七连胜 火箭两旧将登场新浪体育讯北京时间3月28日，NBA常规赛洛...   3 体育 双面谢亚龙作秀终成做作 谁来为低劣行政能力埋单是谁任命了谢亚龙？谁放纵了谢亚龙？谁又该为谢亚...   4 体育 兔年首战山西换帅后有虎胆 张学文用乔丹名言励志今晚客场挑战浙江稠州银行队，是山西汾酒男篮的兔...     label标签的分布情况\ndf['label'].value_counts()  家居 1000 时尚 1000 房产 1000 时政 1000 教育 1000 游戏 1000 财经 1000 娱乐 1000 体育 1000 科技 1000 Name: label, dtype: int64  \n2. 准备数据 一般准备数据包括:\n 分词、数据清洗 按照模块需求整理数据的格式  注意在scikit-learn中:\n 英文文本不需要分词，原封不动传入即可。 中文文本需要先分词，后整理为英文那样用空格间隔的字符串。形如”我 爱 中国“  import jieba def text2tokens(raw_text): #将文本raw_text分词后得到词语列表 tokens = jieba.lcut(raw_text) #tokens = raw_text.lower().split(' ') #英文用空格分词即可 tokens = [t for t in tokens if len(t)\u0026gt;1] #剔除单字 return tokens #对content列中所有的文本依次进行分词 documents = [text2tokens(txt) for txt in df['content']] #显示前5个document print(documents[:5])  [['鲍勃', '库西', '奖归', 'NCAA', '最强', '控卫', '坎巴', '还是', '弗神', '新浪', '体育讯', '称赞', '得分', '能力', '毋庸置疑',...], ['球员', '大东', '赛区', '锦标赛', '全国', '锦标赛', '他场', '27.1', '6.1', '篮板', '5.1', '助攻',..], ['依旧', '如此', '给力', '疯狂', '表现', '开始', '这个', '赛季', '疯狂', '表现', '结束', '这个', '赛季', '我们', '全国', '锦标赛', '前进', '并且', '之前', '曾经', '连赢', '赢得', '大东', ...], ['赛区', '锦标赛', '冠军', '这些', '归功于', '坎巴', '沃克', '康涅狄格', '大学', '主教练', '吉姆', '卡洪', ...], ['称赞', '一名', '纯正', '控卫', '而且', '能为', '我们', '得分', '单场', '42', '有过', '单场', '17', '助攻', ...]]  \n3. 训练lda模型 现在开始正式使用cntopic模块，开启LDA话题模型分析。步骤包括\n   Step 功能 代码     0 准备documents，已经在前面准备好了 -   1 初始化Topic类 topic = Topic(cwd=os.getcwd())   2 根据documents数据，构建词典空间 topic.create_dictionary(documents=documents)   3 构建语料(将文本转为文档-词频矩阵) topic.create_corpus(documents=documents)   4 指定n_topics，构建LDA话题模型 topic.train_lda_model(n_topics)    这里我们就按照n_topics=10构建lda话题模型，一般情况n_topics可能要实验多次，找到最佳的n_topics\n运行过程中会在代码所在的文件夹内生成一个output文件夹，内部含有\n dictionary.dict 词典文件 lda.model.xxx 多个lda模型文件，其中xxx是代指  上述代码耗时较长，请耐心等待程序运行完毕~\nimport os from cntopic import Topic topic = Topic(cwd=os.getcwd()) #构建词典dictionary topic.create_dictionary(documents=documents) #根据documents数据，构建词典空间 topic.create_corpus(documents=documents) #构建语料(将文本转为文档-词频矩阵) topic.train_lda_model(n_topics=10) #指定n_topics，构建LDA话题模型  \u0026lt;gensim.models.ldamulticore.LdaMulticore at 0x158da5090\u0026gt;  \n4. 使用LDA模型 上面的代码大概运行了5分钟，LDA模型已经训练好了。\n现在我们可以利用LDA做一些事情，包括\n   Step 功能 代码 补充     1 分词后的某文档 document = [\u0026lsquo;游戏\u0026rsquo;, \u0026lsquo;体育\u0026rsquo;]    2 预测document对应的话题 topic.get_document_topics(document)    3 显示每种话题与对应的特征词之间关系 topic.show_topics()    4 数据中不同话题分布情况 topic.topic_distribution(raw_documents) raw_documents是列表或series，如本教程中的df[\u0026lsquo;content\u0026rsquo;]   5 可视化LDA话题模型（功能不稳定） topic.visualize_lda() 可视化结果在output中查找vis.html文件，浏览器打开即可    4.1 准备document 假设有一个文档 '游戏体育真有意思' 分词处理得到document\ndocument = jieba.lcut('游戏体育真有意思') document  ['游戏', '体育', '真', '有意思']  4.2 预测document对应的话题 我们使用topic模型，看看document对应的话题\ntopic.get_document_topics(document)  [(0, 0.02501536), (1, 0.025016038), (2, 0.28541195), (3, 0.025018401), (4, 0.025018891), (5, 0.025017735), (6, 0.51443774), (7, 0.02502284), (8, 0.025015472), (9, 0.025025582)]  我们的lda话题模型是按照n_topics=10训练的，限制调用topic预测某个document时，得到的结果是这10种话题及对应概率的元组列表。\n从中可以看到概率最大的是 话题6， 概率有0.51443774。\n所以我们可以大致认为document是话题6\n4.3 显示每种话题与对应的特征词之间关系 但是仅仅告诉每个文档是 话题n，我们仍然不知道 话题n代表的是什么，所以我们需要看看每种 话题n对应的 特征词语。\ntopic.show_topics()  [(0, '0.042*\u0026quot;基金\u0026quot; + 0.013*\u0026quot;市场\u0026quot; + 0.011*\u0026quot;投资\u0026quot; + 0.009*\u0026quot;公司\u0026quot; + 0.005*\u0026quot;上涨\u0026quot; + 0.004*\u0026quot;股票\u0026quot; + 0.004*\u0026quot;房地产\u0026quot; + 0.004*\u0026quot;指数\u0026quot; + 0.004*\u0026quot;房价\u0026quot; + 0.004*\u0026quot;2008\u0026quot;'), (1, '0.010*\u0026quot;中国\u0026quot; + 0.007*\u0026quot;移民\u0026quot; + 0.006*\u0026quot;项目\u0026quot; + 0.005*\u0026quot;发展\u0026quot; + 0.005*\u0026quot;表示\u0026quot; + 0.005*\u0026quot;经济\u0026quot; + 0.005*\u0026quot;政府\u0026quot; + 0.005*\u0026quot;土地\u0026quot; + 0.004*\u0026quot;政策\u0026quot; + 0.004*\u0026quot;问题\u0026quot;'), (2, '0.014*\u0026quot;比赛\u0026quot; + 0.009*\u0026quot;他们\u0026quot; + 0.008*\u0026quot;球队\u0026quot; + 0.007*\u0026quot;篮板\u0026quot; + 0.006*\u0026quot;我们\u0026quot; + 0.005*\u0026quot;球员\u0026quot; + 0.005*\u0026quot;季后赛\u0026quot; + 0.005*\u0026quot;时间\u0026quot; + 0.005*\u0026quot;热火\u0026quot; + 0.005*\u0026quot;赛季\u0026quot;'), (3, '0.013*\u0026quot;我们\u0026quot; + 0.013*\u0026quot;一个\u0026quot; + 0.009*\u0026quot;自己\u0026quot; + 0.009*\u0026quot;这个\u0026quot; + 0.007*\u0026quot;没有\u0026quot; + 0.007*\u0026quot;他们\u0026quot; + 0.006*\u0026quot;可以\u0026quot; + 0.006*\u0026quot;就是\u0026quot; + 0.006*\u0026quot;很多\u0026quot; + 0.006*\u0026quot;记者\u0026quot;'), (4, '0.020*\u0026quot;电影\u0026quot; + 0.010*\u0026quot;导演\u0026quot; + 0.009*\u0026quot;微博\u0026quot; + 0.008*\u0026quot;影片\u0026quot; + 0.006*\u0026quot;观众\u0026quot; + 0.006*\u0026quot;一个\u0026quot; + 0.005*\u0026quot;自己\u0026quot; + 0.005*\u0026quot;票房\u0026quot; + 0.004*\u0026quot;拍摄\u0026quot; + 0.004*\u0026quot;娱乐\u0026quot;'), (5, '0.018*\u0026quot;学生\u0026quot; + 0.015*\u0026quot;留学\u0026quot; + 0.008*\u0026quot;大学\u0026quot; + 0.008*\u0026quot;可以\u0026quot; + 0.006*\u0026quot;功能\u0026quot; + 0.006*\u0026quot;像素\u0026quot; + 0.006*\u0026quot;拍摄\u0026quot; + 0.006*\u0026quot;采用\u0026quot; + 0.005*\u0026quot;学校\u0026quot; + 0.005*\u0026quot;申请\u0026quot;'), (6, '0.007*\u0026quot;玩家\u0026quot; + 0.006*\u0026quot;封神\u0026quot; + 0.006*\u0026quot;手机\u0026quot; + 0.006*\u0026quot;online\u0026quot; + 0.006*\u0026quot;the\u0026quot; + 0.006*\u0026quot;游戏\u0026quot; + 0.005*\u0026quot;陈水扁\u0026quot; + 0.005*\u0026quot;活动\u0026quot; + 0.005*\u0026quot;to\u0026quot; + 0.005*\u0026quot;一个\u0026quot;'), (7, '0.009*\u0026quot;信息\u0026quot; + 0.009*\u0026quot;考试\u0026quot; + 0.009*\u0026quot;游戏\u0026quot; + 0.007*\u0026quot;工作\u0026quot; + 0.007*\u0026quot;手机\u0026quot; + 0.006*\u0026quot;四六级\u0026quot; + 0.006*\u0026quot;考生\u0026quot; + 0.005*\u0026quot;发展\u0026quot; + 0.004*\u0026quot;可以\u0026quot; + 0.004*\u0026quot;霸王\u0026quot;'), (8, '0.015*\u0026quot;我们\u0026quot; + 0.011*\u0026quot;企业\u0026quot; + 0.011*\u0026quot;产品\u0026quot; + 0.010*\u0026quot;市场\u0026quot; + 0.009*\u0026quot;家具\u0026quot; + 0.009*\u0026quot;品牌\u0026quot; + 0.008*\u0026quot;消费者\u0026quot; + 0.007*\u0026quot;行业\u0026quot; + 0.007*\u0026quot;中国\u0026quot; + 0.007*\u0026quot;一个\u0026quot;'), (9, '0.012*\u0026quot;游戏\u0026quot; + 0.011*\u0026quot;玩家\u0026quot; + 0.010*\u0026quot;可以\u0026quot; + 0.008*\u0026quot;搭配\u0026quot; + 0.008*\u0026quot;活动\u0026quot; + 0.006*\u0026quot;时尚\u0026quot; + 0.005*\u0026quot;OL\u0026quot; + 0.004*\u0026quot;获得\u0026quot; + 0.004*\u0026quot;任务\u0026quot; + 0.004*\u0026quot;手机\u0026quot;')]  根据上面的 话题n 与 特征词 大致可以解读每个 话题n 是什么内容的话题。\n4.4 话题分布情况 现在我们想知道数据集中不同 话题n 的分布情况\ntopic.topic_distribution(raw_documents=df['content'])  9 1670 1 1443 0 1318 5 1265 4 1015 2 970 8 911 3 865 7 307 6 236 Name: topic, dtype: int64  我们的数据有10类，每类是1000条。而现在LDA话题模型单纯的根据文本的一些线索，按照n_topics=10给我们分出的效果还不错。\n最完美的情况是每个 话题n 都是接近1000, 现在 话题9太多， 话题6、 话题7太少。\n不过我们也要注意到某些话题可能存在交集，容易分错，比如\n 财经、房产、时政 体育娱乐 财经、科技  等\n综上，目前模型还算可以，表现还能接受。\n\n五、存储与导入lda模型 lda话题模型训练特别慢，如果不保存训练好的模型，实际上是在浪费我们的生命和电脑计算力。\n好消息是cntopic默认为大家存储模型，存储地址是output文件夹内，大家只需要知道如何导入模型即可。\n这里需要导入的有两个模型，使用步骤\n   步骤 模型 代码 作用     0 - - 准备documents   1 - topic = Topic(cwd=os.getcwd()) 初始化   2 词典 topic.load_dictionary(dictpath='output/dictionary.dict\u0026rsquo;) 直接导入词典，省略topic.create_dictionary()   3 - topic.create_corpus(documents=documents) 构建语料(将文本转为文档-词频矩阵)   4 lda话题模型 topic.load_lda_model(modelpath='output/model/lda.model\u0026rsquo;) 导入lda话题模型， 相当于省略topic.train_lda_model(n_topics)    现在我们试一试, 为了与之前的区分，这里我们起名topic2\ntopic2 = Topic(cwd=os.getcwd()) topic2.load_dictionary(dictpath='output/dictionary.dict') topic2.create_corpus(documents=documents) topic2.load_lda_model(modelpath='output/model/lda.model')  大家可以自己回去试一试第4部分使用LDA模型的相关功能\n\n如果 如果您是经管人文社科专业背景，编程小白，面临海量文本数据采集和处理分析艰巨任务，个人建议学习 《python网络爬虫与文本数据分析》视频课。\n python入门 网络爬虫 数据读取 文本分析入门 机器学习与文本分析 文本分析在经管研究中的应用  感兴趣的童鞋不妨 戳一下 《python网络爬虫与文本数据分析》进来看看~\n\n更多   B站 公众号：大邓和他的python  知乎  github  \n支持 分享不易，谢谢大家分享（或红包）支持^_^\n","date":1589500800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1589500800,"objectID":"555793a0fdd8ec86f082b1b50b352736","permalink":"https://thunderhit.github.io/project/cntopic/","publishdate":"2020-05-15T00:00:00Z","relpermalink":"/project/cntopic/","section":"project","summary":"cntopic 简单好用的lda话题模型，支持中英文。该库基于gensim","tags":["python库","文本分析","机器学习","LDA话题模型"],"title":"cntopic:LDA话题库","type":"project"},{"authors":null,"categories":["教程","python库"],"content":" README.md为本人所写，代码底层完全为刘焕勇设计。\n大邓项目地址https://github.com/thunderhit/wordexpansion\n原项目(刘焕勇)地址https://github.com/liuhuanyong/SentimentWordExpansion\n 一、项目意义 情感分析大多是基于情感词典对文本数据进行分析，所以情感词典好坏、是否完备充足是文本分析的关键。\n目前常用的词典都是基于形容词，有\n 知网HowNet 大连理工大学情感本体库  但是形容词类型的词典在某些情况下不适用，比如\n华为手机外壳采用金属制作，更耐摔\n由于句子中没有形容词，使用形容词情感词典计算得到的情感得分为0。但是耐摔这个动词具有正面积极情绪，这个句子的情感的分理应为正\n可见能够简单快速构建不同领域(手机、汽车等)的情感词典十分重要。但是人工构建太慢，如果让机器帮我们把最有可能带情感的候选词找出来，人工再去筛选构建词典，那该多好啊。那么如何构建呢？\n\n二、构建方法 计算机领域有一个算法叫做SO_PMI，互信息。简单的讲个体之间不是完全独立的，往往物以类聚，人以群分。如果我们一开始设定少量的\n 初始正面种子词 初始负面种子词  程序会按照“物以类聚人以群分”的思路，\n 根据初始正面种子词找到很多大概率为正面情感的候选词 根据初始负种子词找到很多大概率为负面情感的候选词  这个包原始作者刘焕勇，项目地址https://github.com/liuhuanyong/SentimentWordExpansion 我仅仅做了简单的封装\n\n三、安装 2.1 方法一 最简单的安装,现在由于国内外网络不稳定，运气不好可能需要尝试几次\npip3 install wordexpansion  2.2 加镜像站点 有的童鞋已经把pip默认安装镜像站点改为国内，如果国内镜像还未收录我的这个包，那么可能会安装失败。只能从国外https://pypi.org/simple站点搜索wordexpansion资源并安装\npip3 install wordexpansion -i https://pypi.org/simple  2.3 国内镜像安装 如果国内镜像站点已经收录，那么使用这个会更快\npip3 install wordexpansion -i https://pypi.tuna.tsinghua.edu.cn/simple/  \n四、使用方法 4.1 文件目录 所有的txt文件，不论输入的还是程序输出的结果，均采用utf-8编码。\n|--test #情感词典扩展与构建测试文件夹 |--find_newwords.py #测试代码 |--test_corpus.txt #语料（某领域）文本数据，5.5M |--test_seed_words.txt #情感种子词，需要手动构建 |--neg_candi.txt #find_newwords.py运行后发现的负面候选词 |--pos_candi.txt #find_newwords.py运行后发现的正面候选词  完整项目请移步至https://github.com/thunderhit/wordexpansion\n4.2 构建种子词 可能我们希望的情感词典几万个，但是种子词100个（正面词50个，负面词50个）说不定就可以。\n手动构建的种子词典test_seed_words.txt(编码encoding为utf-8)中\n 每行一个词 每个词用neg或pos标记 词与标记用空格间隔  休克\tneg 如出一辙\tneg 渴求\tneg 扎堆\tneg 休整\tneg 关门\tneg 阴晴不定\tneg 喜忧参半\tneg 起起伏伏\tneg 一厢情愿\tneg 松紧\tneg 最全\tpos 雄风\tpos 稳健\tpos 稳定\tpos 拉平\tpos 保供\tpos 修正\tpos 稳\tpos 稳住\tpos 保养\tpos ... ...  4.2 准备发现情感新词 已经安装好了wordexpansion，现在我们新建一个名为find_newwords.py的测试代码\n代码中的\nfrom wordexpansion import ChineseSoPmi sopmier = ChineseSoPmi(inputtext_file='test_corpus.txt', seedword_txtfile='test_seed_words.txt', pos_candi_txt_file='pos_candi.txt', neg_candi_txtfile='neg_candi.txt') sopmier.sopmi()  我们的语料数据test_corpus.txt 文件5.5M，100个候选词，运行程序大概耗时60s\n4.3 输出的结果 find_newwords.py运行结束后，会在**同文件夹内(find_newwords.py所在的文件夹)**发现有两个新的txt文件\n pos_candi.txt neg_candi.txt  打开pos_candi.txt, 我们看到\nword,sopmi,polarity,word_length,postag 保持,87.28493062512524,pos,2,v 风险,70.15627986116269,pos,2,n 货币政策,66.28476448498694,pos,4,n 发展,64.40272795986517,pos,2,vn 不要,63.71800916752807,pos,2,df 理念,61.2024367757337,pos,2,n 整体,59.415315156715586,pos,2,n 下,59.321140440512984,pos,1,f 引导,58.5817208758171,pos,2,v 投资,57.71720491331896,pos,2,vn 加强,57.067969337267684,pos,2,v 自己,53.25503772499689,pos,2,r 提升,52.80686380719989,pos,2,v 和,52.12334472663675,pos,1,c 稳步,51.58193211655792,pos,2,d 重要,51.095865548255034,pos,2,a ...  打开neg_candi.txt, 我们看到\nword,sopmi,polarity,word_length,postag 心灵,33.17993872989303,neg,2,n 期间,31.77900620939178,neg,2,f 西溪,30.87839808390589,neg,2,ns 人事,29.594976229171877,neg,2,n 复杂,29.47870186147108,neg,2,a 直到,27.86014637934966,neg,2,v 宰客,27.27304813428452,neg,2,nr 保险,26.433136238404746,neg,2,n 迎来,25.83859896903048,neg,2,v 至少,25.105021416064616,neg,2,d 融资,25.09148586460598,neg,2,vn 或,24.48343281812743,neg,1,c 列,22.20695894382675,neg,1,v 存在,22.041049266517774,neg,2,v ...  从上面的结果看，正面候选词较好，负面候选词有点差强人意。虽然差点，但节约了很多很多时间。\n现在电脑已经帮我们找出候选词，我们人类最擅长找毛病，对neg_candi.txt和pos_candi.txt我们人类只需要一个个挑毛病，把不带正负情感的词剔除掉。这样经过一段时间的剔除工作，针对具体研究领域的专业情感词典就构建出来了。\n\n五、注意：  so_pmi算法效果受训练语料影响，语料规模越大，效果越好 so_pmi算法效率受训练语料影响，语料越大，训练越耗时。100个种子词，5M的数据，大约耗时62.679秒 候选词的选择，可根据PMI值，词长，词性设定规则，进行筛选  所有的txt文件均采用utf-8编码，如果遇到UnicodeDetectorError: \u0026lsquo;gbk\u0026rsquo; codec。。请自行解决文件的encode问题。  如果 如果您是经管人文社科专业背景，编程小白，面临海量文本数据采集和处理分析艰巨任务，个人建议学习 《python网络爬虫与文本数据分析》视频课。\n python入门 网络爬虫 数据读取 文本分析入门 机器学习与文本分析 文本分析在经管研究中的应用  感兴趣的童鞋不妨 戳一下 《python网络爬虫与文本数据分析》进来看看~\n更多   B站 公众号：大邓和他的python  知乎 [github](https://github.com/thunderhit）  支持 分享不易，谢谢大家点赞分享和红包^_^\n","date":1589500800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1589500800,"objectID":"2fd44f15f39393546d03a1b689fdab8b","permalink":"https://thunderhit.github.io/project/wordexpansion/","publishdate":"2020-05-15T00:00:00Z","relpermalink":"/project/wordexpansion/","section":"project","summary":"快速构建不同领域(手机、汽车等)的情感词典","tags":["python库","文本分析","情感分析"],"title":"wordexpansion库","type":"project"},{"authors":null,"categories":["教程","python库"],"content":"\n目录  simtext    安装 使用 参考文献   如果 更多 支持     simtext simtext可以计算两文档间四大文本相似性指标，分别为：\n Sim_Cosine cosine相似性 Sim_Jaccard Jaccard相似性 Sim_MinEdit 最小编辑距离 Sim_Simple 微软Word中的track changes  具体算法介绍可翻看Cohen, Lauren, Christopher Malloy\u0026amp;Quoc Nguyen(2018) 第60页\n安装 pip install simtext  使用 中文文本相似性\nfrom simtext import similarity text1 = '在宏观经济背景下，为继续优化贷款结构，重点发展可以抵抗经济周期不良的贷款' text2 = '在宏观经济背景下，为继续优化贷款结构，重点发展可三年专业化、集约化、综合金融+物联网金融四大金融特色的基础上' sim = similarity() res = sim.compute(text1, text2) print(res)  Run\n{'Sim_Cosine': 0.46475800154489, 'Sim_Jaccard': 0.3333333333333333, 'Sim_MinEdit': 29, 'Sim_Simple': 0.9889595182335229}  英文文本相似性\nfrom simtext import similarity A = 'We expect demand to increase.' B = 'We expect worldwide demand to increase.' C = 'We expect weakness in sales' sim = similarity() AB = sim.compute(A, B) AC = sim.compute(A, C) print(AB) print(AC)  Run\n{'Sim_Cosine': 0.9128709291752769, 'Sim_Jaccard': 0.8333333333333334, 'Sim_MinEdit': 2, 'Sim_Simple': 0.9545454545454546} {'Sim_Cosine': 0.39999999999999997, 'Sim_Jaccard': 0.25, 'Sim_MinEdit': 4, 'Sim_Simple': 0.9315789473684211}  参考文献 Cohen, Lauren, Christopher Malloy, and Quoc Nguyen. Lazy prices. No. w25084. National Bureau of Economic Research, 2018.\n如果 如果您是经管人文社科专业背景，编程小白，面临海量文本数据采集和处理分析艰巨任务，个人建议学习 《python网络爬虫与文本数据分析》视频课。\n python入门 网络爬虫 数据读取 文本分析入门 机器学习与文本分析 文本分析在经管研究中的应用  感兴趣的童鞋不妨 戳一下 《python网络爬虫与文本数据分析》进来看看~\n  更多   B站 公众号：大邓和他的python  知乎  github    \n支持 分享不易，谢谢大家分享（或红包）支持^_^\n","date":1589414400,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1589414400,"objectID":"6e61afc0664181bd27d1f91a49fc5f18","permalink":"https://thunderhit.github.io/project/simtext/","publishdate":"2020-05-14T00:00:00Z","relpermalink":"/project/simtext/","section":"project","summary":"计算两文档间四大文本相似性指标","tags":["python库","文本分析","文本相似"],"title":"simtext库","type":"project"},{"authors":null,"categories":["教程","视频"],"content":"目录    一、简介 二、安装 三、功能说明 四、快速入门  4.1 获取上证交易所上市公司目录 4.2下载某公司所有定期报告文件 4.3 获取某公司的所有定期报告相关信息 4.4 获取某公司的所有定期报告url   五、获取cookies 如果 更多 支持     一、简介 上海证券交易所上市公司定期报告下载,项目地址 https://github.com/thunderhit/shreport   github地址 https://github.com/thunderhit/shreport pypi地址 https://pypi.org/project/shreport  能：\n  获取上证交易所所有公司目录\n  上市公司历年报告(季报、半年报、年报)\n   二、安装 pip install shreport  \n三、功能说明 companys() 上证所有上市公司名录，公司名及股票代码 :return: 返回DataFrame pdfurls(code) 仅获取定期报告pdf下载链接 :param code: 股票代码 :return: 年报pdf链接 disclosure(self, code) 获得该公司的股票代码、报告类型、年份、定期报告披露日期、定期报告pdf下载链接, 返回DataFrame :param code: 股票代码 download(code, savepath) 下载该公司（code）的所有季度报告、半年报、年报pdf文件 :param code: 上市公司股票代码 :param savepath: 数据存储所在文件夹的路径，建议使用相对路径  \n四、快速入门 一定要先获得cookies后才能使用下面的所有代码，这里先直接看代码使用情况，cookies获取可见文档\n4.1 获取上证交易所上市公司目录 from shreport import SH cookies = {\u0026quot;Cookie\u0026quot;: '您的cookies'} sh = SH(cookies) df = sh.companys() #将查询结果存储 #df.to_excel('上证交易所上市公司名录.xlsx') #显示前5条数据 df.head()  Run\n   name code     浦发银行 600000   白云机场 600004   东风汽车 600006   中国国贸 600007   首创股份 600008    4.2下载某公司所有定期报告文件 绝大多数报告文件名格式\n   文件 文件名 例子     季度报 公司代码-年份-数字 600000-2000-1.pdf、600000-2000-3.pdf   半年报 公司代码-年份-z 600000-2000-z.pdf   年报 公司代码-年份-n 600000-2000-n.pdf    代码\nfrom pathlib import Path from shreport import SH cookies = {\u0026quot;Cookie\u0026quot;: '您的cookies'} sh = SH(cookies) #获取当前代码所在的文件夹路径 cwd = Path().cwd() #以浦发银行为例股票代码600000 sh.download(code='600000', savepath=cwd)  Run\n=======请耐心等待，正在获取600000数据 =======准备获取600000年报文件链接======== =======年报文件链接已获取完毕============= 已成功下载600000_2000_1.pdf 已成功下载600000_2000_z.pdf 已成功下载600000_2000_3.pdf 已成功下载600000_2000_n.pdf ...... 已成功下载600000_2019_1.pdf 已成功下载600000_2019_z.pdf 已成功下载600000_2019_3.pdf 已成功下载600000_2000_n.pdf  4.3 获取某公司的所有定期报告相关信息 如果暂时不想下载定期报告pdf文件，可以可以先获取某公司的\n 股票代码 报告类型 年份 定期报告披露日期 定期报告pdf下载链接  结果返回DataFrame\nfrom shreport import SH cookies = {\u0026quot;Cookie\u0026quot;: '您的cookies'} sh = SH(cookies) #获取浦发银行披露信息 df = sh.disclosure(code='600000') #存储数据 #df.to_excel('600000.xlsx') #前5条信息 df.head()  Run\n   company code type year date pdf     浦发银行 600000 半年报 2000 2000-07-28 http://www.sse.com.cn/disclosure/listedinfo/announcement/c/600000_2000_1.pdf   浦发银行 600000 第三季度季报 2002 2002-10-30 http://www.sse.com.cn/disclosure/listedinfo/announcement/c/2002-10-30/600000_2002_3.pdf   浦发银行 600000 半年报 2002 2002-08-17 http://www.sse.com.cn/disclosure/listedinfo/announcement/c/2002-08-17/600000_2002_z.pdf   浦发银行 600000 第一季度季报 2002 2002-04-27 http://www.sse.com.cn/disclosure/listedinfo/announcement/c/600000_2002_1.pdf   浦发银行 600000 年报 2001 2002-03-21 http://www.sse.com.cn/disclosure/listedinfo/announcement/c/600000_2001_n.pdf    4.4 获取某公司的所有定期报告url 如果暂时不想下载定期报告pdf文件，可以只得到该公司所有的报告文件链接\nfrom shreport import SH cookies = {\u0026quot;Cookie\u0026quot;: '您的cookies'} sh = SH(cookies) #以浦发银行为例股票代码600000 urls = sh.pdfurls(code='600000') urls  Run\n=======准备获取600000年报文件链接======== =======年报文件链接已获取完毕============= ['http://www.sse.com.cn/disclosure/listedinfo/announcement/c/600000_2000_1.pdf', 'http://www.sse.com.cn/disclosure/listedinfo/announcement/c/2002-10-30/600000_2002_3.pdf', 'http://www.sse.com.cn/disclosure/listedinfo/announcement/c/2002-08-17/600000_2002_z.pdf', ....... 'http://www.sse.com.cn/disclosure/listedinfo/announcement/c/600000_2002_1.pdf', 'http://www.sse.com.cn/disclosure/listedinfo/announcement/c/2019-03-26/600000_2018_n.pdf', 'http://www.sse.com.cn/disclosure/listedinfo/announcement/c/2018-10-31/600000_2018_3.pdf', 'http://www.sse.com.cn/disclosure/listedinfo/announcement/c/2018-08-30/600000_2018_z.pdf', 'http://www.sse.com.cn/disclosure/listedinfo/announcement/c/2018-04-28/600000_2017_n.pdf', 'http://www.sse.com.cn/disclosure/listedinfo/announcement/c/2018-04-28/600000_2018_1.pdf']  \n五、获取cookies 一定要先获得cookies后才能使用所有的代码，获取方法\n 浏览器访问http://www.sse.com.cn/disclosure/overview/ 按F12（mac按option+command+I)打开开发者工具的Network 刷新网页，耐心寻找与www.sse.com.cn有关的任意网址，找到cookies  \n如果 如果您是经管人文社科专业背景，编程小白，面临海量文本数据采集和处理分析艰巨任务，个人建议学习 《python网络爬虫与文本数据分析》视频课。\n python入门 网络爬虫 数据读取 文本分析入门 机器学习与文本分析 文本分析在经管研究中的应用  感兴趣的童鞋不妨 戳一下 《python网络爬虫与文本数据分析》进来看看~\n\n更多   B站 公众号：大邓和他的python  知乎  github  \n支持 分享不易，谢谢大家分享（或红包）支持^_^\n","date":1589155200,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1589155200,"objectID":"790a36748482f385377f0596b324ec10","permalink":"https://thunderhit.github.io/project/shreport/","publishdate":"2020-05-11T00:00:00Z","relpermalink":"/project/shreport/","section":"project","summary":"批量下载上交所定期报告","tags":["python库","数据采集","网络爬虫"],"title":"shreport库","type":"project"},{"authors":null,"categories":["教程"],"content":"最近运行课件代码，发现pdf文件读取部分的函数失效。这里找到读取pdf文件的可运行代码，为了方便后续学习使用，我已将pdf和docx读取方法封装成pdfdocx包。\npdfdocx github项目地址 只有简单的两个读取函数\n read_pdf(file) read_docx(file)  file为文件路径，函数运行后返回file文件内的文本数据。\n安装 pip install pdfdocx  使用 读取pdf文件\nfrom pdfdocx import read_pdf p_text = read_pdf('test/data.pdf') print(p_text)  Run\n这是来⾃pdf⽂件内的内容  from pdfdocx import read_docx d_text = read_pdf('test/data.docx') print(d_text)  Run\n这是来⾃docx⽂件内的内容  拆开pdfdocx 希望大家能安装好，如果安装或者使用失败，可以使用下面的代码作为备选方法。虽然繁琐，能用就好。\n读取pdf\nfrom io import StringIO from pdfminer.converter import TextConverter from pdfminer.layout import LAParams from pdfminer.pdfdocument import PDFDocument from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter from pdfminer.pdfpage import PDFPage from pdfminer.pdfparser import PDFParser import re def read_pdf(file): \u0026quot;\u0026quot;\u0026quot; 读取pdf文件，并返回其中的文本内容 :param file: pdf文件路径 :return: docx中的文本内容 \u0026quot;\u0026quot;\u0026quot; output_string = StringIO() with open(file, 'rb') as in_file: parser = PDFParser(in_file) doc = PDFDocument(parser) rsrcmgr = PDFResourceManager() device = TextConverter(rsrcmgr, output_string, laparams=LAParams()) interpreter = PDFPageInterpreter(rsrcmgr, device) for page in PDFPage.create_pages(doc): interpreter.process_page(page) text = output_string.getvalue() return re.sub('[\\n\\t\\s]', '', text)  读取docx\nimport docx def read_docx(file): \u0026quot;\u0026quot;\u0026quot; 读取docx文件，并返回其中的文本内容 :param file: docx文件路径 :return: docx中的文本内容 \u0026quot;\u0026quot;\u0026quot; text = '' doc = docx.Document(file) for para in doc.paragraphs: text += para.text return text  \n如果 如果您是经管人文社科专业背景，编程小白，面临海量文本数据采集和处理分析艰巨任务，个人建议学习 《python网络爬虫与文本数据分析》视频课。\n python入门 网络爬虫 数据读取 文本分析入门 机器学习与文本分析 文本分析在经管研究中的应用  感兴趣的童鞋不妨 戳一下 《python网络爬虫与文本数据分析》进来看看~\n更多    B站\n  公众号：大邓和他的python\n   知乎\n   github\n​\n  支持 分享不易，谢谢大家分享（或红包）支持^_^\n","date":1589068800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1589068800,"objectID":"52bd23c6bc58589ec52d044b6f129566","permalink":"https://thunderhit.github.io/project/pdfdocx/","publishdate":"2020-05-10T00:00:00Z","relpermalink":"/project/pdfdocx/","section":"project","summary":"用python读取pdf和docx文件据","tags":["python库","文本分析"],"title":"pdfdocx库","type":"project"},{"authors":["Test"],"categories":null,"content":" Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.   Supplementary notes can be added here, including code and math.\n","date":1554595200,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1554595200,"objectID":"557dc08fd4b672a0c08e0a8cf0c9ff7d","permalink":"https://thunderhit.github.io/publication/preprint/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/preprint/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example preprint / working paper","type":"publication"},{"authors":["Test"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.   Supplementary notes can be added here, including code and math.\n","date":1441065600,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1441065600,"objectID":"966884cc0d8ac9e31fab966c4534e973","permalink":"https://thunderhit.github.io/publication/journal-article/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/journal-article/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example journal article","type":"publication"},{"authors":["Test"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.   Supplementary notes can be added here, including code and math.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1372636800,"objectID":"69425fb10d4db090cfbd46854715582c","permalink":"https://thunderhit.github.io/publication/conference-paper/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/conference-paper/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example conference paper","type":"publication"}]