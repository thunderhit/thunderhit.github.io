<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python | Thunderhit</title>
    <link>https://thunderhit.github.io/category/python/</link>
      <atom:link href="https://thunderhit.github.io/category/python/index.xml" rel="self" type="application/rss+xml" />
    <description>python</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>zh-Hans</language><lastBuildDate>Sun, 05 Jul 2020 09:20:06 +0800</lastBuildDate>
    <image>
      <url>https://thunderhit.github.io/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>python</title>
      <link>https://thunderhit.github.io/category/python/</link>
    </image>
    
    <item>
      <title>使用Pandas对Python岗位需求进行分析</title>
      <link>https://thunderhit.github.io/post/pandas_boss_analysis/</link>
      <pubDate>Sun, 05 Jul 2020 09:20:06 +0800</pubDate>
      <guid>https://thunderhit.github.io/post/pandas_boss_analysis/</guid>
      <description>&lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#1-读取数据&#34;&gt;1. 读取数据&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#2-新增city字段&#34;&gt;2. 新增city字段&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#3-三个字段公用一个apply函数&#34;&gt;3. 三个字段公用一个apply函数&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#4-薪资&#34;&gt;4. 薪资&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#5-工作年限&#34;&gt;5. 工作年限&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#6-员工人数&#34;&gt;6. 员工人数&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#7-教育&#34;&gt;7. 教育&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#8-城市薪酬关系&#34;&gt;8. 城市/薪酬关系&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#9-学历薪酬关系&#34;&gt;9. 学历/薪酬关系&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#10-城市学历薪酬关系&#34;&gt;10. 城市/学历/薪酬关系&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#支持&#34;&gt;支持&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;iframe
    src=&#34;//player.bilibili.com/player.html?bvid=BV1St4y117Ls&amp;page=1&#34;
    scrolling=&#34;no&#34;
    height=&#34;768px&#34;
    width=&#34;1024px&#34;
    frameborder=&#34;no&#34;
    framespacing=&#34;0&#34;
    allowfullscreen=&#34;true&#34;
&gt;
&lt;/iframe&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    数据代码下载链接:https://pan.baidu.com/s/1kz2slEYpW0FU2XsPd2lbkQ  密码:hwsi
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;1-读取数据&#34;&gt;1. 读取数据&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import numpy as np
df = pd.read_csv(&#39;data/Jobs.csv&#39;)
df.head(2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;img/1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 总数
len(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;356
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-新增city字段&#34;&gt;2. 新增city字段&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;job_area&#39;].unique()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([&#39;深圳·南山区&#39;, &#39;深圳·龙岗区&#39;, &#39;深圳&#39;, &#39;深圳·福田区&#39;, &#39;深圳·光明区&#39;, &#39;深圳·龙华区&#39;, &#39;深圳·宝安区&#39;,
       &#39;job_area&#39;, &#39;北京&#39;, &#39;北京·朝阳区&#39;, &#39;北京·海淀区&#39;, &#39;北京·通州区&#39;, &#39;北京·东城区&#39;, &#39;北京·丰台区&#39;,
       &#39;北京·大兴区&#39;, &#39;北京·昌平区&#39;, &#39;北京·西城区&#39;, &#39;上海&#39;, &#39;上海·杨浦区&#39;, &#39;上海·浦东新区&#39;, &#39;上海·徐汇区&#39;,
       &#39;上海·长宁区&#39;, &#39;上海·青浦区&#39;, &#39;上海·静安区&#39;, &#39;上海·普陀区&#39;, &#39;上海·黄浦区&#39;, &#39;上海·闵行区&#39;,
       &#39;上海·虹口区&#39;, &#39;上海·松江区&#39;, &#39;广州·增城区&#39;, &#39;广州·黄埔区&#39;, &#39;广州·越秀区&#39;, &#39;广州·番禺区&#39;,
       &#39;广州·天河区&#39;, &#39;广州&#39;, &#39;广州·海珠区&#39;, &#39;广州·荔湾区&#39;, &#39;广州·白云区&#39;], dtype=object)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def extract_city(job_area):
    if &#39;深圳&#39; in job_area:
        return &#39;深圳&#39;
    elif &#39;广州&#39; in job_area:
        return &#39;广州&#39;
    elif &#39;北京&#39; in job_area:
        return &#39;北京&#39;
    elif &#39;上海&#39; in job_area:
        return &#39;上海&#39;
    else:
        return None
    
extract_city(&#39;上海-静安区&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;上海&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;job_area&#39;].apply(extract_city)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0      深圳
1      深圳
2      深圳
3      深圳
4      深圳
       ..
351    广州
352    广州
353    广州
354    广州
355    广州
Name: job_area, Length: 356, dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;city&#39;]=df[&#39;job_area&#39;].apply(extract_city)
df.head(2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;img/2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-三个字段公用一个apply函数&#34;&gt;3. 三个字段公用一个apply函数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;salary&lt;/li&gt;
&lt;li&gt;experience&lt;/li&gt;
&lt;li&gt;population&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;步骤:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;正则表达式抽取出数字列表&lt;/li&gt;
&lt;li&gt;求均值&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re

text = &#39;300-1000人&#39;

def avg(text):
    nums = re.findall(&#39;\d+&#39;, text)
    nums = [float(x) for x in nums]
    if nums:
        return np.mean(nums)
    else:
        return 0

    
avg(&#39;300-1000人&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;650.0
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4-薪资&#34;&gt;4. 薪资&lt;/h2&gt;
&lt;p&gt;salary&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;new_salary&#39;] = df[&#39;salary&#39;].apply(avg)
df.head(2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;img/3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-工作年限&#34;&gt;5. 工作年限&lt;/h2&gt;
&lt;p&gt;experience&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;experience&#39;].apply(avg)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0      2.0
1      4.0
2      0.0
3      7.5
4      4.0
      ... 
351    4.0
352    2.0
353    6.0
354    4.0
355    0.0
Name: experience, Length: 356, dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;new_experience&#39;] = df[&#39;experience&#39;].apply(avg)
df.head(2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;img/4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;6-员工人数&#34;&gt;6. 员工人数&lt;/h2&gt;
&lt;p&gt;population&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;population&#39;].apply(avg)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0      10000.0
1      10000.0
2      10000.0
3      10000.0
4      10000.0
        ...   
351      299.5
352       59.5
353       59.5
354      299.5
355       10.0
Name: population, Length: 356, dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;new_population&#39;] = df[&#39;population&#39;].apply(avg)
df.head(2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;img/5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;7-教育&#34;&gt;7. 教育&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;设计一个函数，出现正规学历，返回True(包括”不限“)&lt;/li&gt;
&lt;li&gt;使用逻辑索引，把正规学历的招聘信息都保留&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;edu&#39;].unique()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([&#39;本科&#39;, &#39;博士&#39;, &#39;硕士&#39;, &#39;大专&#39;, &#39;不限&#39;, &#39;edu&#39;, &#39;6个月&#39;, &#39;3个月&#39;, &#39;7个月&#39;, &#39;4天/周&#39;],
      dtype=object)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def edu_bool(level):
    if level in [&#39;本科&#39;, &#39;博士&#39;, &#39;硕士&#39;, &#39;大专&#39;, &#39;不限&#39;]:
        return True
    else:
        return False
    
edu_bool(&#39;博士&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;Edu_bool&#39;] =  df[&#39;edu&#39;].apply(edu_bool)
df.head(2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;img/6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 逻辑索引
new_df = df[df[&#39;Edu_bool&#39;]==True]
new_df.head(2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;img/7.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;8-城市薪酬关系&#34;&gt;8. 城市/薪酬关系&lt;/h2&gt;
&lt;p&gt;city/salary&lt;/p&gt;
&lt;p&gt;会用到df.groupby&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;new_df.groupby(&#39;city&#39;).mean()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;img/8.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;9-学历薪酬关系&#34;&gt;9. 学历/薪酬关系&lt;/h2&gt;
&lt;p&gt;edu/salary&lt;/p&gt;
&lt;p&gt;会用到df.groupby&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;new_df.groupby(&#39;edu&#39;).mean()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;img/9.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;10-城市学历薪酬关系&#34;&gt;10. 城市/学历/薪酬关系&lt;/h2&gt;
&lt;p&gt;透视表&lt;/p&gt;
&lt;p&gt;pd.pivot_table(df, index, columns, values, aggfunc, margins)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.pivot_table(new_df, 
               index=&#39;city&#39;, 
               columns=&#39;edu&#39;, 
               values=&#39;new_salary&#39;, 
               aggfunc=np.mean, 
               margins=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;img/10.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;支持&#34;&gt;支持&lt;/h2&gt;
&lt;p&gt;分享不易，谢谢大家分享（或红包）支持^_^&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/my_zanshang_qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pandas也能修改样式？快速给你的数据换个Style</title>
      <link>https://thunderhit.github.io/post/pandas_style/</link>
      <pubDate>Fri, 03 Jul 2020 22:58:04 +0800</pubDate>
      <guid>https://thunderhit.github.io/post/pandas_style/</guid>
      <description>&lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#前言&#34;&gt;前言&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#使用说明&#34;&gt;使用说明&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#一些例子&#34;&gt;一些例子&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#基本样式&#34;&gt;基本样式&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#选择某列&#34;&gt;选择某列&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#格式化输出&#34;&gt;格式化输出&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#style内置方法&#34;&gt;style内置方法&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#支持&#34;&gt;支持&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;blockquote&gt;
&lt;p&gt;作者:刘早起&lt;/p&gt;
&lt;p&gt;公众号: 早起Python
&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    本文数据和代码下载链接:https://pan.baidu.com/s/1sFPXqa65BFVOT8jTmpqxYA  密码:gjua
  &lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;在Pandas中每一个DataFrame都有一个Style属性，我们可以通过修改该属性来给数据添加一些基本的样式。
&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;使用说明&#34;&gt;使用说明&lt;/h1&gt;
&lt;p&gt;通过修改Styler对象的属性，将样式传递给DataFrame，主要有两种传递方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Styler.applymap&lt;/strong&gt;：对所有的单元格操作样式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Styler.apply&lt;/strong&gt;：对列/行/表操作样式
&lt;br&gt;&lt;br&gt;
Styler.applymap通过DataFrame对所有的单元格操作样式。
&lt;br&gt;
Styler.apply根据axis参数，按列使用axis=0，按行使用axis=1，以及axis=None作用于整个表。所以&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;若使用Styler.applymap，我们的函数应返回带有&lt;strong&gt;CSS属性-值对&lt;/strong&gt;的单个字符串。&lt;/li&gt;
&lt;li&gt;若使用Styler.apply，我们的函数应返回具有相同形状的Series或DataFrame，其中每个值都是具有CSS属性值对的字符串。
&lt;br&gt;&lt;br&gt;
不会CSS？没关系，作为调包侠的我们大多是改改HTML颜色代码即可完成样式修改，下面看一些示例。
&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;一些例子&#34;&gt;一些例子&lt;/h1&gt;
&lt;h3 id=&#34;基本样式&#34;&gt;基本样式&lt;/h3&gt;
&lt;p&gt;首先我们创建一组没有任何样式的数据&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd

df = pd.read_csv(&#39;test.csv&#39;)
df
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;img/1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们之前说过，DataFrame是有style属性的，所以在没有做任何修改的情况下，使用df.style应该和上图一样&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.style
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;img/1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;现在让我们编写一个简单的样式函数，该函数可以将负数变为红色，使正数保持黑色。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def color_negative_red(val):
    color = &#39;red&#39; if val&amp;lt; 0 else &#39;black&#39;
    return &#39;color: {}&#39;.format(color)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在来应用这段函数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.style.applymap(color_negative_red)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;img/2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;现在如果我们想突出显示&lt;strong&gt;每列&lt;/strong&gt;中的最大值，需要重新定义一个函数。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def highlight_max(series):
    is_max = series==series.max()
    return [&#39;background-color: yellow&#39; if v else &#39;&#39; 
            for v in is_max]

#测试一下
highlight_max(df[&#39;E&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;&#39;, &#39;&#39;, &#39;background-color: yellow&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;之前我们是以单元格为单位进行操作，使用的是.applymap。现在我们待操作的对象是列，所以这里用的是.apply方法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.style.apply(highlight_max)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;img/3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;现在可以使用&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.style.applymap(color_negative_red).apply(highlight_max)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;img/4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;当然我们也可以通过修改样式函数并使用.apply来高亮整个DataFrame的最大值，&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np

def highlight_max(data, color=&#39;yellow&#39;):
    attr = &#39;background-color: {}&#39;.format(color)
    if data.ndim ==1:
        is_max = data==data.max()
        return [attr if v else &#39;&#39; for v in is_max]
    else:
        is_max = data==data.max().max()
        return pd.DataFrame(np.where(is_max, attr, &#39;&#39;),
                           index=data.index, 
                           columns=data.columns)
    
df.style.apply(highlight_max, 
               color=&#39;darkorange&#39;, 
               axis=None)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;img/5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;选择某列&#34;&gt;选择某列&lt;/h3&gt;
&lt;p&gt;我们也可以通过&lt;strong&gt;subset&lt;/strong&gt;对选中的某列或某几列进行样式修饰&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.style.apply(highlight_max, 
               axis=0, #列方向
               subset=[&#39;B&#39;, &#39;C&#39;, &#39;D&#39;]) #选择BCD列
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;img/6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;格式化输出&#34;&gt;格式化输出&lt;/h3&gt;
&lt;p&gt;我们也可以使用Styler.format来快速格式化输出，比如将小数格式化为百分数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.style.format(&amp;quot;{:.2%}&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;img/7.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;也支持使用字典或lambda表达式来更灵活的使用&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.style.format({&#39;B&#39;: &amp;quot;{:.3f}&amp;quot;, #保留小数点后3位
                &#39;D&#39;: &#39;{:+.3f}&#39;})#带符号，保留小数点后三位
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;img/8.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;style内置方法&#34;&gt;style内置方法&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;方法&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;style.format()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;格式化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;style.hide_columns(subset)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;隐藏某列&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;style.hide_index()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;隐藏行索引&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;style.background_gradient()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;梯度下降着色&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;style.bar()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;每个数值型单元格显示横向条形图&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;style.highlight_max(color=&#39;yellow&amp;rsquo;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;df中每列最大的值着色&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;style.highlight_min(color=&#39;yellow&amp;rsquo;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;df中每列最小的值着色&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;style.highlight_null(null_color=&#39;red&amp;rsquo;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;df中缺失值着色&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;style.to_excel(xlsxfile)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;将dataframe带着样式存到xlsx文件中&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#隐藏A列
df.style.hide_columns(&#39;A&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;img/9.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#隐藏行索引
df.style.hide_index()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;img/10.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#梯度下降着色
df.style.background_gradient()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;img/11.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 最大值着色
#df.style.highlight_max()

#最小值着色
df.style.highlight_min()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;img/12.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#保存样式到xlsx文件中
new_df = df.style.background_gradient()
new_df.to_excel(&#39;test.xlsx&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用MS Excel打开test.xlsx文件，&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;img/13.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;支持&#34;&gt;支持&lt;/h2&gt;
&lt;p&gt;分享不易，谢谢大家分享（或红包）支持^_^&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/my_zanshang_qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>小案例: Pandas的apply方法</title>
      <link>https://thunderhit.github.io/post/pandas%E7%9A%84apply%E6%96%B9%E6%B3%95/</link>
      <pubDate>Tue, 23 Jun 2020 11:24:26 +0800</pubDate>
      <guid>https://thunderhit.github.io/post/pandas%E7%9A%84apply%E6%96%B9%E6%B3%95/</guid>
      <description>&lt;p&gt;pandas中有一个特别好用的apply方法，包括&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;列内计算，只对某列进行某种计算&lt;/li&gt;
&lt;li&gt;列间计算，对多个列之间进行复杂的计算&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面我们看实验数据&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import numpy as np

matrix = [
    [&#39;张三&#39;, &#39;1995-12-31&#39;, &#39;山东&#39;, &#39;本科&#39;],
    [&#39;李四&#39;, &#39;1993-05-29&#39;, &#39;河北&#39;, &#39;大专&#39;],
    [&#39;王五&#39;, &#39;1995-03-14&#39;, &#39;山西&#39;, &#39;硕士&#39;],
    [&#39;赵六&#39;, &#39;1992-07-08&#39;, &#39;内蒙古&#39;, &#39;本科&#39;],
]

df = pd.DataFrame(matrix, columns=[&#39;Name&#39;, &#39;Birthday&#39;, &#39;From&#39;, &#39;Edu&#39;])
df
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Birthday&lt;/th&gt;
      &lt;th&gt;From&lt;/th&gt;
      &lt;th&gt;Edu&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;张三&lt;/td&gt;
      &lt;td&gt;1995-12-31&lt;/td&gt;
      &lt;td&gt;山东&lt;/td&gt;
      &lt;td&gt;本科&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;李四&lt;/td&gt;
      &lt;td&gt;1993-05-29&lt;/td&gt;
      &lt;td&gt;河北&lt;/td&gt;
      &lt;td&gt;大专&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;王五&lt;/td&gt;
      &lt;td&gt;1995-03-14&lt;/td&gt;
      &lt;td&gt;山西&lt;/td&gt;
      &lt;td&gt;硕士&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;赵六&lt;/td&gt;
      &lt;td&gt;1992-07-08&lt;/td&gt;
      &lt;td&gt;内蒙古&lt;/td&gt;
      &lt;td&gt;本科&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h1 id=&#34;dfapplyfunc或seriesapplyfunc&#34;&gt;df.apply(func)或series.apply(func)&lt;/h1&gt;
&lt;p&gt;axis控制操作方向&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0 表示列方向&lt;/li&gt;
&lt;li&gt;1 表示行方向&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&#34;列内计算&#34;&gt;列内计算&lt;/h3&gt;
&lt;p&gt;一般列内计算，实际上主要是对series做的操作，比如选中dataframe某列。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;df[&#39;colname&#39;].apply(func)&lt;/code&gt; 默认只对&lt;strong&gt;列方向&lt;/strong&gt;对colname列做func操作，例如计算每个员工的出生年份、年龄。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def year(birthday):
    #截取birthday字符串的年份
    return int(birthday[:4])


#对birthday列使用year函数操作
df[&#39;Year&#39;] = df[&#39;Birthday&#39;].apply(year)

#年龄
df[&#39;Age&#39;] = 2020-df[&#39;Year&#39;]

df
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Birthday&lt;/th&gt;
      &lt;th&gt;From&lt;/th&gt;
      &lt;th&gt;Edu&lt;/th&gt;
      &lt;th&gt;Year&lt;/th&gt;
      &lt;th&gt;Age&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;张三&lt;/td&gt;
      &lt;td&gt;1995-12-31&lt;/td&gt;
      &lt;td&gt;山东&lt;/td&gt;
      &lt;td&gt;本科&lt;/td&gt;
      &lt;td&gt;1995&lt;/td&gt;
      &lt;td&gt;25&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;李四&lt;/td&gt;
      &lt;td&gt;1993-05-29&lt;/td&gt;
      &lt;td&gt;河北&lt;/td&gt;
      &lt;td&gt;大专&lt;/td&gt;
      &lt;td&gt;1993&lt;/td&gt;
      &lt;td&gt;27&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;王五&lt;/td&gt;
      &lt;td&gt;1995-03-14&lt;/td&gt;
      &lt;td&gt;山西&lt;/td&gt;
      &lt;td&gt;硕士&lt;/td&gt;
      &lt;td&gt;1995&lt;/td&gt;
      &lt;td&gt;25&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;赵六&lt;/td&gt;
      &lt;td&gt;1992-07-08&lt;/td&gt;
      &lt;td&gt;内蒙古&lt;/td&gt;
      &lt;td&gt;本科&lt;/td&gt;
      &lt;td&gt;1992&lt;/td&gt;
      &lt;td&gt;28&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h3 id=&#34;列间计算&#34;&gt;列间计算&lt;/h3&gt;
&lt;p&gt;df.apply(func, axis=1)不同列之间可以有复杂的计算，比如想计算 设计自我介绍模板&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def intro(r):
    #r代指dataframe中的任意行，是series类型数据，拥有类似字典的使用方法。
    return &#39;大家好，我是{name},\
            来自{province}省，\
            今年{age}岁了！&#39;.format(name=r[&#39;Name&#39;], 
                                 province=r[&#39;From&#39;],
                                 age=r[&#39;Age&#39;])

df[&#39;Intro&#39;] = df.apply(intro, axis=1)
df
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Birthday&lt;/th&gt;
      &lt;th&gt;From&lt;/th&gt;
      &lt;th&gt;Edu&lt;/th&gt;
      &lt;th&gt;Year&lt;/th&gt;
      &lt;th&gt;Age&lt;/th&gt;
      &lt;th&gt;Intro&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;张三&lt;/td&gt;
      &lt;td&gt;1995-12-31&lt;/td&gt;
      &lt;td&gt;山东&lt;/td&gt;
      &lt;td&gt;本科&lt;/td&gt;
      &lt;td&gt;1995&lt;/td&gt;
      &lt;td&gt;25&lt;/td&gt;
      &lt;td&gt;大家好，我是张三,            来自山东省，            今年25岁了！&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;李四&lt;/td&gt;
      &lt;td&gt;1993-05-29&lt;/td&gt;
      &lt;td&gt;河北&lt;/td&gt;
      &lt;td&gt;大专&lt;/td&gt;
      &lt;td&gt;1993&lt;/td&gt;
      &lt;td&gt;27&lt;/td&gt;
      &lt;td&gt;大家好，我是李四,            来自河北省，            今年27岁了！&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;王五&lt;/td&gt;
      &lt;td&gt;1995-03-14&lt;/td&gt;
      &lt;td&gt;山西&lt;/td&gt;
      &lt;td&gt;硕士&lt;/td&gt;
      &lt;td&gt;1995&lt;/td&gt;
      &lt;td&gt;25&lt;/td&gt;
      &lt;td&gt;大家好，我是王五,            来自山西省，            今年25岁了！&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;赵六&lt;/td&gt;
      &lt;td&gt;1992-07-08&lt;/td&gt;
      &lt;td&gt;内蒙古&lt;/td&gt;
      &lt;td&gt;本科&lt;/td&gt;
      &lt;td&gt;1992&lt;/td&gt;
      &lt;td&gt;28&lt;/td&gt;
      &lt;td&gt;大家好，我是赵六,            来自内蒙古省，            今年28岁了！&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>《Python数据挖掘与文本分析》培训介绍</title>
      <link>https://thunderhit.github.io/slides/web_spider_and_text_mining/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://thunderhit.github.io/slides/web_spider_and_text_mining/</guid>
      <description>
&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;/img/backgroud-image.jpg&#34;
  &gt;

&lt;h1 id=&#34;python数据挖掘br与文本分析&#34;&gt;Python数据挖掘&lt;br&gt;与文本分析&lt;/h1&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;按Space键查看PPT&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;地点: 小鹅通云直播&lt;/li&gt;
&lt;li&gt;时间: 2020年6月29号 ~ 7月2号&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;大数据时代br大家会遇到两大难题&#34;&gt;大数据时代，&lt;br&gt;大家会遇到两大难题:&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;fragment &#34; &gt;&lt;/p&gt;
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   1.如何批量快速获取数据&lt;br&gt; 
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   2.如何处理分析非结构(多媒体)数据&lt;br&gt; 
&lt;/span&gt;
&lt;hr&gt;
&lt;h2 id=&#34;这门python课解决了&#34;&gt;这门Python课解决了:&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;fragment &#34; &gt;&lt;/p&gt;
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   1.入门Python语法&lt;br&gt; 
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   2.高效采集网络数据&lt;br&gt; 
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   3.非结构数据清洗与分析&lt;br&gt; 
&lt;/span&gt;
&lt;hr&gt;
&lt;h2 id=&#34;课程亮点&#34;&gt;课程亮点&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;fragment &#34; &gt;&lt;/p&gt;
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   1. 秉承20%时间学到80%常用易用知识&lt;br&gt; 
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   2. 理论+实战，每章节均穿插实战案例&lt;br&gt; 
&lt;/span&gt;
&lt;hr&gt;
&lt;h2 id=&#34;python有什么优点&#34;&gt;Python有什么优点？&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;fragment &#34; &gt;&lt;/p&gt;
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   1.语法简单&lt;br&gt; 
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   2.功能强大&lt;br&gt; 
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   3.免费开源&lt;br&gt; 
&lt;/span&gt;
&lt;hr&gt;
&lt;h2 id=&#34;语法简洁&#34;&gt;语法简洁&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;fragment &#34; &gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Python是一种&amp;quot;说人话&amp;quot;的编程&amp;quot;语言&amp;rdquo;
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
&lt;img src=&#34;img/code.png&#34; alt=&#34;&#34;&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;功能强大&#34;&gt;功能强大&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;fragment &#34; &gt;&lt;/p&gt;
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   1.Web网站开发&lt;br&gt; 
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   2.自动化办公(运营)&lt;br&gt; 
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   3.数据分析&lt;br&gt; 
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   4.机器学习AI&lt;br&gt; 
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   4.游戏开发&lt;br&gt; 
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   5.等等 &lt;br&gt; 
&lt;/span&gt;
&lt;hr&gt;
&lt;h2 id=&#34;python培训br含四大模块&#34;&gt;Python培训&lt;br&gt;含四大模块:&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;打通数据处理分析全流程&lt;br&gt;
&lt;span class=&#34;fragment &#34; &gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   1.Python语法入门&lt;br&gt; 2.网络爬虫(数据采集)&lt;br&gt; 3.文本(数据)分析&lt;br&gt; 4.机器学习与文本分析&lt;br&gt;
&lt;/span&gt;
&lt;hr&gt;
&lt;h2 id=&#34;报名咨询方式&#34;&gt;报名咨询方式&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;img/%E5%BE%AE%E4%BF%A1.jpg&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;培训有对应的录播课br点击下方蓝色链接直接购买br&#34;&gt;培训有对应的录播课，&lt;br&gt;点击下方蓝色链接直接购买&lt;br&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://ke.qq.com/course/482241?tuin=163164df&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python网络爬虫与文本分析&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;thanks&#34;&gt;Thanks&lt;/h1&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Python网络爬虫与文本分析</title>
      <link>https://thunderhit.github.io/courses/python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://thunderhit.github.io/courses/python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90/</guid>
      <description>&lt;br&gt;
&lt;p&gt;在过去的两年间，Python一路高歌猛进，成功窜上“最火编程语言”的宝座。惊奇的是使用Python最多的人群其实不是程序员，而是数据科学家，尤其是社会科学家，涵盖的学科有经济学、管理学、会计学、社会学、传播学、新闻学等等。&lt;/p&gt;
&lt;p&gt;大数据时代到来，网络数据正成为潜在宝藏，大量商业信息、社会信息以文本等非结构化、异构型数据格式存储于网页中。非计算机专业背景的人也可借助机器学习、人工智能等方法进行研究。使用网络世界数据进行研究，面临两大难点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据的批量获取&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文本（非结构化）数据的处理与分析&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参照已发表的社科类文章，希望帮大家解决这两大难点。课程设计的初衷是用最少的时间让大家学到最有用最常用最易用的知识点，降低学习难度。&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h1 id=&#34;课程目录&#34;&gt;课程目录&lt;/h1&gt;
&lt;br&gt;
&lt;h4 id=&#34;第一节-课程简介&#34;&gt;第一节 课程简介&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;课程介绍&lt;/li&gt;
&lt;li&gt;课程知识点分布情况&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;第二节-环境配置&#34;&gt;第二节 环境配置&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Mac环境配置&lt;/li&gt;
&lt;li&gt;Windows环境配置&lt;/li&gt;
&lt;li&gt;pip安装问题解决办法&lt;/li&gt;
&lt;li&gt;jupyter notebook使用方法&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;第三节-python基本语法&#34;&gt;第三节 python基本语法&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;python跟英文一样也是一门语言，这很文科&lt;/li&gt;
&lt;li&gt;字符串&lt;/li&gt;
&lt;li&gt;列表&lt;/li&gt;
&lt;li&gt;元组&lt;/li&gt;
&lt;li&gt;字典&lt;/li&gt;
&lt;li&gt;集合&lt;/li&gt;
&lt;li&gt;if 条件语句&lt;/li&gt;
&lt;li&gt;for循环语句&lt;/li&gt;
&lt;li&gt;try-except异常处理语句&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;第四节-python高级语法&#34;&gt;第四节 python高级语法&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;切片-对想要的数据字段进行切片&lt;/li&gt;
&lt;li&gt;列表推导式&lt;/li&gt;
&lt;li&gt;函数&lt;/li&gt;
&lt;li&gt;csv文件存储库&lt;/li&gt;
&lt;li&gt;os文件路径操作库&lt;/li&gt;
&lt;li&gt;re正则表达式(文本分析利器)&lt;/li&gt;
&lt;li&gt;python初学者常见错误&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;第五节-网络爬虫原理&#34;&gt;第五节 网络爬虫原理&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;理解访问与请求&lt;/li&gt;
&lt;li&gt;寻求网址规律&lt;/li&gt;
&lt;li&gt;requests访问库&lt;/li&gt;
&lt;li&gt;pyquery网页解析定位库&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;第六节-网络爬虫实战&#34;&gt;第六节 网络爬虫实战&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;静态网站-天涯论坛&lt;/li&gt;
&lt;li&gt;静态网站-大众点评&lt;/li&gt;
&lt;li&gt;静态网站-boss直聘&lt;/li&gt;
&lt;li&gt;动态网站-百度企业信用&lt;/li&gt;
&lt;li&gt;动态网站-京东评论&lt;/li&gt;
&lt;li&gt;动态网站-B站弹幕&lt;/li&gt;
&lt;li&gt;动态网站-B站评论&lt;/li&gt;
&lt;li&gt;如何用pandas采集网页中的表格数据&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;第七节-初识文本分析&#34;&gt;第七节 初识文本分析&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;如何从不同格式的文件中读取数据&lt;/li&gt;
&lt;li&gt;jieba分词、词频统计与可视化&lt;/li&gt;
&lt;li&gt;海量公司年报的情感分析(中文)&lt;/li&gt;
&lt;li&gt;英文数据的情感分析&lt;/li&gt;
&lt;li&gt;如何对excel、csv文件做数据分析(pandas数据分析库)&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;第八节-文本分析与机器学习&#34;&gt;第八节 文本分析与机器学习&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;机器学习概论&lt;/li&gt;
&lt;li&gt;用机器学习做文本分析的步骤&lt;/li&gt;
&lt;li&gt;机器学习库scikit-learn&lt;/li&gt;
&lt;li&gt;文本特征工程(描述数据的方式)&lt;/li&gt;
&lt;li&gt;在线评论情感分类&lt;/li&gt;
&lt;li&gt;了解聚类Kmeans算法&lt;/li&gt;
&lt;li&gt;文本相似度计算&lt;/li&gt;
&lt;li&gt;LDA话题模型&lt;/li&gt;
&lt;li&gt;计算消费者异质性(特征向量)&lt;/li&gt;
&lt;li&gt;文本分析在经管研究中的应用案例&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;购买方式&#34;&gt;购买方式&lt;/h1&gt;
&lt;h3 id=&#34;1-腾讯课堂-录播课httpskeqqcomcourse482241tuin163164df&#34;&gt;1. 
&lt;a href=&#34;https://ke.qq.com/course/482241?tuin=163164df&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;腾讯课堂-录播课&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;大邓个人开课，不能开票报销&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2--小鹅通-直播课httpsthunderhitgithubioslidesweb_spider_and_text_mining&#34;&gt;2.  
&lt;a href=&#34;https://thunderhit.github.io/slides/web_spider_and_text_mining/#/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;小鹅通-直播课&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;机构合作，可支持开票报销&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;2020年6月29日~7月2日
&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-现场工作坊&#34;&gt;3. 现场工作坊&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;机构合作，可支持开票报销&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;地点杭州，由于疫情原因，开展不了现场教学，时间待定~&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Python自动化办公实战</title>
      <link>https://thunderhit.github.io/courses/python%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8A%9E%E5%85%AC/</link>
      <pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://thunderhit.github.io/courses/python%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8A%9E%E5%85%AC/</guid>
      <description>&lt;br&gt;
&lt;p&gt;很多职场人士想提高办公效率，python是一门很神奇的工具，ta可以帮我们职场人士做很多事情，尤其是在自动化办公领域，批量自动处理文件简直是职场人士的福音。自动化办公场景包括 excel、ppt、word等文件处理、邮件自动发送、网络爬虫（如数据采集、批量文件下载），这次我就来理一理 python 自动化办公的那些知识点。&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h1 id=&#34;课程目录&#34;&gt;课程目录&lt;/h1&gt;
&lt;h3 id=&#34;准备篇&#34;&gt;&lt;strong&gt;准备篇&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;想象力丰富的自动化场景&lt;/li&gt;
&lt;li&gt;快速上手一个小案例&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h3 id=&#34;简单文件处理篇&#34;&gt;&lt;strong&gt;简单文件处理篇&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;批量更改文件名&lt;/li&gt;
&lt;li&gt;批量检索pdf、word&lt;/li&gt;
&lt;li&gt;批量读取csv、excel&lt;/li&gt;
&lt;li&gt;定制excel文件内单元格的格式&lt;/li&gt;
&lt;li&gt;批量将txt汇总到一个excel中&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h3 id=&#34;网络爬虫&#34;&gt;&lt;strong&gt;网络爬虫&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;网络爬虫原理&lt;/li&gt;
&lt;li&gt;你的第一个爬虫&lt;/li&gt;
&lt;li&gt;自动下载某网站的pdf&lt;/li&gt;
&lt;li&gt;自动下载某网站的图片&lt;/li&gt;
&lt;li&gt;自动下载某网站视频&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h3 id=&#34;报告报表自动化&#34;&gt;&lt;strong&gt;报告报表自动化&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;批量生成合同(word)&lt;/li&gt;
&lt;li&gt;网店口碑可视化（词云图制作）&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h3 id=&#34;邮件自动化&#34;&gt;&lt;strong&gt;邮件自动化&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;如何设置邮箱，让Python控制你的邮箱(163邮箱为例)&lt;/li&gt;
&lt;li&gt;月底给员工自动群发工资条邮件&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h3 id=&#34;生成图形界面篇&#34;&gt;&lt;strong&gt;生成图形界面篇&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;简单的图形界面设计&lt;/li&gt;
&lt;li&gt;自动群发邮件软件的可视化窗口实现&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h1 id=&#34;购买方式&#34;&gt;购买方式&lt;/h1&gt;
&lt;h3 id=&#34;腾讯课堂-python自动化办公实战httpskeqqcomcourse1524799tuin163164df&#34;&gt;
&lt;a href=&#34;https://ke.qq.com/course/1524799?tuin=163164df&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;腾讯课堂-Python自动化办公实战&lt;/a&gt;&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Python语法快速入门</title>
      <link>https://thunderhit.github.io/courses/python%E8%AF%AD%E6%B3%95%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</link>
      <pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://thunderhit.github.io/courses/python%E8%AF%AD%E6%B3%95%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    课程代码关注【公众号：大邓和他的Python】，回复关键词【python入门】
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;视频观看时间加起来不超过3.5小时&lt;br&gt;&lt;/p&gt;
&lt;p&gt;如果有遇到看不懂的地方，大家不需要纠结，很多时候自己照着代码操作一下，看看代码英文的意思，再看看代码运行前后的对比，就会自己有自己对代码独特的见解。&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;内容目录&#34;&gt;内容目录&lt;/h2&gt;
&lt;p&gt;⭐数量的多少表示内容难易程度：&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;
&lt;a href=&#34;https://thunderhit.github.io/post/python%e7%8e%af%e5%a2%83%e9%85%8d%e7%bd%aewin/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;1. Win环境配置&lt;/a&gt;⭐&lt;br&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://thunderhit.github.io/post/python%e7%8e%af%e5%a2%83%e9%85%8d%e7%bd%aemac/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;1. Mac环境配置&lt;/a&gt;⭐&lt;br&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://thunderhit.github.io/post/01-python%e8%b7%9f%e8%8b%b1%e8%af%ad%e4%b8%80%e6%a0%b7%e6%98%af%e4%b8%80%e9%97%a8%e8%af%ad%e8%a8%80/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2. python跟英语一样是一门语言&lt;/a&gt;⭐&lt;br&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://thunderhit.github.io/post/02-%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b%e4%b9%8b%e5%ad%97%e7%ac%a6%e4%b8%b2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;3. 数据类型-字符串&lt;/a&gt;⭐⭐⭐⭐&lt;br&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://thunderhit.github.io/post/03-%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b%e4%b9%8b%e5%88%97%e8%a1%a8%e5%85%83%e7%bb%84%e9%9b%86%e5%90%88/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;4. 数据类型-列表元组集合&lt;/a&gt;⭐⭐&lt;br&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://thunderhit.github.io/post/04-%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b%e4%b9%8b%e5%ad%97%e5%85%b8/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;5. 数据类型-字典&lt;/a&gt;⭐&lt;br&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://thunderhit.github.io/post/05-%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b%e4%b9%8b%e5%b8%83%e5%b0%94%e5%80%bcnone/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;6. 数据类型-布尔值&amp;amp;None&lt;/a&gt;⭐&lt;br&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://thunderhit.github.io/post/06-%e9%80%bb%e8%be%91%e8%af%ad%e5%8f%a5iffortryexcept/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;7. 逻辑语句&lt;/a&gt;⭐⭐⭐⭐&lt;br&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://thunderhit.github.io/post/07-%e5%88%97%e8%a1%a8%e6%8e%a8%e5%af%bc%e5%bc%8f/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;8. 列表推导式&lt;/a&gt;⭐⭐⭐&lt;br&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://thunderhit.github.io/post/08-%e7%90%86%e8%a7%a3%e5%87%bd%e6%95%b0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;9. 理解函数&lt;/a&gt;⭐&lt;br&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://thunderhit.github.io/post/09-%e5%b8%b8%e7%94%a8%e5%86%85%e7%bd%ae%e5%87%bd%e6%95%b0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;10. 常用内置函数&lt;/a&gt;⭐⭐⭐&lt;br&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://thunderhit.github.io/post/10-%e5%86%85%e7%bd%ae%e5%ba%93%e4%b9%8b%e6%96%87%e4%bb%b6%e8%b7%af%e5%be%84pathlib%e5%ba%93/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;11. 内置库之文件路径pathlib库&lt;/a&gt;⭐⭐⭐ &lt;br&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://thunderhit.github.io/post/11-%e5%86%85%e7%bd%ae%e5%ba%93%e4%b9%8bcsv%e6%96%87%e4%bb%b6%e5%ba%93/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;12. 内置库之csv文件库&lt;/a&gt;⭐⭐&lt;br&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://thunderhit.github.io/post/12.-%e5%86%85%e7%bd%ae%e5%ba%93%e4%b9%8b%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8fre%e5%ba%93/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;13. 内置库之正则表达式re库&lt;/a&gt;⭐⭐⭐⭐⭐&lt;br&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://thunderhit.github.io/post/13-%e5%88%9d%e5%ad%a6python%e5%b8%b8%e5%87%ba%e9%94%99%e8%af%af%e6%b1%87%e6%80%bb/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;14. 初学python常出错误汇总&lt;/a&gt;⭐⭐⭐&lt;br&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
