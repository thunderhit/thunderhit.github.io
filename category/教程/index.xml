<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>教程 | Thunderhit</title>
    <link>https://thunderhit.github.io/category/%E6%95%99%E7%A8%8B/</link>
      <atom:link href="https://thunderhit.github.io/category/%E6%95%99%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <description>教程</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>zh-Hans</language><lastBuildDate>Sun, 21 Jun 2020 16:14:32 +0800</lastBuildDate>
    <image>
      <url>https://thunderhit.github.io/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>教程</title>
      <link>https://thunderhit.github.io/category/%E6%95%99%E7%A8%8B/</link>
    </image>
    
    <item>
      <title>Python语法快速入门</title>
      <link>https://thunderhit.github.io/post/python%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</link>
      <pubDate>Sun, 21 Jun 2020 16:14:32 +0800</pubDate>
      <guid>https://thunderhit.github.io/post/python%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</guid>
      <description>&lt;p&gt;课程代码关注【公众号：大邓和他的Python】，回复关键词【python入门】&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;视频观看时间加起来不超过3.5小时&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    如果有遇到看不懂的地方，大家不需要纠结，很多时候自己照着代码操作一下，看看代码英文的意思，再看看代码运行前后的对比，就会自己有自己对代码独特的见解。
  &lt;/div&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://thunderhit.github.io/post/python%e7%8e%af%e5%a2%83%e9%85%8d%e7%bd%aewin/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Win环境配置&lt;/a&gt;⭐&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://thunderhit.github.io/post/python%e7%8e%af%e5%a2%83%e9%85%8d%e7%bd%aemac/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mac环境配置&lt;/a&gt;⭐&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://thunderhit.github.io/post/01-python%e8%b7%9f%e8%8b%b1%e8%af%ad%e4%b8%80%e6%a0%b7%e6%98%af%e4%b8%80%e9%97%a8%e8%af%ad%e8%a8%80/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;python跟英语一样是一门语言&lt;/a&gt;⭐&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://thunderhit.github.io/post/02-%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b%e4%b9%8b%e5%ad%97%e7%ac%a6%e4%b8%b2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;数据类型-字符串&lt;/a&gt;⭐⭐⭐⭐&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://thunderhit.github.io/post/03-%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b%e4%b9%8b%e5%88%97%e8%a1%a8%e5%85%83%e7%bb%84%e9%9b%86%e5%90%88/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;数据类型-列表元组集合&lt;/a&gt;⭐⭐&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://thunderhit.github.io/post/04-%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b%e4%b9%8b%e5%ad%97%e5%85%b8/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;数据类型-字典&lt;/a&gt;⭐&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://thunderhit.github.io/post/05-%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b%e4%b9%8b%e5%b8%83%e5%b0%94%e5%80%bcnone/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;数据类型-布尔值&amp;amp;None&lt;/a&gt;⭐&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://thunderhit.github.io/post/06-%e9%80%bb%e8%be%91%e8%af%ad%e5%8f%a5iffortryexcept/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;逻辑语句&lt;/a&gt;⭐⭐⭐⭐&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://thunderhit.github.io/post/07-%e5%88%97%e8%a1%a8%e6%8e%a8%e5%af%bc%e5%bc%8f/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;列表推导式&lt;/a&gt;⭐⭐⭐&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://thunderhit.github.io/post/08-%e7%90%86%e8%a7%a3%e5%87%bd%e6%95%b0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;理解函数&lt;/a&gt;⭐&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://thunderhit.github.io/post/09-%e5%b8%b8%e7%94%a8%e5%86%85%e7%bd%ae%e5%87%bd%e6%95%b0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;常用内置函数&lt;/a&gt;⭐⭐⭐&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://thunderhit.github.io/post/10-%e5%86%85%e7%bd%ae%e5%ba%93%e4%b9%8b%e6%96%87%e4%bb%b6%e8%b7%af%e5%be%84pathlib%e5%ba%93/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;内置库之文件路径pathlib库&lt;/a&gt;⭐⭐⭐&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://thunderhit.github.io/post/11-%e5%86%85%e7%bd%ae%e5%ba%93%e4%b9%8bcsv%e6%96%87%e4%bb%b6%e5%ba%93/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;内置库之csv文件库&lt;/a&gt;⭐⭐&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://thunderhit.github.io/post/12.-%e5%86%85%e7%bd%ae%e5%ba%93%e4%b9%8b%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8fre%e5%ba%93/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;内置库之正则表达式re库&lt;/a&gt;⭐⭐⭐⭐⭐&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://thunderhit.github.io/post/13-%e5%88%9d%e5%ad%a6python%e5%b8%b8%e5%87%ba%e9%94%99%e8%af%af%e6%b1%87%e6%80%bb/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;初学python常出错误汇总&lt;/a&gt;⭐⭐⭐&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>文本分析(自然语言处理)相关视频汇总</title>
      <link>https://thunderhit.github.io/post/nlp_resources/</link>
      <pubDate>Sun, 21 Jun 2020 15:58:28 +0800</pubDate>
      <guid>https://thunderhit.github.io/post/nlp_resources/</guid>
      <description>&lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#1-python的nlp实战分享-如何实现合同风险预测模型&#34;&gt;1. Python的NLP实战分享-如何实现合同风险预测模型&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#2-nlp与心理学相遇-where-nlp-and-psychology-meet---alexandra-klochko&#34;&gt;2. NLP与心理学相遇 Where NLP and psychology meet - Alexandra Klochko&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#3-tricks-tips-and-topics-in-text-analysis---bhargav-srinivasa-desikan&#34;&gt;3. Tricks, tips and topics in Text Analysis - Bhargav Srinivasa Desikan&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#heading&#34;&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;h3 id=&#34;1-python的nlp实战分享-如何实现合同风险预测模型&#34;&gt;1. Python的NLP实战分享-如何实现合同风险预测模型&lt;/h3&gt;
&lt;iframe
    src=&#34;//player.bilibili.com/player.html?bvid=BV1iE411H7Ch&amp;page=1&#34;
    scrolling=&#34;no&#34;
    height=&#34;768px&#34;
    width=&#34;1024px&#34;
    frameborder=&#34;no&#34;
    framespacing=&#34;0&#34;
    allowfullscreen=&#34;true&#34;
&gt;
&lt;/iframe&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-nlp与心理学相遇-where-nlp-and-psychology-meet---alexandra-klochko&#34;&gt;2. NLP与心理学相遇 Where NLP and psychology meet - Alexandra Klochko&lt;/h3&gt;
&lt;iframe
    src=&#34;//player.bilibili.com/player.html?bvid=BV1iE411H7Ch&amp;page=2&#34;
    scrolling=&#34;no&#34;
    height=&#34;768px&#34;
    width=&#34;1024px&#34;
    frameborder=&#34;no&#34;
    framespacing=&#34;0&#34;
    allowfullscreen=&#34;true&#34;
&gt;
&lt;/iframe&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-tricks-tips-and-topics-in-text-analysis---bhargav-srinivasa-desikan&#34;&gt;3. Tricks, tips and topics in Text Analysis - Bhargav Srinivasa Desikan&lt;/h3&gt;
&lt;iframe
    src=&#34;//player.bilibili.com/player.html?bvid=BV1iE411H7Ch&amp;page=3&#34;
    scrolling=&#34;no&#34;
    height=&#34;768px&#34;
    width=&#34;1024px&#34;
    frameborder=&#34;no&#34;
    framespacing=&#34;0&#34;
    allowfullscreen=&#34;true&#34;
&gt;
&lt;/iframe&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;heading&#34;&gt;&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>半小时学会Markdown标记语法</title>
      <link>https://thunderhit.github.io/post/typora%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84%E5%85%8D%E8%B4%B9markdown%E8%BD%AF%E4%BB%B6/</link>
      <pubDate>Fri, 19 Jun 2020 18:12:27 +0800</pubDate>
      <guid>https://thunderhit.github.io/post/typora%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84%E5%85%8D%E8%B4%B9markdown%E8%BD%AF%E4%BB%B6/</guid>
      <description>&lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#n级标题&#34;&gt;N级标题&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#this-is-an-h1&#34;&gt;This is an H1&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#this-is-an-h2&#34;&gt;This is an H2&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#this-is-an-h3&#34;&gt;This is an H3&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#加粗斜体&#34;&gt;加粗、斜体&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#高亮&#34;&gt;高亮&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#下划线&#34;&gt;下划线&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#删除线&#34;&gt;删除线&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#引用&#34;&gt;引用&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#列表&#34;&gt;列表&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#有序列表&#34;&gt;有序列表&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#无序列表&#34;&gt;无序列表&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#代码块&#34;&gt;代码块&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#表格&#34;&gt;表格&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#超链接&#34;&gt;超链接&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#插入图片&#34;&gt;插入图片&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#任务清单&#34;&gt;任务清单&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#数学公式&#34;&gt;数学公式&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#mermaid图表&#34;&gt;mermaid图表&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#支持&#34;&gt;支持&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;p&gt;学习编程的过程需要敲大量代码，遇到很多错误，好脑子不如烂笔头，能一边敲代码一边做笔记，学起来事倍功半，今天分享大家一个做笔记的工具软件Typora。&lt;/p&gt;
&lt;iframe
    src=&#34;//player.bilibili.com/player.html?bvid=BV1vC4y1a727&amp;page=1&#34;
    scrolling=&#34;no&#34;
    height=&#34;768px&#34;
    width=&#34;1024px&#34;
    frameborder=&#34;no&#34;
    framespacing=&#34;0&#34;
    allowfullscreen=&#34;true&#34;
&gt;
&lt;/iframe&gt;

&lt;br&gt;
&lt;h2 id=&#34;n级标题&#34;&gt;N级标题&lt;/h2&gt;
&lt;p&gt;一个&lt;code&gt;#&lt;/code&gt;就是一个级，最多支持六级标题。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# This is an H1

## This is an H2

### This is an H3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;效果如下&lt;/p&gt;
&lt;h1 id=&#34;this-is-an-h1&#34;&gt;This is an H1&lt;/h1&gt;
&lt;h2 id=&#34;this-is-an-h2&#34;&gt;This is an H2&lt;/h2&gt;
&lt;h3 id=&#34;this-is-an-h3&#34;&gt;This is an H3&lt;/h3&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;加粗斜体&#34;&gt;加粗、斜体&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;**加粗的文本**
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;加粗的文本&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*斜体文本*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;斜体文本&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;高亮&#34;&gt;高亮&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;==highlight==
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;==highlight==&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;下划线&#34;&gt;下划线&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;u&amp;gt;下划线内容&amp;lt;/u&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;u&gt;下划线内容&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;删除线&#34;&gt;删除线&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt; ~~Mistaken text.~~
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;del&gt;Mistaken text.&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;引用&#34;&gt;引用&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; This is another blockquote with one paragraph. There is three empty line to seperate two blockquote.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;效果如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is another blockquote with one paragraph. There is three empty line to seperate two blockquote.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;列表&#34;&gt;列表&lt;/h2&gt;
&lt;h3 id=&#34;有序列表&#34;&gt;有序列表&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;ordered list:
1.  Red
2. 	Green
3.	Blue
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ordered list:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Red&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Green&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Blue&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    注意&lt;code&gt;.&lt;/code&gt;之后留一个空格再书写内容
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h3 id=&#34;无序列表&#34;&gt;无序列表&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;un-ordered list:
- Red
- Green
- Blue
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;效果如下&lt;/p&gt;
&lt;p&gt;un-ordered list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Red&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Green&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Blue&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    注意&lt;code&gt;.&lt;/code&gt;之后同样留一个空格再书写内容
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;代码块&#34;&gt;代码块&lt;/h2&gt;
&lt;p&gt;一般情况下，word等office软件不支持代码高亮，且存储代码容易乱行。以typora为首的markdown语法完美支持各种代码，这里以Python代码为例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;​```python
import requests
url = &#39;https://www.baidu.com/&#39;
resp = requests.get(url)
​```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;效果如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import requests
url = &#39;https://www.baidu.com/&#39;
resp = requests.get(url)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;表格&#34;&gt;表格&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;| First Column  | Second Column |
| ------------- | ------------- |
| Content Cell1  | Content Cell2  |
| Content Cell3  | Content Cell4  |
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;效果&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;First Column&lt;/th&gt;
&lt;th&gt;Second Column&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell1&lt;/td&gt;
&lt;td&gt;Content Cell2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell3&lt;/td&gt;
&lt;td&gt;Content Cell4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;超链接&#34;&gt;超链接&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[百度](https://www.baidu.com/)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.baidu.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;百度&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;插入图片&#34;&gt;插入图片&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;![](图片文件路径或网址)

![](https://thunderhit.github.io/post/hugo/featured_hu9a15b8275a5635099198061a5e2dc1dd_3029870_720x0_resize_lanczos_2.png)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;效果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://thunderhit.github.io/post/hugo/featured_hu9a15b8275a5635099198061a5e2dc1dd_3029870_720x0_resize_lanczos_2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;任务清单&#34;&gt;任务清单&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;某日任务清单
- [x] 6点起床
- [ ] 步数达到10000步
- [x] 读一小时书
- [x] 日消费不超过50元
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;效果&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6点起床&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 步数达到10000步&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 读一小时书&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 日消费不超过50元&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;数学公式&#34;&gt;数学公式&lt;/h2&gt;
&lt;p&gt;在markdown中用&lt;code&gt;$&lt;/code&gt;夹住Latex公式表达式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$\lim_{x \to \infty} \exp(-x) = 0$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;效果如下&lt;/p&gt;
&lt;p&gt;$\lim_{x \to \infty} \exp(-x) = 0$&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;mermaid图表&#34;&gt;mermaid图表&lt;/h2&gt;
&lt;p&gt;Typora中可以绘制流程图、序列图、状态图、甘特图、饼形图、类图等，这里以流程图为例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;​```mermaid
graph LR
	A--&amp;gt;B
	B--&amp;gt;C
	C--&amp;gt;D
​```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;效果&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR
	A--&amp;gt;B
	B--&amp;gt;C
	C--&amp;gt;D
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;更多mermaid可以看&lt;br&gt;
&lt;a href=&#34;https://thunderhit.github.io/post/mermaid/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在Markdown中用mermaid语法绘制图表&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;支持&#34;&gt;支持&lt;/h2&gt;
&lt;p&gt;分享不易，谢谢大家点赞分享和红包^_^&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/my_zanshang_qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mac电脑Python环境配置</title>
      <link>https://thunderhit.github.io/post/python%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AEmac/</link>
      <pubDate>Fri, 19 Jun 2020 16:41:32 +0800</pubDate>
      <guid>https://thunderhit.github.io/post/python%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AEmac/</guid>
      <description>&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    Anaconda和Python都是python。一定要记住二选其一，不要都安装，不然在学习python第三方包安装的时，你会遇到一些麻烦。如果之前没安装过两个软件，建议从头到尾按照我的视频进行电脑配置
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#mac环境配置&#34;&gt;Mac环境配置&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#软件包下载&#34;&gt;软件包下载&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#一python安装&#34;&gt;一、Python安装&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#命令行打开的方法&#34;&gt;命令行打开的方法&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#二pip3设置&#34;&gt;二、pip3设置&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#21-更改pip3镜像&#34;&gt;2.1 更改pip3镜像&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#22-使用方法&#34;&gt;2.2 使用方法&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#三jupyter-notebook&#34;&gt;三、Jupyter notebook&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#31-安装&#34;&gt;3.1 安装&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#32-调用&#34;&gt;3.2 调用&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#33-常用快捷键&#34;&gt;3.3 常用快捷键&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#四tips&#34;&gt;四、Tips&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#支持&#34;&gt;支持&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;h1 id=&#34;mac环境配置&#34;&gt;Mac环境配置&lt;/h1&gt;
&lt;h2 id=&#34;软件包下载&#34;&gt;软件包下载&lt;/h2&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    链接:https://pan.baidu.com/s/1tbgGBcAnYSMZXp80F0nM1Q  密码:t307
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;iframe
    src=&#34;//player.bilibili.com/player.html?bvid=BV1zg4y1q7H6&amp;page=1&#34;
    scrolling=&#34;no&#34;
    height=&#34;768px&#34;
    width=&#34;1024px&#34;
    frameborder=&#34;no&#34;
    framespacing=&#34;0&#34;
    allowfullscreen=&#34;true&#34;
&gt;
&lt;/iframe&gt;

&lt;br&gt;
&lt;h2 id=&#34;一python安装&#34;&gt;一、Python安装&lt;/h2&gt;
&lt;p&gt;官网  &lt;a href=&#34;https://www.python.org/&#34;&gt;https://www.python.org/&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    mac自带python2，为了与python2区别，凡是在命令行中使用pip和python，我们都要加上3。
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;安装成功的标准是==命令行可以调用python3==&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ python3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;命令行打开的方法&#34;&gt;命令行打开的方法&lt;/h3&gt;
&lt;p&gt;==command+空格== 启动  ==聚焦搜索Spotlight==，再输入terminal&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;二pip3设置&#34;&gt;二、pip3设置&lt;/h2&gt;
&lt;p&gt;pip3是python的命令行安装工具，可以帮我们安装第三方库。&lt;/p&gt;
&lt;h3 id=&#34;21-更改pip3镜像&#34;&gt;2.1 更改pip3镜像&lt;/h3&gt;
&lt;p&gt;为了保证安装的速度和成功率，命令行执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip3 config set global.index-url https://mirrors.aliyun.com/pypi/simple/
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;22-使用方法&#34;&gt;2.2 使用方法&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;pip3 install packagename
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;三jupyter-notebook&#34;&gt;三、Jupyter notebook&lt;/h2&gt;
&lt;h3 id=&#34;31-安装&#34;&gt;3.1 安装&lt;/h3&gt;
&lt;p&gt;命令行执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip3 install jupyter
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;32-调用&#34;&gt;3.2 调用&lt;/h3&gt;
&lt;p&gt;命令行执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jupyter notebook
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;33-常用快捷键&#34;&gt;3.3 常用快捷键&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;jupyter内快捷键&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ESC+A（ESC+B）&lt;/td&gt;
&lt;td&gt;当前单元格上(下)新建一个新的Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D+D&lt;/td&gt;
&lt;td&gt;删除当前单元格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Shift+Enter&lt;/td&gt;
&lt;td&gt;执行单元格内的Python代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ESC+M&lt;/td&gt;
&lt;td&gt;单元格由代码模式转为Markdown标记模式&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Markdown语法特别好用，强烈建议学习，顺便安装一个Typora软件
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;四tips&#34;&gt;四、Tips&lt;/h2&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    环境配置太难，而且有时候电脑还会出现一些视频里出现不了的问题。这时不妨在==淘宝==搜&lt;strong&gt;python环境配置&lt;/strong&gt;，寻找一对一远程协助
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;../../img/%E6%B7%98%E5%AE%9D.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;支持&#34;&gt;支持&lt;/h2&gt;
&lt;p&gt;分享不易，谢谢大家分享（或红包）支持^_^&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/my_zanshang_qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python内置常用函数</title>
      <link>https://thunderhit.github.io/post/09-%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</link>
      <pubDate>Fri, 19 Jun 2020 16:39:11 +0800</pubDate>
      <guid>https://thunderhit.github.io/post/09-%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</guid>
      <description>&lt;p&gt;有三大类内置函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数学相关函数&lt;/li&gt;
&lt;li&gt;类型转化函数&lt;/li&gt;
&lt;li&gt;功能函数&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    函数名加粗的是都是重点
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#数学相关&#34;&gt;数学相关&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#类型转换&#34;&gt;类型转换&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#功能函数&#34;&gt;功能函数&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#eval&#34;&gt;eval()&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#ziplst1-lst2lst3&#34;&gt;zip(lst1, lst2,lst3&amp;hellip;)&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#typehelp&#34;&gt;type/help&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#mapfunc-lst映射运算&#34;&gt;map(func, lst)映射运算&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#printvalue-endn&#34;&gt;print(value, end=&amp;rsquo;\n&amp;rsquo;)&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#openfile-moder-encodingnone&#34;&gt;open(file, mode=&#39;r&amp;rsquo;, encoding=None)&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#重点函数&#34;&gt;重点函数&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#支持&#34;&gt;支持&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;iframe
    src=&#34;//player.bilibili.com/player.html?bvid=BV1eb411h7sP&amp;page=11&#34;
    scrolling=&#34;no&#34;
    height=&#34;768px&#34;
    width=&#34;1024px&#34;
    frameborder=&#34;no&#34;
    framespacing=&#34;0&#34;
    allowfullscreen=&#34;true&#34;
&gt;
&lt;/iframe&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;数学相关&#34;&gt;数学相关&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;th&gt;例子&lt;/th&gt;
&lt;th&gt;运行结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;abs(a)&lt;/td&gt;
&lt;td&gt;对a取绝对值&lt;/td&gt;
&lt;td&gt;abs(-1)&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;max(lst)、min(lst)&lt;/td&gt;
&lt;td&gt;寻找lst中的最大、最小值&lt;/td&gt;
&lt;td&gt;max([3, 2, 9])&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sum(lst)&lt;/td&gt;
&lt;td&gt;对lst内所有数字求和&lt;/td&gt;
&lt;td&gt;sum([3, 2, 9])&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;sorted(lst， reverse)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;对lst排序； 参数reverse为布尔值控制升降序&lt;/td&gt;
&lt;td&gt;sorted([3, 2, 9])&lt;/td&gt;
&lt;td&gt;[2, 3, 9]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;range(start, end, step)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;生成以步长step，生成从start到end的数列,默认step=1，结果取不到end&lt;/td&gt;
&lt;td&gt;list(range(1,5))&lt;/td&gt;
&lt;td&gt;[1, 2, 3,4]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#取绝对值
abs(-1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#取最大
max([3, 2, 9])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;9
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#取最小
min([3, 2, 9])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#求和
sum([3, 2, 9])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;14
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#排序
sorted([3,2,9])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[2, 3, 9]
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#排序(方向调整)
sorted([3,2,9], reverse=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[9, 3, 2]
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#生成序列
list(range(1, 10))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4, 5, 6, 7, 8, 9]
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list(range(1, 10, 2))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1, 3, 5, 7, 9]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;类型转换&#34;&gt;类型转换&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;th&gt;例子&lt;/th&gt;
&lt;th&gt;运行结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;int(string)&lt;/td&gt;
&lt;td&gt;将字符串数改为整数型&lt;/td&gt;
&lt;td&gt;int(&amp;lsquo;9&amp;rsquo;)&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float(int/str)&lt;/td&gt;
&lt;td&gt;将int或str改为浮点型&lt;/td&gt;
&lt;td&gt;float(9)、float(&amp;lsquo;9&amp;rsquo;)&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list(iterable)&lt;/td&gt;
&lt;td&gt;将可迭代对象为列表。这里的iterable可以为字符串，可以是列表&lt;/td&gt;
&lt;td&gt;list(range(1,5))&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[1,2,3,4] &lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;enumerate(lst)&lt;/td&gt;
&lt;td&gt;返回带有索引值的序列seq,&lt;strong&gt;需要list(seq)处理后才能看到seq&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;list(enumerate([&amp;lsquo;a&amp;rsquo;, &amp;lsquo;b&amp;rsquo;, &amp;lsquo;c&amp;rsquo;]))&lt;/td&gt;
&lt;td&gt;[(0,&amp;lsquo;a&amp;rsquo;), (1, &amp;lsquo;b&amp;rsquo;), (2, &amp;lsquo;c&amp;rsquo;)]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tuple(lst)&lt;/td&gt;
&lt;td&gt;将lst变为tuple&lt;/td&gt;
&lt;td&gt;tuple([1,2,3])&lt;/td&gt;
&lt;td&gt;(1,2,3)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;set(lst)&lt;/td&gt;
&lt;td&gt;将lst变为集合&lt;/td&gt;
&lt;td&gt;set([1,4,4,4,3])&lt;/td&gt;
&lt;td&gt;{1,3,4}&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = 9
b = 9

a+b
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;18
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#变转化为整数
int(&#39;9&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;9
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#转化为小数
float(&#39;9&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;9.0
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;float(9)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;9.0
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#转化为列表
list(range(1, 5))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#给列表中每个元素分配一个索引值
names = [&#39;张三&#39;, &#39;李四&#39;, &#39;王五&#39;]

list(enumerate(names))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[(0, &#39;张三&#39;), (1, &#39;李四&#39;), (2, &#39;王五&#39;)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;功能函数&#34;&gt;功能函数&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;th&gt;例子&lt;/th&gt;
&lt;th&gt;运行结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;eval(expression)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;执行一个字符串表达式&lt;/td&gt;
&lt;td&gt;eval(&amp;lsquo;1+1&amp;rsquo;)&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;zip(lst1,lst2&amp;hellip;)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;将lst1,lst2&amp;hellip;合并,返回zip对象。&lt;strong&gt;需要list处理一下zip对象&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;list(zip([1,2,3],[4,5,6]))&lt;/td&gt;
&lt;td&gt;[(1, 4), (2, 5), (3, 6)]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;type(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;查看X的类型&lt;/td&gt;
&lt;td&gt;type(&amp;lsquo;2&amp;rsquo;)&lt;/td&gt;
&lt;td&gt;&amp;lt;class &amp;lsquo;str&#39;&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;help(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;查看X的相关信息&lt;/td&gt;
&lt;td&gt;help([1, 2])&lt;/td&gt;
&lt;td&gt;Help on list object..&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;map(func, lst)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;对lst中的每一个个体都进行func操作&lt;/td&gt;
&lt;td&gt;list(map(sum, [[1,1], [1,2]]))&lt;/td&gt;
&lt;td&gt;[2, 3]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;print(value, end=&amp;rsquo;\n&amp;rsquo;)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;打印value&lt;/td&gt;
&lt;td&gt;print(&amp;lsquo;abc&amp;rsquo;)&lt;/td&gt;
&lt;td&gt;abc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;open(file， encoding)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;打开file文件， encoding是file的文件编码&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;eval&#34;&gt;eval()&lt;/h3&gt;
&lt;p&gt;eval(str_expression)&lt;/p&gt;
&lt;p&gt;str_expression 是字符串表达式，可以是变量、函数等&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = 9
b = 9
c = &#39;a+b&#39;

print(a+b)
print(c)
print(eval(c))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;18
a+b
18
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;eval(&#39;a+b&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;18
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d = &#39;hello world&#39;
print(&#39;d&#39;)
print(eval(&#39;d&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;d
hello world
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def hello():
    print(&#39;hello python&#39;)
    
print(&#39;hello()&#39;)

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;hello()
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;eval(&#39;hello()&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;hello python
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;ziplst1-lst2lst3&#34;&gt;zip(lst1, lst2,lst3&amp;hellip;)&lt;/h3&gt;
&lt;p&gt;将lst1， lst2， lst3按照顺序进行合并&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;names = [&#39;David&#39;, &#39;Mary&#39;, &#39;Henry&#39;, &#39;Unique&#39;]
sexs = [&#39;male&#39;, &#39;femal&#39;, &#39;male&#39;, &#39;male&#39;]
ages = [25, 22, 30, 40]

list(zip(names, sexs, ages))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[(&#39;David&#39;, &#39;male&#39;, 25),
 (&#39;Mary&#39;, &#39;femal&#39;, 22),
 (&#39;Henry&#39;, &#39;male&#39;, 30),
 (&#39;Unique&#39;, &#39;male&#39;, 40)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;typehelp&#34;&gt;type/help&lt;/h3&gt;
&lt;p&gt;查看数据类型、查看感兴趣对象的介绍&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = [1,3,5]
type(a)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;list
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;help(a)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Help on list object:

class list(object)
 |  list(iterable=(), /)
 |  
 |  Built-in mutable sequence.
 |  
 |  If no argument is given, the constructor creates a new empty list.
 |  The argument must be an iterable if specified.
 |  
 |  Methods defined here:
 |  
.........
 |  append(self, object, /)
 |      Append object to the end of the list.
 |  
 |  
 |  count(self, value, /)
 |      Return number of occurrences of value.
 |  
 |  extend(self, iterable, /)
 |      Extend list by appending elements from the iterable.
 |  
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(print)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;builtin_function_or_method
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;help(print)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Help on built-in function print in module builtins:

print(...)
    print(value, ..., sep=&#39; &#39;, end=&#39;\n&#39;, file=sys.stdout, flush=False)
    
    Prints the values to a stream, or to sys.stdout by default.
    Optional keyword arguments:
    file:  a file-like object (stream); defaults to the current sys.stdout.
    sep:   string inserted between values, default a space.
    end:   string appended after the last value, default a newline.
    flush: whether to forcibly flush the stream.
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h3 id=&#34;mapfunc-lst映射运算&#34;&gt;map(func, lst)映射运算&lt;/h3&gt;
&lt;p&gt;将func运算映射到lst上每个元素&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lst = [[1,1], [1,2], [1,2], [1,2], [1,2], [1,2], [1,2]]

res = map(sum, lst)
list(res)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[2, 3, 3, 3, 3, 3, 3]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;printvalue-endn&#34;&gt;print(value, end=&amp;rsquo;\n&amp;rsquo;)&lt;/h3&gt;
&lt;p&gt;打印value，默认使用换行结束&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;help(print)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Help on built-in function print in module builtins:

print(...)
    print(value, ..., sep=&#39; &#39;, end=&#39;\n&#39;, file=sys.stdout, flush=False)
    
    Prints the values to a stream, or to sys.stdout by default.
    Optional keyword arguments:
    file:  a file-like object (stream); defaults to the current sys.stdout.
    sep:   string inserted between values, default a space.
    end:   string appended after the last value, default a newline.
    flush: whether to forcibly flush the stream.
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;hello world!&#39;)
print(&#39;hello python!&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;hello world!
hello python!
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;hello world!&#39;, end=&#39;\t&#39;)
print(&#39;hello python!&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;hello world!	hello python!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;openfile-moder-encodingnone&#34;&gt;open(file, mode=&#39;r&amp;rsquo;, encoding=None)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;file 文件路径&lt;/li&gt;
&lt;li&gt;mode 操作方式们，最常用的是r和a+。r读取， a+是追加写入&lt;/li&gt;
&lt;li&gt;encoding 编码方式 ，常见的文件编码方式主要是utf-8和gbk&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;读取返回io对象&lt;/p&gt;
&lt;p&gt;io对象有read()方法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;相对路径&lt;/p&gt;
&lt;p&gt;data&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;绝对路径&lt;/p&gt;
&lt;p&gt;C:Users\thunderhit\Desktop\Python数据分析入门\02-Python语法入门\data&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    建议大家都要用相对路径
  &lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 读取数据
open(&#39;data/test.txt&#39;, encoding=&#39;utf-8&#39;).read()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;章节设计\n\n第一部分  环境配置\n第二部分  快速入门python\n第三部分  网络爬虫\n第四部分  简单的文本分析\n第五部分  进阶文本分析&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 新建文件/在已有的文件内插入内容
f = open(&#39;data/test2.txt&#39;, mode=&#39;a+&#39;, encoding=&#39;utf-8&#39;)
f.write(&#39;我在学python，现在是下午五点&#39;)
f.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 新建文件/在已有的文件内插入内容
f = open(&#39;data/test2.txt&#39;, mode=&#39;a+&#39;, encoding=&#39;utf-8&#39;)
f.write(&#39;\nLife is short, so to learn Python&#39;)
f.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 新建文件/在已有的文件内插入内容
f = open(&#39;data/test2.txt&#39;, mode=&#39;a+&#39;, encoding=&#39;utf-8&#39;)
f.write(&#39;\nLife is short, so to learn Python&#39;)
f.write(&#39;\nLife is short, so to learn music&#39;)
f.write(&#39;\nLife is short, so to learn english&#39;)
f.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;重点函数&#34;&gt;重点函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; sorted(lst， ascending)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; range(start, end, step)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; enumerate(lst)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; eval(expression)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; zip(lst1, lst2..)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; map(func, lst)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; print(x)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; open(file, mode, encoding)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;支持&#34;&gt;支持&lt;/h2&gt;
&lt;p&gt;分享不易，谢谢大家分享（或红包）支持^_^&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/my_zanshang_qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>python常见错误及其解决办法</title>
      <link>https://thunderhit.github.io/post/13-%E5%88%9D%E5%AD%A6python%E5%B8%B8%E5%87%BA%E9%94%99%E8%AF%AF%E6%B1%87%E6%80%BB/</link>
      <pubDate>Fri, 19 Jun 2020 16:39:11 +0800</pubDate>
      <guid>https://thunderhit.github.io/post/13-%E5%88%9D%E5%AD%A6python%E5%B8%B8%E5%87%BA%E9%94%99%E8%AF%AF%E6%B1%87%E6%80%BB/</guid>
      <description>&lt;p&gt;学习编程就是在遇到错误、认识错误、解决错误的过程。遇到错误，大家要发挥主观能动性，用自己的英文阅读能力去先读一下英文报错提示，一般情况下错误提示会告诉你是什么类型的错误，错误出在哪一行。&lt;/p&gt;
&lt;p&gt;再结合百度谷歌，80%以上的问题都能解决。现在我们了解一下常见的问题都有哪些，如何克服这些问题。&lt;/p&gt;
&lt;iframe
    src=&#34;//player.bilibili.com/player.html?bvid=BV1eb411h7sP&amp;page=15&#34;
    scrolling=&#34;no&#34;
    height=&#34;768px&#34;
    width=&#34;1024px&#34;
    frameborder=&#34;no&#34;
    framespacing=&#34;0&#34;
    allowfullscreen=&#34;true&#34;
&gt;
&lt;/iframe&gt;

&lt;br&gt;
&lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#1-忘记写冒号&#34;&gt;1. 忘记写冒号&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#2-误用-&#34;&gt;2. 误用 &lt;code&gt;=&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#3-错误的缩进&#34;&gt;3. 错误的缩进&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#4-变量没有定义&#34;&gt;4. 变量没有定义&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#5-中英文输入法导致的错误&#34;&gt;5. 中英文输入法导致的错误&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#6-不同数据类型的拼接&#34;&gt;6. 不同数据类型的拼接&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#7-索引位置问题&#34;&gt;7. 索引位置问题&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#8-使用字典中不存在的键&#34;&gt;8. 使用字典中不存在的键&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#9-忘了括号&#34;&gt;9. 忘了括号&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#10-漏传参数&#34;&gt;10. 漏传参数&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#11-缺失依赖库&#34;&gt;11. 缺失依赖库&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#12-使用了python中的关键词&#34;&gt;12. 使用了python中的关键词&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#13-文件编码问题&#34;&gt;13. 文件编码问题&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#那怎么找到正确的编码参数呢&#34;&gt;那怎么找到正确的编码参数呢？&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#14-路径字符串写法&#34;&gt;14. 路径字符串写法&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#支持&#34;&gt;支持&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;h3 id=&#34;1-忘记写冒号&#34;&gt;1. 忘记写冒号&lt;/h3&gt;
&lt;p&gt;在 if、elif、else、for、while、def语句后面忘记添加 &lt;code&gt;:&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;age = 42

if age == 42
    print(&#39;Hello!&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  File &amp;quot;&amp;lt;ipython-input-10-1f5acea116cf&amp;gt;&amp;quot;, line 3
    if age == 42
                ^
SyntaxError: invalid syntax
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;age = 42

if age == 42:
    print(&#39;Hello!&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Hello!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-误用-&#34;&gt;2. 误用 &lt;code&gt;=&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;=&lt;/code&gt; 是赋值操作，而判断两个值是否相等是 &lt;code&gt;==&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;gender = &#39;男&#39;

if gender = &#39;男&#39;:
    print(&#39;Man&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  File &amp;quot;&amp;lt;ipython-input-12-c3ceea5a9004&amp;gt;&amp;quot;, line 3
    if gender = &#39;男&#39;:
              ^
SyntaxError: invalid syntax
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;gender = &#39;男&#39;

if gender == &#39;男&#39;:
    print(&#39;Man&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Man
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-错误的缩进&#34;&gt;3. 错误的缩进&lt;/h3&gt;
&lt;p&gt;Python用缩进区分代码块，常见的错误用法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;Hello!&#39;)
 print(&#39;Howdy!&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  File &amp;quot;&amp;lt;ipython-input-14-784bdb6e1df5&amp;gt;&amp;quot;, line 2
    print(&#39;Howdy!&#39;)
    ^
IndentationError: unexpected indent
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;Hello!&#39;)
print(&#39;Howdy!&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Hello!
Howdy!
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;num = 25
if num == 25:
print(&#39;Hello!&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  File &amp;quot;&amp;lt;ipython-input-16-8e4debcdf119&amp;gt;&amp;quot;, line 3
    print(&#39;Hello!&#39;)
        ^
IndentationError: expected an indented block
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;num = 25
if num == 25:
    print(&#39;Hello!&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Hello!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-变量没有定义&#34;&gt;4. 变量没有定义&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if c in [&#39;New York&#39;, &#39;Bei Jing&#39;, &#39;Tokyo&#39;]:
    print(&#39;This is a mega city&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

NameError                                 Traceback (most recent call last)

&amp;lt;ipython-input-21-d91d0b36da73&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 if c in [&#39;New York&#39;, &#39;Bei Jing&#39;, &#39;Tokyo&#39;]:
      2     print(&#39;This is a mega c&#39;)


NameError: name &#39;c&#39; is not defined
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;city =&#39;New York&#39;
if city in [&#39;New York&#39;, &#39;Bei Jing&#39;, &#39;Tokyo&#39;]:
    print(&#39;This is a mega city&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;This is a mega city
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;5-中英文输入法导致的错误&#34;&gt;5. 中英文输入法导致的错误&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;英文冒号&lt;/li&gt;
&lt;li&gt;英文括号&lt;/li&gt;
&lt;li&gt;英文逗号&lt;/li&gt;
&lt;li&gt;英文单双引号&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if 5&amp;gt;3：
    print(&#39;5比3大&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  File &amp;quot;&amp;lt;ipython-input-23-47f8b985b82d&amp;gt;&amp;quot;, line 1
    if 5&amp;gt;3：
          ^
SyntaxError: invalid character in identifier
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if 5&amp;gt;3:
    print(&#39;5比3大&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;5比3大
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;spam = [1, 2， 3]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  File &amp;quot;&amp;lt;ipython-input-26-a003060d051a&amp;gt;&amp;quot;, line 1
    spam = [1, 2， 3]
                ^
SyntaxError: invalid character in identifier
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;spam = [1, 2, 3]
spam
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1, 2, 3]
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if 5&amp;gt;3:
    print(&#39;5比3大’)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  File &amp;quot;&amp;lt;ipython-input-30-ac2e4eb87092&amp;gt;&amp;quot;, line 2
    print(&#39;5比3大’)
                 ^
SyntaxError: EOL while scanning string literal
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if 5&amp;gt;3:
    print(&#39;5比3大&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;5比3大
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;6-不同数据类型的拼接&#34;&gt;6. 不同数据类型的拼接&lt;/h3&gt;
&lt;p&gt;同种数据类型  &lt;strong&gt;字符串/列表/元组&lt;/strong&gt;   支持拼接&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字典/集合&lt;/strong&gt;不支持拼接&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;I have &#39; + 12 + &#39; eggs.&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&amp;lt;ipython-input-32-20c7c89a2ec6&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 &#39;I have &#39; + 12 + &#39; eggs.&#39;


TypeError: can only concatenate str (not &amp;quot;int&amp;quot;) to str
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;I have {} eggs.&#39;.format(12)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;I have 12 eggs.&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]+&#39;def&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&amp;lt;ipython-input-35-0e8919333d6b&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]+&#39;def&#39;


TypeError: can only concatenate list (not &amp;quot;str&amp;quot;) to list
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)+[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&amp;lt;ipython-input-36-90742621216d&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)+[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]


TypeError: can only concatenate tuple (not &amp;quot;list&amp;quot;) to tuple
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;set([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])+set([&#39;d&#39;, &#39;e&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&amp;lt;ipython-input-37-ddf5fb1e6c8c&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 set([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])+set([&#39;d&#39;, &#39;e&#39;])


TypeError: unsupported operand type(s) for +: &#39;set&#39; and &#39;set&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;grades1 = {&#39;Mary&#39;:99, &#39;Henry&#39;:77}
grades2 = {&#39;David&#39;:88, &#39;Unique&#39;:89}

grades1+grades2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&amp;lt;ipython-input-38-1b1456844331&amp;gt; in &amp;lt;module&amp;gt;
      2 grades2 = {&#39;David&#39;:88, &#39;Unique&#39;:89}
      3 
----&amp;gt; 4 grades1+grades2


TypeError: unsupported operand type(s) for +: &#39;dict&#39; and &#39;dict&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;7-索引位置问题&#34;&gt;7. 索引位置问题&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;spam = [&#39;cat&#39;, &#39;dog&#39;, &#39;mouse&#39;]
print(spam[5])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

IndexError                                Traceback (most recent call last)

&amp;lt;ipython-input-41-e0a79346266d&amp;gt; in &amp;lt;module&amp;gt;
      1 spam = [&#39;cat&#39;, &#39;dog&#39;, &#39;mouse&#39;]
----&amp;gt; 2 print(spam[5])


IndexError: list index out of range
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;8-使用字典中不存在的键&#34;&gt;8. 使用字典中不存在的键&lt;/h3&gt;
&lt;p&gt;在字典对象中访问 key 可以使用 &lt;code&gt;[]&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;但是如果该 key 不存在，就会导致：KeyError: &amp;lsquo;zebra&amp;rsquo;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;spam = {&#39;cat&#39;: &#39;Zophie&#39;, 
        &#39;dog&#39;: &#39;Basil&#39;, 
        &#39;mouse&#39;: &#39;Whiskers&#39;}

print(spam[&#39;zebra&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

KeyError                                  Traceback (most recent call last)

&amp;lt;ipython-input-42-92c9b44ff034&amp;gt; in &amp;lt;module&amp;gt;
      3         &#39;mouse&#39;: &#39;Whiskers&#39;}
      4 
----&amp;gt; 5 print(spam[&#39;zebra&#39;])


KeyError: &#39;zebra&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;为了避免这种情况，可以使用 get 方法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;spam = {&#39;cat&#39;: &#39;Zophie&#39;, 
        &#39;dog&#39;: &#39;Basil&#39;, 
        &#39;mouse&#39;: &#39;Whiskers&#39;}

print(spam.get(&#39;zebra&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;None
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;key 不存在时，get 默认返回 None&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h3 id=&#34;9-忘了括号&#34;&gt;9. 忘了括号&lt;/h3&gt;
&lt;p&gt;当函数中传入的是函数或者方法时，容易漏写括号&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;spam = {&#39;cat&#39;: &#39;Zophie&#39;, 
        &#39;dog&#39;: &#39;Basil&#39;, 
        &#39;mouse&#39;: &#39;Whiskers&#39;}

print(spam.get(&#39;zebra&#39;)  #end of funtion
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  File &amp;quot;&amp;lt;ipython-input-44-d105cc86097c&amp;gt;&amp;quot;, line 5
    print(spam.get(&#39;zebra&#39;)  #end of funtion
                                            ^
SyntaxError: unexpected EOF while parsing
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;spam = {&#39;cat&#39;: &#39;Zophie&#39;, 
        &#39;dog&#39;: &#39;Basil&#39;, 
        &#39;mouse&#39;: &#39;Whiskers&#39;}

print(spam.get(&#39;zebra&#39;)) 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;None
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;10-漏传参数&#34;&gt;10. 漏传参数&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def diyadd(x, y, z):
    return x+y+z

diyadd(1, 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&amp;lt;ipython-input-46-7184f3f906ca&amp;gt; in &amp;lt;module&amp;gt;
      2     return x+y+z
      3 
----&amp;gt; 4 diyadd(1, 2)


TypeError: diyadd() missing 1 required positional argument: &#39;z&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;diyadd(1, 2, 4)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;11-缺失依赖库&#34;&gt;11. 缺失依赖库&lt;/h3&gt;
&lt;p&gt;电脑中没有相关的库&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import packagename
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

ModuleNotFoundError                       Traceback (most recent call last)

&amp;lt;ipython-input-48-6d7d6f569116&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 import packagename


ModuleNotFoundError: No module named &#39;packagename&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;!pip install packagename
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;12-使用了python中的关键词&#34;&gt;12. 使用了python中的关键词&lt;/h3&gt;
&lt;p&gt;如try、except、def、class、object、None、True、False等&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try = 5
print(try)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  File &amp;quot;&amp;lt;ipython-input-49-508e87fe2ff3&amp;gt;&amp;quot;, line 1
    try = 5
        ^
SyntaxError: invalid syntax
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = 5
print(a)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;5
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def = 6
print(def)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  File &amp;quot;&amp;lt;ipython-input-51-c797890e9b85&amp;gt;&amp;quot;, line 1
    def = 6
        ^
SyntaxError: invalid syntax
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d = 6
print(d)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;6
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h3 id=&#34;13-文件编码问题&#34;&gt;13. 文件编码问题&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd

df = pd.read_csv(&#39;data/twitter_sentiment.csv&#39;)
df.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;UnicodeDecodeError: &#39;utf-8&#39; codec can&#39;t decode bytes in position 7-8: invalid continuation byte
UnicodeDecodeError                        Traceback (most recent call last)

&amp;lt;ipython-input-53-f7ee81cff3e5&amp;gt; in &amp;lt;module&amp;gt;
      1 import pandas as pd
      2 
----&amp;gt; 3 df = pd.read_csv(&#39;data/twitter_sentiment.csv&#39;)
      4 df.head()
pandas\_libs\parsers.pyx in pandas._libs.parsers._string_box_utf8()
UnicodeDecodeError: &#39;utf-8&#39; codec can&#39;t decode bytes in position 7-8: invalid continuation byte
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd

#gbk/utf-8只能解决大部分编码问题，但不能解决全部问题
df = pd.read_csv(&#39;data/twitter_sentiment.csv&#39;, encoding=&#39;gbk&#39;)
df.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

UnicodeDecodeError                        Traceback (most recent call last)

&amp;lt;ipython-input-55-6aa161f42239&amp;gt; in &amp;lt;module&amp;gt;
      2 
      3 #gbk/utf-8只能解决大部分编码问题，但不能解决全部问题
----&amp;gt; 4 df = pd.read_csv(&#39;data/twitter_sentiment.csv&#39;, encoding=&#39;gbk&#39;)
      5 df.head()


c:\users\thunderhit\appdata\local\programs\python\python37-32\lib\site-packages\pandas\io\parsers.py in parser_f(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, dialect, error_bad_lines, warn_bad_lines, delim_whitespace, low_memory, memory_map, float_precision)
    674         )
    675 
-&amp;gt; 1891         self._reader = parsers.TextReader(src, **kwds)
   1892         self.unnamed_cols = self._reader.unnamed_cols
   1893 
   pandas\_libs\parsers.pyx in pandas._libs.parsers.TextReader.__cinit__()
    pandas\_libs\parsers.pyx in pandas._libs.parsers.TextReader._get_header()
    pandas\_libs\parsers.pyx in pandas._libs.parsers.TextReader._tokenize_rows()
    pandas\_libs\parsers.pyx in pandas._libs.parsers.raise_parser_error()
    UnicodeDecodeError: &#39;gbk&#39; codec can&#39;t decode byte 0xbd in position 10717: 	illegal multibyte sequence
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面的程序会提示编码错误， 尝试encoding编码参数传入utf-8、gbk，也没有解决问题。&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;那怎么找到正确的编码参数呢&#34;&gt;那怎么找到正确的编码参数呢？&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import chardet

#读取为二进制数据
binary_data = open(&#39;data/twitter_sentiment.csv&#39;, &#39;rb&#39;).read()

#传给chardet.detect，稍等片刻
chardet.detect(binary_data)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{&#39;encoding&#39;: &#39;Windows-1252&#39;, &#39;confidence&#39;: 0.7291192008535122, &#39;language&#39;: &#39;&#39;}
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd


df = pd.read_csv(&#39;data/twitter_sentiment.csv&#39;, encoding=&#39;Windows-1252&#39;)
df.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;ItemID&lt;/th&gt;
      &lt;th&gt;Sentiment&lt;/th&gt;
      &lt;th&gt;SentimentText&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;is so sad for my APL frie...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;I missed the New Moon trail...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;omg its already 7:30 :O&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;.. Omgaga. Im sooo  im gunna CRy. I&#39;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;i think mi bf is cheating on me!!!   ...&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;14-路径字符串写法&#34;&gt;14. 路径字符串写法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Mac&amp;amp;Win 推荐使用 &lt;code&gt;/&lt;/code&gt; 写法&lt;/li&gt;
&lt;li&gt;如果使用&lt;code&gt;\&lt;/code&gt; 写法，安全起见，请换成&lt;code&gt;\\&lt;/code&gt;  （Mac不支持&lt;code&gt;\\&lt;/code&gt; ）&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;\n
\t
\d
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;open(&#39;data/test.txt&#39;, encoding=&#39;utf-8&#39;).read()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;章节设计\n\n第一部分  环境配置\n第二部分  快速入门python\n第三部分  网络爬虫\n第四部分  简单的文本分析\n第五部分  进阶文本分析&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;open(&#39;data\test.txt&#39;, encoding=&#39;utf-8&#39;).read()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

OSError                                   Traceback (most recent call last)

&amp;lt;ipython-input-59-d855ed58b500&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 open(&#39;data\test.txt&#39;, encoding=&#39;utf-8&#39;).read()


OSError: [Errno 22] Invalid argument: &#39;data\test.txt&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;open(&#39;data\\test.txt&#39;, encoding=&#39;utf-8&#39;).read()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;章节设计\n\n第一部分  环境配置\n第二部分  快速入门python\n第三部分  网络爬虫\n第四部分  简单的文本分析\n第五部分  进阶文本分析&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;open(&#39;data\Test.txt&#39;, encoding=&#39;utf-8&#39;).read()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;章节设计\n\n第一部分  环境配置\n第二部分  快速入门python\n第三部分  网络爬虫\n第四部分  简单的文本分析\n第五部分  进阶文本分析&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;支持&#34;&gt;支持&lt;/h2&gt;
&lt;p&gt;分享不易，谢谢大家分享（或红包）支持^_^&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/my_zanshang_qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python跟英语一样是一门语言</title>
      <link>https://thunderhit.github.io/post/01-python%E8%B7%9F%E8%8B%B1%E8%AF%AD%E4%B8%80%E6%A0%B7%E6%98%AF%E4%B8%80%E9%97%A8%E8%AF%AD%E8%A8%80/</link>
      <pubDate>Fri, 19 Jun 2020 16:39:11 +0800</pubDate>
      <guid>https://thunderhit.github.io/post/01-python%E8%B7%9F%E8%8B%B1%E8%AF%AD%E4%B8%80%E6%A0%B7%E6%98%AF%E4%B8%80%E9%97%A8%E8%AF%AD%E8%A8%80/</guid>
      <description>&lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#输出数字a的绝对数&#34;&gt;输出数字a的绝对数&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#python与英语对比&#34;&gt;Python与英语对比&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#每天积累一点点&#34;&gt;每天积累一点点&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#python是面向对象的编程语言&#34;&gt;Python是面向对象的编程语言&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#python中的数据类型&#34;&gt;Python中的数据类型&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#支持&#34;&gt;支持&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Python中流行这样一句话“Life is short, so we learn Python! ”恭喜你选择Python这门性感的语言，你一定会在学习的过程中感叹“Python大法就是好”~
  &lt;/div&gt;
&lt;/div&gt;
&lt;iframe
    src=&#34;//player.bilibili.com/player.html?bvid=BV1eb411h7sP&amp;page=3&#34;
    scrolling=&#34;no&#34;
    height=&#34;768px&#34;
    width=&#34;1024px&#34;
    frameborder=&#34;no&#34;
    framespacing=&#34;0&#34;
    allowfullscreen=&#34;true&#34;
&gt;
&lt;/iframe&gt;

&lt;br&gt;
&lt;h3 id=&#34;输出数字a的绝对数&#34;&gt;输出数字a的绝对数&lt;/h3&gt;
&lt;p&gt;在学习代码之前，我给大家看一段话&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is such a number a, if a is greater than or equal to 0, we will print a; if a is less than 0, we will print -a&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;相信大家一看就明白了这是求某数的绝对值方法的英文描述。下面我们用精炼的Python语言表示&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = -50

if a &amp;gt;= 0:
    print(a)
else:
    print(-a)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;50
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Python号称是最说&lt;strong&gt;人话&lt;/strong&gt;的编程语言，&lt;strong&gt;人话&lt;/strong&gt;意思就是最接近人类自然语言的表达方式构建代码。
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h3 id=&#34;python与英语对比&#34;&gt;Python与英语对比&lt;/h3&gt;
&lt;p&gt;从上面的例子中，我们已经知道了Python和英语一样都是一种语言，学习语言就需要学习基本的知识点，包括背单词和了解语法。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;英语&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Python&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;例如&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;单词&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;数据类型&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;列表、字符串、字典等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;语法&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;逻辑语句&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;if条件判读语句、for循环语句等&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;br&gt;
&lt;h3 id=&#34;每天积累一点点&#34;&gt;每天积累一点点&lt;/h3&gt;
&lt;p&gt;本部分非必须，仅仅为了展示python也可以作图&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#mac
#!pip3 install matplotlib


#win
!pip install matplotlib
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Looking in indexes: https://mirrors.aliyun.com/pypi/simple/
Requirement already satisfied: matplotlib in c:\users\thunderhit\appdata\local\programs\python\python37-32\lib\site-packages (3.2.1)
Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,&amp;gt;=2.0.1 in c:\users\thunderhit\appdata\local\programs\python\python37-32\lib\site-packages (from matplotlib) (2.4.7)
Requirement already satisfied: cycler&amp;gt;=0.10 in c:\users\thunderhit\appdata\local\programs\python\python37-32\lib\site-packages (from matplotlib) (0.10.0)
Requirement already satisfied: numpy&amp;gt;=1.11 in c:\users\thunderhit\appdata\local\programs\python\python37-32\lib\site-packages (from matplotlib) (1.18.2)
Requirement already satisfied: kiwisolver&amp;gt;=1.0.1 in c:\users\thunderhit\appdata\local\programs\python\python37-32\lib\site-packages (from matplotlib) (1.2.0)
Requirement already satisfied: python-dateutil&amp;gt;=2.1 in c:\users\thunderhit\appdata\local\programs\python\python37-32\lib\site-packages (from matplotlib) (2.8.1)
Requirement already satisfied: six in c:\users\thunderhit\appdata\local\programs\python\python37-32\lib\site-packages (from cycler&amp;gt;=0.10-&amp;gt;matplotlib) (1.14.0)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
import math
%matplotlib inline

ability = 1
scale = 1.01
records = []

days = range(1, 365)
for day in days:
    ability = ability*scale
    records.append(ability)
    
plt.plot(days, records)
plt.title(&#39;Be better everyday!&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Text(0.5, 1.0, &#39;Be better everyday!&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;output_8_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h3 id=&#34;python是面向对象的编程语言&#34;&gt;Python是面向对象的编程语言&lt;/h3&gt;
&lt;p&gt;面向对象是最难理解的部分，这里大家只需要记住&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;类型和对象是紧密绑定的，说对象就是在说类型。&lt;/li&gt;
&lt;li&gt;不同的类型有不同的功能，都是为了更高效的实现人类需求或者数据分析需求&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;类型&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;实例(对象)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;实例(对象)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;方法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;猪&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;村东头老王家的猪&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;把猪把粮食变成肉&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;猪.产肉&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;牛&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;村东头老张家的耕牛&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;把粮食变成畜力&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;牛.耕地&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;列表&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;hobbies = [&#39;跑步&#39;,  &#39;乒乓球&#39;， &#39;篮球&#39;，&#39;篮球&#39;]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;统计某群体爱好的分布, 查看各爱好的人数&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;hobbies.count(&#39;篮球&#39;)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;字符串&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;str1 = &amp;quot;Hello，World!&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;将文本内容由World更改为Python&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;str1.replace(&#39;World&#39;, &#39;Python&#39;)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;字典&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;grade = {&#39;David&#39;:98, &#39;Mary&#39;:88,...}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;方便数据检索&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;grade.get(&#39;David&#39;)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&amp;hellip;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&amp;hellip;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&amp;hellip;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;br&gt;
&lt;h3 id=&#34;python中的数据类型&#34;&gt;Python中的数据类型&lt;/h3&gt;
&lt;p&gt;不同的数据类型适合处理不同的数据，有不同的应用场景。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;数据类型&lt;/th&gt;
&lt;th&gt;例子&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;数字&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a = 5&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;字符串&lt;/td&gt;
&lt;td&gt;&lt;code&gt;my_str = &amp;quot;abcdefg&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;列表&lt;/td&gt;
&lt;td&gt;&lt;code&gt;my_list = [1, 2, 3]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;元组&lt;/td&gt;
&lt;td&gt;&lt;code&gt;my_tuple = (1, 2, 3)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;字典&lt;/td&gt;
&lt;td&gt;&lt;code&gt;my_dict = {&#39;David&#39;: 25, &#39;Mark&#39;:30}&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;空值&lt;/td&gt;
&lt;td&gt;&lt;code&gt;None&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;支持&#34;&gt;支持&lt;/h2&gt;
&lt;p&gt;分享不易，谢谢大家分享（或红包）支持^_^&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/my_zanshang_qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Windows电脑Python环境配置</title>
      <link>https://thunderhit.github.io/post/python%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AEwin/</link>
      <pubDate>Fri, 19 Jun 2020 16:39:11 +0800</pubDate>
      <guid>https://thunderhit.github.io/post/python%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AEwin/</guid>
      <description>&lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#win环境配置&#34;&gt;Win环境配置&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#软件包下载&#34;&gt;软件包下载&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#一python安装&#34;&gt;一、Python安装&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#安装注意事项&#34;&gt;安装注意事项&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#二pip配置&#34;&gt;二、pip配置&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#21-更改pip镜像&#34;&gt;2.1 更改pip镜像&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#22-使用方法&#34;&gt;2.2 使用方法&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#三jupyter-notebook&#34;&gt;三、Jupyter notebook&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#31-安装&#34;&gt;3.1 安装&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#32-调用&#34;&gt;3.2 调用&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#33-常用快捷键&#34;&gt;3.3 常用快捷键&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#四tips&#34;&gt;四、Tips&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#支持&#34;&gt;支持&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    Anaconda和Python都是python。一定要记住二选其一，不要都安装，不然在学习python第三方包安装的时，你会遇到一些麻烦。如果之前没安装过两个软件，建议从头到尾按照我的视频进行电脑配置
  &lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;win环境配置&#34;&gt;Win环境配置&lt;/h1&gt;
&lt;h2 id=&#34;软件包下载&#34;&gt;软件包下载&lt;/h2&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    链接:https://pan.baidu.com/s/1tbgGBcAnYSMZXp80F0nM1Q  密码:t307
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;iframe
    src=&#34;//player.bilibili.com/player.html?bvid=BV1zg4y1q7H6&amp;page=2&#34;
    scrolling=&#34;no&#34;
    height=&#34;768px&#34;
    width=&#34;1024px&#34;
    frameborder=&#34;no&#34;
    framespacing=&#34;0&#34;
    allowfullscreen=&#34;true&#34;
&gt;
&lt;/iframe&gt;

&lt;br&gt;
&lt;h2 id=&#34;一python安装&#34;&gt;一、Python安装&lt;/h2&gt;
&lt;p&gt;官网  &lt;a href=&#34;https://www.python.org/&#34;&gt;https://www.python.org/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;安装注意事项&#34;&gt;安装注意事项&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;推荐选择3.7.5.  最新的bug比较多&lt;/li&gt;
&lt;li&gt;==选择&lt;strong&gt;Install Now&lt;/strong&gt;默认安装方式==&lt;/li&gt;
&lt;li&gt;勾选&lt;strong&gt;Add Python 3.x to PATH&lt;/strong&gt;，这样命令行可以调用python&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;二pip配置&#34;&gt;二、pip配置&lt;/h2&gt;
&lt;p&gt;pip是python的命令行安装工具，可以帮我们安装第三方库。&lt;/p&gt;
&lt;h3 id=&#34;21-更改pip镜像&#34;&gt;2.1 更改pip镜像&lt;/h3&gt;
&lt;p&gt;为了保证安装的速度和成功率，命令行执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/ 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;22-使用方法&#34;&gt;2.2 使用方法&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;pip install packagename
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;三jupyter-notebook&#34;&gt;三、Jupyter notebook&lt;/h2&gt;
&lt;h3 id=&#34;31-安装&#34;&gt;3.1 安装&lt;/h3&gt;
&lt;p&gt;命令行执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install jupyter
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;32-调用&#34;&gt;3.2 调用&lt;/h3&gt;
&lt;p&gt;命令行执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jupyter notebook
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;33-常用快捷键&#34;&gt;3.3 常用快捷键&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;jupyter内快捷键&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ESC+A（ESC+B）&lt;/td&gt;
&lt;td&gt;当前单元格上(下)新建一个新的Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D+D&lt;/td&gt;
&lt;td&gt;删除当前单元格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Shift+Enter&lt;/td&gt;
&lt;td&gt;执行单元格内的Python代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ESC+M&lt;/td&gt;
&lt;td&gt;单元格由代码模式转为标记模式&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Markdown语法特别好用，强烈建议学习，顺便安装一个Typora软件
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;四tips&#34;&gt;四、Tips&lt;/h2&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    环境配置太难，而且有时候电脑还会出现一些视频里出现不了的问题。这时不妨在==淘宝==搜&lt;strong&gt;python环境配置&lt;/strong&gt;，寻找一对一远程协助
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;../../img/%E6%B7%98%E5%AE%9D.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&#34;支持&#34;&gt;支持&lt;/h2&gt;
&lt;p&gt;分享不易，谢谢大家分享（或红包）支持^_^&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/my_zanshang_qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>内置库-数据存储csv库</title>
      <link>https://thunderhit.github.io/post/11-%E5%86%85%E7%BD%AE%E5%BA%93%E4%B9%8Bcsv%E6%96%87%E4%BB%B6%E5%BA%93/</link>
      <pubDate>Fri, 19 Jun 2020 16:39:11 +0800</pubDate>
      <guid>https://thunderhit.github.io/post/11-%E5%86%85%E7%BD%AE%E5%BA%93%E4%B9%8Bcsv%E6%96%87%E4%BB%B6%E5%BA%93/</guid>
      <description>&lt;p&gt;在编程中一般不适用excel，而是用一种很像excel的csv来存储数据。而且Excel软件可以打开csv的。&lt;/p&gt;
&lt;iframe
    src=&#34;//player.bilibili.com/player.html?bvid=BV1eb411h7sP&amp;page=13&#34;
    scrolling=&#34;no&#34;
    height=&#34;768px&#34;
    width=&#34;1024px&#34;
    frameborder=&#34;no&#34;
    framespacing=&#34;0&#34;
    allowfullscreen=&#34;true&#34;
&gt;
&lt;/iframe&gt;

&lt;br&gt;
&lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#csv存储数据代码步骤&#34;&gt;csv存储数据代码步骤&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#很多数据的存储&#34;&gt;很多数据的存储&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#支持&#34;&gt;支持&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;csv存储数据代码步骤&#34;&gt;csv存储数据代码步骤&lt;/h3&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    代码看不懂没关系，能背过最好。背不过也没关系，能理解代码功能，而且亲自上手调试过，调试正常无误的代码可以加入你的代码笔记本中，然后以后需要的时候复制粘贴修改参数即可
  &lt;/div&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;新建一个csv文件&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import csv
path = &#39;data/test.csv&#39;
csvf = open(path, &#39;a+&#39;, encoding=&#39;utf-8&#39;, newline=&#39;&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;定义字段名，并初始化csv文件为writer&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fieldnames = [&#39;name&#39;, &#39;age&#39;]
writer = csv.DictWriter(csvf, fieldnames=fieldnames)
writer.writeheader()
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;将待存储数据整理为字典格式&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;test_data = {&#39;name&#39;: &#39;David&#39;,
             &#39;age&#39;: 25}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;用writer往csv中存储数据&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;writer.writerow(test_data)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;最后记得关闭csv文件&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;csvf.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import csv

csvf = open(&#39;data/test1.csv&#39;, &#39;a+&#39;, encoding=&#39;utf-8&#39;, newline=&#39;&#39;)
fieldnames = [&#39;name&#39;, &#39;age&#39;]
writer = csv.DictWriter(csvf, fieldnames=fieldnames)
writer.writeheader()


csvf.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import csv

csvf = open(&#39;data/test2.csv&#39;, &#39;a+&#39;, encoding=&#39;utf-8&#39;, newline=&#39;&#39;)
fieldnames = [&#39;name&#39;, &#39;age&#39;]
writer = csv.DictWriter(csvf, fieldnames=fieldnames)
writer.writeheader()

test_data = {&#39;name&#39;: &#39;David&#39;,
             &#39;age&#39;: 25}
writer.writerow(test_data)

csvf.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;很多数据的存储&#34;&gt;很多数据的存储&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;datas = [{&#39;name&#39;: &#39;David&#39;, &#39;age&#39;: 25}, 
         {&#39;name&#39;: &#39;Mary&#39;, &#39;age&#39;: 30},
         {&#39;name&#39;: &#39;Henry&#39;, &#39;age&#39;: 35}]

datas
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[{&#39;name&#39;: &#39;David&#39;, &#39;age&#39;: 25},
 {&#39;name&#39;: &#39;Mary&#39;, &#39;age&#39;: 30},
 {&#39;name&#39;: &#39;Henry&#39;, &#39;age&#39;: 35}]
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import csv

csvf = open(&#39;data/test2.csv&#39;, &#39;a+&#39;, encoding=&#39;utf-8&#39;, newline=&#39;&#39;)
fieldnames = [&#39;name&#39;, &#39;age&#39;]
writer = csv.DictWriter(csvf, fieldnames=fieldnames)
writer.writeheader()

for data in datas:
    writer.writerow(data)

csvf.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;支持&#34;&gt;支持&lt;/h2&gt;
&lt;p&gt;分享不易，谢谢大家分享（或红包）支持^_^&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/my_zanshang_qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>内置库-文件路径pathlib库</title>
      <link>https://thunderhit.github.io/post/10-%E5%86%85%E7%BD%AE%E5%BA%93%E4%B9%8B%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84pathlib%E5%BA%93/</link>
      <pubDate>Fri, 19 Jun 2020 16:39:11 +0800</pubDate>
      <guid>https://thunderhit.github.io/post/10-%E5%86%85%E7%BD%AE%E5%BA%93%E4%B9%8B%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84pathlib%E5%BA%93/</guid>
      <description>&lt;p&gt;路径是可以让程序知道待操作的文件在哪里，python中有os和pathlib两个内置的路径库，而pathlib是python中目前最好用的路径库。&lt;/p&gt;
&lt;iframe
    src=&#34;//player.bilibili.com/player.html?bvid=BV1eb411h7sP&amp;page=12&#34;
    scrolling=&#34;no&#34;
    height=&#34;768px&#34;
    width=&#34;1024px&#34;
    frameborder=&#34;no&#34;
    framespacing=&#34;0&#34;
    allowfullscreen=&#34;true&#34;
&gt;
&lt;/iframe&gt;

&lt;br&gt;
&lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#绝对vs相对&#34;&gt;绝对vs相对&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#pathlibpath属性方法&#34;&gt;pathlib.Path()属性方法&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#cwd&#34;&gt;cwd()&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#joinpathgrandpadir-fatherdir-file&#34;&gt;joinpath(&amp;hellip;grandpadir, fatherdir, &amp;hellip;file)&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#iterdir&#34;&gt;iterdir()&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#globpattern&#34;&gt;glob(pattern)&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#is_file&#34;&gt;is_file()&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#is_dir&#34;&gt;is_dir()&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#exists&#34;&gt;exists()&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#mkdirparentstrue-exist_oktrue&#34;&gt;mkdir(parents=True, exist_ok=True)&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#支持&#34;&gt;支持&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;绝对vs相对&#34;&gt;绝对vs相对&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;相对路径 &lt;code&gt;&#39;img&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;绝对路径  &lt;code&gt;&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/img&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    当移动文件夹位置或者将代码分享给朋友使用时，你的代码再次运行就会出错。为了避免这个问题，强烈建议用相对路径
  &lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pathlib

#当前代码所在的文件夹的相对路径
pathlib.Path()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;WindowsPath(&#39;.&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pathlib import Path

#当前代码所在的文件夹的相对路径
Path()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;WindowsPath(&#39;.&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;pathlibpath属性方法&#34;&gt;pathlib.Path()属性方法&lt;/h1&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    下表加粗的都是常用的方法，其他了解即可
  &lt;/div&gt;
&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;方法&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;cwd()&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;获取代码所在的当前工作路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;joinpath(&amp;hellip;grandpadir, fatherdir, &amp;hellip;file)&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;生成路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;iterdir()&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回某路径下的文件(夹)目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;glob(pattern)&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回符合pattern的所有文件的文件路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;is_file()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;判断某路径是否为文件，返回布尔值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;is_dir()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;判断某路径是否为文件夹，返回布尔值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;exists()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;判断某路径是否存在，返回布尔值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;mkdir(parents=True, exist_ok=True)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;创建某路径对应的文件夹&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;cwd&#34;&gt;cwd()&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;例&lt;/strong&gt;：获取当前代码所在文件夹的绝对路径&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Path().cwd()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;WindowsPath(&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;joinpathgrandpadir-fatherdir-file&#34;&gt;joinpath(&amp;hellip;grandpadir, fatherdir, &amp;hellip;file)&lt;/h3&gt;
&lt;p&gt;把&amp;hellip;grandpadir, fatherdir, &amp;hellip;file加入到某路径中&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;例&lt;/strong&gt;：获得data文件夹的路径&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Path().cwd().joinpath(&#39;data&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;WindowsPath(&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;例&lt;/strong&gt;：获得data/test.txt文件的路径&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Path().cwd().joinpath(&#39;data&#39;, &#39;test.txt&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;WindowsPath(&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test.txt&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;iterdir&#34;&gt;iterdir()&lt;/h3&gt;
&lt;p&gt;返回某路径下的文件(夹)目录&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;例：获得&lt;strong&gt;02-Python语法入门&lt;/strong&gt;文件夹里的所有文件(夹)路径&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list(Path().cwd().iterdir())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[WindowsPath(&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/.ipynb_checkpoints&#39;),
 WindowsPath(&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/01-Python跟英语一样是一门语言.ipynb&#39;),
 WindowsPath(&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/02-数据类型之字符串.ipynb&#39;),
 WindowsPath(&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/03-数据类型之列表元组集合.ipynb&#39;),
 WindowsPath(&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/04-数据类型之字典.ipynb&#39;),
 WindowsPath(&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/05-数据类型之布尔值&amp;amp;None.ipynb&#39;),
 WindowsPath(&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/06-逻辑语句(if&amp;amp;for&amp;amp;tryexcept).ipynb&#39;),
 WindowsPath(&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/07-列表推导式.ipynb&#39;),
 WindowsPath(&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/08-理解函数.ipynb&#39;),
 WindowsPath(&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/09-常用内置函数.ipynb&#39;),
 WindowsPath(&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/09-常用函数.md&#39;),
 WindowsPath(&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/10-内置库之文件路径pathlib库.ipynb&#39;),
 WindowsPath(&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/11-内置库之csv文件库.ipynb&#39;),
 WindowsPath(&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/12. 内置库之正则表达式re库.ipynb&#39;),
 WindowsPath(&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/13-初学python常出错误汇总.ipynb&#39;),
 WindowsPath(&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data&#39;),
 WindowsPath(&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/img&#39;)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;globpattern&#34;&gt;glob(pattern)&lt;/h3&gt;
&lt;p&gt;查找某路径内满足pattern的所有文件路径 。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pattern=&#39;*.*&#39;&lt;/code&gt; 匹配任意格式任意名字的文件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pattern=&#39;*.txt&#39;&lt;/code&gt; 匹配出所有的txt文件&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;例&lt;/strong&gt;：获得data文件夹内的所有的文件路径&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list(Path().cwd().joinpath(&#39;data&#39;).glob(&#39;*.*&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[WindowsPath(&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test.txt&#39;),
 WindowsPath(&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test2.csv&#39;),
 WindowsPath(&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test2.txt&#39;),
 WindowsPath(&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/twitter_sentiment.csv&#39;)]
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;例&lt;/strong&gt;：获得data文件夹内的所有的txt额路径&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list(Path().cwd().joinpath(&#39;data&#39;).glob(&#39;*.txt&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[WindowsPath(&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test.txt&#39;),
 WindowsPath(&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test2.txt&#39;)]
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;例&lt;/strong&gt;：获得data/reports内的pdf路径&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dirs = Path().cwd().joinpath(&#39;data&#39;, &#39;reports&#39;).iterdir()
dirs = list(dirs)
for dir in dirs:
    files = dir.glob(&#39;*.*&#39;)
    for file in files:
        print(file)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;C:\Users\thunderhit\Desktop\Python数据分析入门\02-Python语法入门\data\reports\600000\600000_20010901_1.pdf
C:\Users\thunderhit\Desktop\Python数据分析入门\02-Python语法入门\data\reports\600004\600004_2006_n.pdf
C:\Users\thunderhit\Desktop\Python数据分析入门\02-Python语法入门\data\reports\600004\600004_2006_z.pdf
C:\Users\thunderhit\Desktop\Python数据分析入门\02-Python语法入门\data\reports\600007\600007_2001_n.pdf
.......
C:\Users\thunderhit\Desktop\Python数据分析入门\02-Python语法入门\data\reports\600007\600007_2002_1.pdf
C:\Users\thunderhit\Desktop\Python数据分析入门\02-Python语法入门\data\reports\603937\603937_2018_z.pdf
......
C:\Users\thunderhit\Desktop\Python数据分析入门\02-Python语法入门\data\reports\603937\603937_2019_3.pdf
C:\Users\thunderhit\Desktop\Python数据分析入门\02-Python语法入门\data\reports\603937\603937_2019_z.pdf
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;p&gt;例**：获得data/reports内的 含有&amp;rdquo;_n&amp;rdquo; 额pdf路径&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dirs = Path().cwd().joinpath(&#39;data&#39;, &#39;reports&#39;).iterdir()
dirs = list(dirs)
for dir in dirs:
    files = dir.glob(&#39;*_n.pdf&#39;)
    for file in files:
        print(file)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;C:\Users\thunderhit\Desktop\Python数据分析入门\02-Python语法入门\data\reports\600000\600000_2006_n.pdf
C:\Users\thunderhit\Desktop\Python数据分析入门\02-Python语法入门\data\reports\600000\600000_2008_n.pdf
........
C:\Users\thunderhit\Desktop\Python数据分析入门\02-Python语法入门\data\reports\601872\601872_2014_n.pdf
C:\Users\thunderhit\Desktop\Python数据分析入门\02-Python语法入门\data\reports\601872\601872_2015_n.pdf
C:\Users\thunderhit\Desktop\Python数据分析入门\02-Python语法入门\data\reports\601872\601872_2016_n.pdf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;is_file&#34;&gt;is_file()&lt;/h3&gt;
&lt;p&gt;判断某路径是否为一个文件。返回布尔值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;True 真实存在的文件路径&lt;/li&gt;
&lt;li&gt;False 不真实存在或者文件夹路径&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;例&lt;/strong&gt; &amp;lsquo;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test.txt&amp;rsquo;是文件路径？&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fpath = Path(&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test.txt&#39;)
fpath.is_file()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;例&lt;/strong&gt; &amp;lsquo;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test222.txt&amp;rsquo;是文件路径？&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fpath = Path(&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test222.txt&#39;)
fpath.is_file()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fpath = Path(&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data&#39;)
fpath.is_file()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;is_dir&#34;&gt;is_dir()&lt;/h3&gt;
&lt;p&gt;判断某路径是否为一个文件夹。返回布尔值，True、False&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例&lt;/strong&gt;： &amp;lsquo;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data&amp;rsquo; 是 文件夹路径？&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fpath = Path(&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data&#39;)
fpath.is_dir()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;exists&#34;&gt;exists()&lt;/h3&gt;
&lt;p&gt;判断某路径是否存在。返回布尔值，True、False&lt;/p&gt;
&lt;p&gt;例： &amp;lsquo;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data&amp;rsquo; 是否存在？&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fpath = Path(&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data&#39;)
fpath.exists()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fpath = Path(&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/datasss&#39;)
fpath.exists()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h3 id=&#34;mkdirparentstrue-exist_oktrue&#34;&gt;mkdir(parents=True, exist_ok=True)&lt;/h3&gt;
&lt;p&gt;创建某路径&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;path = Path().cwd().joinpath(&#39;data&#39;, &#39;stocks&#39;, &#39;800000&#39;)
path.mkdir(parents=True, exist_ok=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&#34;支持&#34;&gt;支持&lt;/h2&gt;
&lt;p&gt;分享不易，谢谢大家分享（或红包）支持^_^&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/my_zanshang_qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>内置库-正则表达式re库</title>
      <link>https://thunderhit.github.io/post/12.-%E5%86%85%E7%BD%AE%E5%BA%93%E4%B9%8B%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8Fre%E5%BA%93/</link>
      <pubDate>Fri, 19 Jun 2020 16:39:11 +0800</pubDate>
      <guid>https://thunderhit.github.io/post/12.-%E5%86%85%E7%BD%AE%E5%BA%93%E4%B9%8B%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8Fre%E5%BA%93/</guid>
      <description>&lt;p&gt;正则表达式主要用于数据清洗，比如从脏乱差的文本中抽取出自己需要的信息。常见于爬虫和文本分析。&lt;/p&gt;
&lt;iframe
    src=&#34;//player.bilibili.com/player.html?bvid=BV1eb411h7sP&amp;page=14&#34;
    scrolling=&#34;no&#34;
    height=&#34;768px&#34;
    width=&#34;1024px&#34;
    frameborder=&#34;no&#34;
    framespacing=&#34;0&#34;
    allowfullscreen=&#34;true&#34;
&gt;
&lt;/iframe&gt;

&lt;br&gt;
&lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#一正则表达式中的符号&#34;&gt;一、正则表达式中的符号&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#11-正则字符&#34;&gt;1.1 正则字符&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#12-限定字符&#34;&gt;1.2 限定字符&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#13-定位字符&#34;&gt;1.3 定位字符&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#二re库常用方法&#34;&gt;二、re库常用方法&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#三只需要掌握&#34;&gt;三、只需要掌握&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#31-检索找到自己需要的正则表达式&#34;&gt;3.1 检索找到自己需要的正则表达式&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#32-最简单最好用表达式&#34;&gt;3.2 最简单最好用表达式(.*?)&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#四案例&#34;&gt;四、案例&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#41-找出文本中出现的年份&#34;&gt;4.1 找出文本中出现的年份&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#42-resplitpattern-string&#34;&gt;4.2 re.split(pattern, string)&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#43-resubpattern-repl-string&#34;&gt;4.3 re.sub(pattern, repl, string)&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#44--统一表达&#34;&gt;4.4 . 统一表达&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#45-分割文本数据的章节&#34;&gt;4.5 分割文本数据的章节&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#46-抽取出数字&#34;&gt;4.6 抽取出数字&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#支持&#34;&gt;支持&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&#34;一正则表达式中的符号&#34;&gt;一、正则表达式中的符号&lt;/h2&gt;
&lt;p&gt;按照符号的功能，我将其分为三类，一般情况下表达式都是由这三种符号组成的。&lt;/p&gt;
&lt;h3 id=&#34;11-正则字符&#34;&gt;1.1 正则字符&lt;/h3&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    预警，听不懂不要绞尽脑汁，本节后面会柳暗花明的
  &lt;/div&gt;
&lt;/div&gt;
%}}
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;正则符号&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;匹配自己时&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;转义字符。例如， &amp;lsquo;n&amp;rsquo; 匹配字符 &amp;lsquo;n&amp;rsquo;。&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#39;\n&#39;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;( )&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;标记一个子表达式的开始和结束位置。&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\(   \)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;匹配除换行符 &lt;code&gt;\n&lt;/code&gt; 之外的任何单字符。&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\. &lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;|&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;|左右两侧均可参与匹配&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;\d&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;匹配字符串中的单个数字&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;a-zA-Z&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;匹配全部英文字符&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;0-9&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;匹配全部数字&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\s&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;匹配字符串中的&lt;code&gt;\n&lt;/code&gt;,&lt;code&gt;\t&lt;/code&gt;,&lt;code&gt;空格&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;中括号内任意正则符号均可参与匹配&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\[   \]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;^&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;当在方括号表达式中使用，^对其后的正则表达式进行了反义表达。&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\^&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;br&gt;
&lt;h3 id=&#34;12-限定字符&#34;&gt;1.2 限定字符&lt;/h3&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    提前预警，听不懂不要绞尽脑汁，本节后面会柳暗花明的
  &lt;/div&gt;
&lt;/div&gt;
%}}
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;正则符号&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;匹配自己时&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;*&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;匹配前面的子表达式零次或多次。&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\*&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;?&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;匹配前面的子表达式零次或一次&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;\?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;+&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;匹配前面的子表达式一次或多次。&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\+&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;{m}&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;n 是一个非负整数。匹配确定的 m 次。&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;{m,}&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;m 是一个非负整数。至少匹配m 次。&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;{m, n}&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;m 和 n 均为非负整数，其中m &amp;lt;= n。最少匹配 m 次且最多匹配 n 次。&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;br&gt;
&lt;h3 id=&#34;13-定位字符&#34;&gt;1.3 定位字符&lt;/h3&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    预警，听不懂不要绞尽脑汁，本节后面会柳暗花明的
  &lt;/div&gt;
&lt;/div&gt;
%}}
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;正则符号&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;匹配自己时&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;^&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;匹配输入字符串的开始位置。&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\^&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;匹配输入字符串的结尾位置&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;\b&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;匹配一个单词边界，即字与空格间的位置&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;\B&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;非单词边界匹配&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;二re库常用方法&#34;&gt;二、re库常用方法&lt;/h2&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    至暗时刻已过，光来了
  &lt;/div&gt;
&lt;/div&gt;
%}}
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;re库常用函数&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;re.findall(pattern, string)&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;根据pattern返回匹配结果（列表）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;|&lt;code&gt;re.split(pattern, string)&lt;/code&gt; |使用pattern分割string，返回列表     &lt;br&gt;
|&lt;code&gt;re.sub(pattern, repl, string)&lt;/code&gt;|使用repl替换string中的pattern|&lt;/p&gt;
&lt;p&gt;&lt;br&gt; &lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;三只需要掌握&#34;&gt;三、只需要掌握&lt;/h2&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    万能的百度谷歌+你的尝试，比什么都强大
  &lt;/div&gt;
&lt;/div&gt;
%}}
&lt;ul&gt;
&lt;li&gt;搜索引擎检索到自己需要的正则表达式&lt;/li&gt;
&lt;li&gt;最简单最好用表达式&lt;code&gt;(.*?)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在
&lt;a href=&#34;http://c.runoob.com/front-end/854&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;正则表达式测试网站&lt;/a&gt;验证自己的正则表达式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;31-检索找到自己需要的正则表达式&#34;&gt;3.1 检索找到自己需要的正则表达式&lt;/h3&gt;
&lt;p&gt;比如我只需要中文，其余字符统统不要。&lt;/p&gt;
&lt;p&gt;我会在百度搜&lt;strong&gt;中文正则表达式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;发现很多网页中网友提到````，于是&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[\u4e00-\u9fa5]&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re

pattern = &#39;[\u4e00-\u9fa5]+&#39;

string = &amp;quot;&amp;quot;&amp;quot;Python是一门面向对象的编程语言，诞生于1991年。\
目前以广泛应用在网站开发、游戏软件开发、数据采集、机器学习等多个领域。\
一般情况下Python是Java的20%，所以说人生苦短，我用Python。&amp;quot;&amp;quot;&amp;quot;

chinese_words = re.findall(pattern, string)
chinese_text = &#39;&#39;.join(chinese_words)
chinese_text
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;是一门面向对象的编程语言诞生于年目前以广泛应用在网站开发游戏软件开发数据采集机器学习等多个领域一般情况下是的所以说人生苦短我用&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h3 id=&#34;32-最简单最好用表达式&#34;&gt;3.2 最简单最好用表达式(.*?)&lt;/h3&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    (.*?)特别好用，ta的暗号及使用口诀一定要背过
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;pattern设计步骤：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;正则符号&lt;/strong&gt;组成&lt;strong&gt;正则表达式&lt;/strong&gt;，用于&lt;strong&gt;匹配&lt;/strong&gt;需要的字符。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;找到重复的一致的规律&lt;/li&gt;
&lt;li&gt;复制粘贴到pattern中&lt;/li&gt;
&lt;li&gt;扣掉&lt;strong&gt;想要的数据&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;替换为&lt;code&gt;(.*?)&lt;/code&gt;  或者&lt;code&gt;相应的正则符号表达式*&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;比如现在需要快速挖掘出intros中的姓名、籍贯和年龄&lt;/p&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re


pattern = &#39;我叫(.*?)，来自(.*?)，今年(.*?)岁。&#39;

intros = [&#39;我叫张三，来自山东，今年25岁。&#39;,
          &#39;我叫李四，来自河北，今年28岁。&#39;,
          &#39;我叫王五，来自河南，今年24岁。&#39;]

for intro in intros:
    info = re.findall(pattern, intro)
    print(info)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[(&#39;张三&#39;, &#39;山东&#39;, &#39;25&#39;)]
[(&#39;李四&#39;, &#39;河北&#39;, &#39;28&#39;)]
[(&#39;王五&#39;, &#39;河南&#39;, &#39;24&#39;)]
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    特别需要注意的是pattern中的(.*?)左右两侧必须有字符，否则匹配失败
  &lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re


pattern = &#39;(.*?)，来自(.*?)，今年(.*?)&#39;

intros = [&#39;我叫张三，来自山东，今年25岁。&#39;,
          &#39;我叫李四，来自河北，今年28岁。&#39;,
          &#39;我叫王五，来自河南，今年24岁。&#39;]

for intro in intros:
    info = re.findall(pattern, intro)
    print(info)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[(&#39;我叫张三&#39;, &#39;山东&#39;, &#39;&#39;)]
[(&#39;我叫李四&#39;, &#39;河北&#39;, &#39;&#39;)]
[(&#39;我叫王五&#39;, &#39;河南&#39;, &#39;&#39;)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;由于&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&#39;(.*?)，来自(.*?)，今年(.*?)&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;中最左侧和最右侧的&lt;code&gt;(.*?)&lt;/code&gt;没有被其他字符左右包裹，导致匹配姓名和年龄失败。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re


pattern = &#39;叫(.*?)，来自(.*?)，今年(.*?)岁&#39;

intros = [&#39;我叫张三，来自山东，今年25岁。&#39;,
          &#39;我叫李四，来自河北，今年28岁。&#39;,
          &#39;我叫王五，来自河南，今年24岁。&#39;]

for intro in intros:
    info = re.findall(pattern, intro)
    print(info)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[(&#39;张三&#39;, &#39;山东&#39;, &#39;25&#39;)]
[(&#39;李四&#39;, &#39;河北&#39;, &#39;28&#39;)]
[(&#39;王五&#39;, &#39;河南&#39;, &#39;24&#39;)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;四案例&#34;&gt;四、案例&lt;/h2&gt;
&lt;h3 id=&#34;41-找出文本中出现的年份&#34;&gt;4.1 找出文本中出现的年份&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re


pattern = &#39;\d{4}&#39;
string = &amp;quot;&amp;quot;&amp;quot;Python是一门面向对象的编程语言，诞生于1991年。\
目前以广泛应用在网站开发、游戏软件开发、数据采集、机器学习等多个领域。\
一般情况下Python是Java的20%，所以说人生苦短，我用Python。&amp;quot;&amp;quot;&amp;quot;

re.findall(pattern, string)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;1991&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h3 id=&#34;42-resplitpattern-string&#34;&gt;4.2 re.split(pattern, string)&lt;/h3&gt;
&lt;p&gt;断句&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pattern = &#39;；|。&#39;

string = &amp;quot;&amp;quot;&amp;quot;Python是一门面向对象的编程语言，诞生于1991年；\
目前以广泛应用在网站开发、游戏软件开发、数据采集、机器学习等多个领域。\
一般情况下Python是Java的20%，所以说人生苦短，我用Python。&amp;quot;&amp;quot;&amp;quot;

res = re.split(pattern, string)
res = [r for r in res if r]
res
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;Python是一门面向对象的编程语言，诞生于1991年&#39;,
 &#39;目前以广泛应用在网站开发、游戏软件开发、数据采集、机器学习等多个领域&#39;,
 &#39;一般情况下Python是Java的20%，所以说人生苦短，我用Python&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h3 id=&#34;43-resubpattern-repl-string&#34;&gt;4.3 re.sub(pattern, repl, string)&lt;/h3&gt;
&lt;p&gt;将数字替换为NUM&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pattern = &#39;\d+&#39;

repl = &#39;NUM&#39;

string = &amp;quot;&amp;quot;&amp;quot;Python是一门面向对象的编程语言，诞生于1991年。\
一般情况下Python是Java的20%，所以说人生苦短，我用Python。&amp;quot;&amp;quot;&amp;quot;

re.sub(pattern, repl, string)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;Python是一门面向对象的编程语言，诞生于NUM年。一般情况下Python是Java的NUM%，所以说人生苦短，我用Python。&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h3 id=&#34;44--统一表达&#34;&gt;4.4 . 统一表达&lt;/h3&gt;
&lt;p&gt;将指代同一个主体的不同表达词语统一为同一个词&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;text = &#39;中国铁路工程集团有限公司成立于1950年3月，总部位于北京。目前中国中铁已经发展成中国和亚洲最大的多功能综合型建设集团。&#39;

pattern = &#39;中国铁路工程集团有限公司|中国中铁&#39;

repl = &#39;中铁&#39;

re.sub(pattern, repl, text)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;中铁成立于1950年3月，总部位于北京。目前中铁已经发展成中国和亚洲最大的多功能综合型建设集团。&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;text = &#39;中国铁路工程集团有限公司成立于1950年3月，总部位于北京。目前中国中铁已经发展成中国和亚洲最大的多功能综合型建设集团。&#39;

pattern = &#39;[中国铁路工程集团有限公司|中国中铁]+&#39;

repl = &#39;中铁&#39;

re.sub(pattern, repl, text)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;中铁成立于1950年3月，总部位于北京。目前中铁已经发展成中铁和亚洲最大的多功能综合型建设中铁。&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h3 id=&#34;45-分割文本数据的章节&#34;&gt;4.5 分割文本数据的章节&lt;/h3&gt;
&lt;p&gt;一二三四五六七八九十零百&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;text = &amp;quot;&amp;quot;&amp;quot; 第一篇 Python简介 第二篇 Python入门语法 第三篇 Python网络爬虫 第四篇 文本数据编码 第五篇 数据分析 第六篇 可视化&amp;quot;&amp;quot;&amp;quot;

pattern = &#39;第[一二三四五六七八九十零百]+篇&#39;

res = re.split(pattern, text)
res = [r.replace(&#39; &#39;, &#39;&#39;) for r in res if &#39; &#39;!=r]
res
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;Python简介&#39;, &#39;Python入门语法&#39;, &#39;Python网络爬虫&#39;, &#39;文本数据编码&#39;, &#39;数据分析&#39;, &#39;可视化&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h3 id=&#34;46-抽取出数字&#34;&gt;4.6 抽取出数字&lt;/h3&gt;
&lt;p&gt;比如日期数据&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;text = &#39;中国铁路工程集团有限公司成立于1950年3月，总部位于北京。目前中国中铁已经发展成中国和亚洲最大的多功能综合型建设集团。&#39;

pattern = &#39;\d+&#39;

&#39;-&#39;.join(re.findall(pattern, text))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;1950-3&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;支持&#34;&gt;支持&lt;/h2&gt;
&lt;p&gt;分享不易，谢谢大家分享（或红包）支持^_^&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/my_zanshang_qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>列表推导式</title>
      <link>https://thunderhit.github.io/post/07-%E5%88%97%E8%A1%A8%E6%8E%A8%E5%AF%BC%E5%BC%8F/</link>
      <pubDate>Fri, 19 Jun 2020 16:39:11 +0800</pubDate>
      <guid>https://thunderhit.github.io/post/07-%E5%88%97%E8%A1%A8%E6%8E%A8%E5%AF%BC%E5%BC%8F/</guid>
      <description>&lt;p&gt;列表推导式唯一的用处就是增强代码的可阅读性，初次接触可能比较难理解，但是大家一定要理解，文本分析中经常会用到ta。&lt;/p&gt;
&lt;iframe
    src=&#34;//player.bilibili.com/player.html?bvid=BV1eb411h7sP&amp;page=9&#34;
    scrolling=&#34;no&#34;
    height=&#34;768px&#34;
    width=&#34;1024px&#34;
    frameborder=&#34;no&#34;
    framespacing=&#34;0&#34;
    allowfullscreen=&#34;true&#34;
&gt;
&lt;/iframe&gt;

&lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#问题1-用列表表示集合x&#34;&gt;问题1 用列表表示集合X&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#问题2-表示集合y&#34;&gt;问题2 表示集合Y&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#列表推导式&#34;&gt;列表推导式&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#理解列表推导式&#34;&gt;理解列表推导式&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#带条件的列表推导式&#34;&gt;带条件的列表推导式&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#问题3-全部小写&#34;&gt;问题3 全部小写&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#问题4-计算lower_words列表数据的单词词频&#34;&gt;问题4 计算lower_words列表数据的单词词频&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#问题5&#34;&gt;问题5&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#支持&#34;&gt;支持&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;问题1-用列表表示集合x&#34;&gt;问题1 用列表表示集合X&lt;/h2&gt;
&lt;p&gt;$X= {x| x \in [1,2,3,4,5,6,7,8,9,10]}$&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;X = [1,2,3,4,5,6,7,8,9,10]
X
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;X = list(range(1, 10))
X
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4, 5, 6, 7, 8, 9]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;问题2-表示集合y&#34;&gt;问题2 表示集合Y&lt;/h2&gt;
&lt;p&gt;$Y = {x^2| x \in [1,2,3,4,5,6,7,8,9,10]}$&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Y = []

for x in X:
    Y.append(x*x)
    
Y
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1, 4, 9, 16, 25, 36, 49, 64, 81]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;列表推导式&#34;&gt;列表推导式&lt;/h1&gt;
&lt;p&gt;实现步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先复制X&lt;/li&gt;
&lt;li&gt;再对X中的元素x进行操作&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#先复制X
[x for x in X]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4, 5, 6, 7, 8, 9]
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#再对x进行操作
[x*x for x in X]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1, 4, 9, 16, 25, 36, 49, 64, 81]
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h2 id=&#34;理解列表推导式&#34;&gt;理解列表推导式&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;%E5%88%97%E8%A1%A8%E6%8E%A8%E5%AF%BC%E5%BC%8F%E7%90%86%E8%A7%A3.JPG&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;带条件的列表推导式&#34;&gt;带条件的列表推导式&lt;/h2&gt;
&lt;p&gt;$C= {x^2 | (x \in X) \cap (x&amp;gt;5)}$&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#复制X
[x 
 for x in X]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4, 5, 6, 7, 8, 9]
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#X中的要大于5
#[x for x in X if x&amp;gt;5]


[x 
 for x in X 
 if x&amp;gt;5]


&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[6, 7, 8, 9]
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#对满足条件的x进行操作
#[x*x for x in X if x&amp;gt;5]

[x*x 
 for x in X 
 if x&amp;gt;5]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[36, 49, 64, 81]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;问题3-全部小写&#34;&gt;问题3 全部小写&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;words = [&#39;Life&#39;, &#39;is&#39;, &#39;short&#39;, &#39;so&#39;, &#39;we&#39;, &#39;use&#39;, &#39;Python&#39;, &#39;python&#39;, 
         &#39;is&#39;, &#39;easy&#39;, &#39;to&#39;, &#39;learn&#39;, &#39;and&#39;, &#39;easy&#39;, &#39;to&#39;, &#39;use&#39;]
words
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;Life&#39;,
 &#39;is&#39;,
 &#39;short&#39;,
 &#39;so&#39;,
 &#39;we&#39;,
 &#39;use&#39;,
 &#39;Python&#39;,
 &#39;python&#39;,
 &#39;is&#39;,
 &#39;easy&#39;,
 &#39;to&#39;,
 &#39;learn&#39;,
 &#39;and&#39;,
 &#39;easy&#39;,
 &#39;to&#39;,
 &#39;use&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lower_words = [w.lower() for w in words]
lower_words
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;life&#39;,
 &#39;is&#39;,
 &#39;short&#39;,
 &#39;so&#39;,
 &#39;we&#39;,
 &#39;use&#39;,
 &#39;python&#39;,
 &#39;python&#39;,
 &#39;is&#39;,
 &#39;easy&#39;,
 &#39;to&#39;,
 &#39;learn&#39;,
 &#39;and&#39;,
 &#39;easy&#39;,
 &#39;to&#39;,
 &#39;use&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;问题4-计算lower_words列表数据的单词词频&#34;&gt;问题4 计算lower_words列表数据的单词词频&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;wordset = set(lower_words)
[(w, lower_words.count(w)) for w in wordset]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[(&#39;so&#39;, 1),
 (&#39;and&#39;, 1),
 (&#39;learn&#39;, 1),
 (&#39;use&#39;, 2),
 (&#39;to&#39;, 2),
 (&#39;we&#39;, 1),
 (&#39;easy&#39;, 2),
 (&#39;python&#39;, 2),
 (&#39;is&#39;, 2),
 (&#39;short&#39;, 1),
 (&#39;life&#39;, 1)]
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#1 生产词语集合
wordset = set(lower_words)
print(wordset)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{&#39;so&#39;, &#39;and&#39;, &#39;learn&#39;, &#39;use&#39;, &#39;to&#39;, &#39;we&#39;, &#39;easy&#39;, &#39;python&#39;, &#39;is&#39;, &#39;short&#39;, &#39;life&#39;}
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#2. wordset复制wordset自己
[w for w in wordset]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#3. 对wordset中每个词语w进行一些操作
[lower_words.count(w) for w in wordset]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1, 1, 1, 2, 2, 1, 2, 2, 2, 1, 1]
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#3. 词频和词语一起显示
[(w,lower_words.count(w)) for w in wordset]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[(&#39;so&#39;, 1),
 (&#39;and&#39;, 1),
 (&#39;learn&#39;, 1),
 (&#39;use&#39;, 2),
 (&#39;to&#39;, 2),
 (&#39;we&#39;, 1),
 (&#39;easy&#39;, 2),
 (&#39;python&#39;, 2),
 (&#39;is&#39;, 2),
 (&#39;short&#39;, 1),
 (&#39;life&#39;, 1)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;问题5&#34;&gt;问题5&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d = {&#39;x&#39;: &#39;A&#39;, 
     &#39;y&#39;: &#39;B&#39;, 
     &#39;z&#39;: &#39;C&#39; }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如何将d中的 键值对 拼接,输出为&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[&#39;xA&#39;, &#39;yB&#39;, &#39;zC]&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d = {&#39;x&#39;: &#39;A&#39;, 
     &#39;y&#39;: &#39;B&#39;, 
     &#39;z&#39;: &#39;C&#39; }

d.items()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;dict_items([(&#39;x&#39;, &#39;A&#39;), (&#39;y&#39;, &#39;B&#39;), (&#39;z&#39;, &#39;C&#39;)])
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#1 自己复制d.items()自己
[i for i in d.items()]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[(&#39;x&#39;, &#39;A&#39;), (&#39;y&#39;, &#39;B&#39;), (&#39;z&#39;, &#39;C&#39;)]
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#2 对任何一个元素都要进行字符串的拼接操作
[i[0]+i[1] for i in d.items()]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;xA&#39;, &#39;yB&#39;, &#39;zC&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;支持&#34;&gt;支持&lt;/h2&gt;
&lt;p&gt;分享不易，谢谢大家分享（或红包）支持^_^&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/my_zanshang_qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>数据类型-列表元组集合</title>
      <link>https://thunderhit.github.io/post/03-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%88%97%E8%A1%A8%E5%85%83%E7%BB%84%E9%9B%86%E5%90%88/</link>
      <pubDate>Fri, 19 Jun 2020 16:39:11 +0800</pubDate>
      <guid>https://thunderhit.github.io/post/03-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%88%97%E8%A1%A8%E5%85%83%E7%BB%84%E9%9B%86%E5%90%88/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    当你不知道用什么数据类型的时候，一定要记住list，大多数的脏活累活ta都帮你搞定
  &lt;/div&gt;
&lt;/div&gt;
&lt;iframe
    src=&#34;//player.bilibili.com/player.html?bvid=BV1eb411h7sP&amp;page=5&#34;
    scrolling=&#34;no&#34;
    height=&#34;768px&#34;
    width=&#34;1024px&#34;
    frameborder=&#34;no&#34;
    framespacing=&#34;0&#34;
    allowfullscreen=&#34;true&#34;
&gt;
&lt;/iframe&gt;

&lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#列表list&#34;&gt;列表list&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#定义&#34;&gt;定义&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#拼接&#34;&gt;拼接&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#拆包&#34;&gt;拆包&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#切片&#34;&gt;切片&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#列表常用方法&#34;&gt;列表常用方法&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#元组tuple&#34;&gt;元组tuple&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#集合&#34;&gt;集合&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#集合的方法&#34;&gt;集合的方法&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#支持&#34;&gt;支持&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;列表list&#34;&gt;列表list&lt;/h1&gt;
&lt;h2 id=&#34;定义&#34;&gt;定义&lt;/h2&gt;
&lt;p&gt;list是一种&lt;strong&gt;有序&lt;/strong&gt;的集合,内部可以由任何数据类型的组成的&lt;/p&gt;
&lt;p&gt;现在有5位员工的汇总信息，&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;id&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;姓名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;年龄&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;性别&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;爱好&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;David&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;25&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Male&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Basketball, Pingpang, Hiking&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Mary&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Female&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Reading, Movies&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Henry&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Male&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Diving, Hiking&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Swift&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Male&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Football, Music&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Lenard&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;26&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Male&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Stay at Home&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;现在我们需要用一种格式去组织5位员工的信息，以列表为例&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;names = [&#39;David&#39;, &#39;Mary&#39;, &#39;Henry&#39;, &#39;Swift&#39;, &#39;Lenard&#39;]

ages = [25, 23, 23, 21, 26]

hobbies = [[&#39;Basketball&#39;, &#39;Pingpang&#39;, &#39;Hiking&#39;],
          [&#39;Reading&#39;, &#39;Movies&#39;],
          [&#39;Diving&#39;, &#39;Hiking&#39;],
          [&#39;Football&#39;, &#39;Music&#39;],
          [&#39;Stay at Home&#39;]]

print(type(names))
print(type(ages))
print(type(hobbies))

print(names)
print(ages)
print(hobbies)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;list&#39;&amp;gt;
&amp;lt;class &#39;list&#39;&amp;gt;
&amp;lt;class &#39;list&#39;&amp;gt;
[&#39;David&#39;, &#39;Mary&#39;, &#39;Henry&#39;, &#39;Swift&#39;, &#39;Lenard&#39;]
[25, 23, 23, 21, 26]
[[&#39;Basketball&#39;, &#39;Pingpang&#39;, &#39;Hiking&#39;], [&#39;Reading&#39;, &#39;Movies&#39;], [&#39;Diving&#39;, &#39;Hiking&#39;], [&#39;Football&#39;, &#39;Music&#39;], [&#39;Stay at Home&#39;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    组织数据的方式有很多种，list也可以用不同的方式去组织，大家可以自己想一想
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;拼接&#34;&gt;拼接&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a1 = [&#39;Michael&#39;, &#39;Bob&#39;]
a2 = [&#39;David&#39;, &#39;Lee&#39;]

print(a1 + a2)
print(a2 + a1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;Michael&#39;, &#39;Bob&#39;, &#39;David&#39;, &#39;Lee&#39;]
[&#39;David&#39;, &#39;Lee&#39;, &#39;Michael&#39;, &#39;Bob&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;拆包&#34;&gt;拆包&lt;/h2&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    等号两边长度相同
  &lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;name, age = [&#39;David&#39;, 25]
print(name)
print(age)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;David
25
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;切片&#34;&gt;切片&lt;/h2&gt;
&lt;p&gt;列表的切片与字符串类似&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;id&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;姓名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;年龄&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;性别&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;爱好&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;正索引&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;倒索引&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;David&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;25&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Male&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Basketball, Pingpang, Hiking&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Mary&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Female&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Reading, Movies&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Henry&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Male&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Diving, Hiking&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Swift&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Male&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Football, Music&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Lenard&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;26&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Male&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Stay at Home&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;names = [&#39;David&#39;, &#39;Mary&#39;, &#39;Henry&#39;, &#39;Swift&#39;, &#39;Lenard&#39;]
names
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;David&#39;, &#39;Mary&#39;, &#39;Henry&#39;, &#39;Swift&#39;, &#39;Lenard&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(names[2])
print(names[-3])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Henry
Henry
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(names[0:3])
print(names[-5:-2])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;David&#39;, &#39;Mary&#39;, &#39;Henry&#39;]
[&#39;David&#39;, &#39;Mary&#39;, &#39;Henry&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(names[2:])
print(names[-3:])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;Henry&#39;, &#39;Swift&#39;, &#39;Lenard&#39;]
[&#39;Henry&#39;, &#39;Swift&#39;, &#39;Lenard&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(names[:2])
print(names[:-3])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;David&#39;, &#39;Mary&#39;]
[&#39;David&#39;, &#39;Mary&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;列表常用方法&#34;&gt;列表常用方法&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;常用方法&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;list.append(a)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;向list中添加元素a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;list.extend(lst)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;向list中添加列表lst&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;list.count(a)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;统计list中a的个数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;names = [&#39;David&#39;, &#39;Mary&#39;, &#39;Henry&#39;, &#39;Swift&#39;, &#39;Lenard&#39;]

print(names)
names.append(&#39;Mary&#39;)
print(names)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;David&#39;, &#39;Mary&#39;, &#39;Henry&#39;, &#39;Swift&#39;, &#39;Lenard&#39;]
[&#39;David&#39;, &#39;Mary&#39;, &#39;Henry&#39;, &#39;Swift&#39;, &#39;Lenard&#39;, &#39;Mary&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;names = [&#39;David&#39;, &#39;Mary&#39;, &#39;Henry&#39;, &#39;Swift&#39;, &#39;Lenard&#39;]

print(names)

names.extend([&#39;Mary&#39;])

print(names)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;David&#39;, &#39;Mary&#39;, &#39;Henry&#39;, &#39;Swift&#39;, &#39;Lenard&#39;]
[&#39;David&#39;, &#39;Mary&#39;, &#39;Henry&#39;, &#39;Swift&#39;, &#39;Lenard&#39;, &#39;Mary&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ages = [25, 23, 23, 21, 26]
print(ages.count(23))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;one = [&#39;David&#39;]
print(one[-1])
print(one[0])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;David
David
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;元组tuple&#34;&gt;元组tuple&lt;/h1&gt;
&lt;p&gt;形似列表，也有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;元组拼接&lt;/li&gt;
&lt;li&gt;切片&lt;/li&gt;
&lt;li&gt;拆包&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;name_list = [&#39;David&#39;, &#39;Mary&#39;, &#39;Henry&#39;, &#39;Swift&#39;, &#39;Lenard&#39;]
name_tuple = (&#39;David&#39;, &#39;Mary&#39;, &#39;Henry&#39;, &#39;Swift&#39;, &#39;Lenard&#39;)

print(type(name_list))
print(type(name_tuple))

print(name_list)
print(name_tuple)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;list&#39;&amp;gt;
&amp;lt;class &#39;tuple&#39;&amp;gt;
[&#39;David&#39;, &#39;Mary&#39;, &#39;Henry&#39;, &#39;Swift&#39;, &#39;Lenard&#39;]
(&#39;David&#39;, &#39;Mary&#39;, &#39;Henry&#39;, &#39;Swift&#39;, &#39;Lenard&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(name_list==name_tuple)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;集合&#34;&gt;集合&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;names2 = [&#39;David&#39;, &#39;Mary&#39;, &#39;David&#39;, &#39;Swift&#39;, &#39;David&#39;]
print(set(names2))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{&#39;Swift&#39;, &#39;Mary&#39;, &#39;David&#39;}
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h3 id=&#34;集合的方法&#34;&gt;集合的方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;setdata.add(ele)  向setdata中加入ele&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;name_set = set(names2)

print(name_set)

name_set.add(&#39;William&#39;)

print(name_set)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{&#39;Swift&#39;, &#39;Mary&#39;, &#39;David&#39;}
{&#39;William&#39;, &#39;Swift&#39;, &#39;Mary&#39;, &#39;David&#39;}
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;name_set[2]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&amp;lt;ipython-input-20-98cb669cc173&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 name_set[2]


TypeError: &#39;set&#39; object is not subscriptable
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    集合不能切片
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;支持&#34;&gt;支持&lt;/h2&gt;
&lt;p&gt;分享不易，谢谢大家分享（或红包）支持^_^&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/my_zanshang_qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>数据类型-字典</title>
      <link>https://thunderhit.github.io/post/04-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%AD%97%E5%85%B8/</link>
      <pubDate>Fri, 19 Jun 2020 16:39:11 +0800</pubDate>
      <guid>https://thunderhit.github.io/post/04-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%AD%97%E5%85%B8/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    最有层次感的数据类型，特别干净整洁。在写爬虫时，我们最希望遇到的数据类型就是ta
  &lt;/div&gt;
&lt;/div&gt;
&lt;iframe
    src=&#34;//player.bilibili.com/player.html?bvid=BV1eb411h7sP&amp;page=6&#34;
    scrolling=&#34;no&#34;
    height=&#34;768px&#34;
    width=&#34;1024px&#34;
    frameborder=&#34;no&#34;
    framespacing=&#34;0&#34;
    allowfullscreen=&#34;true&#34;
&gt;
&lt;/iframe&gt;

&lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#字典&#34;&gt;字典&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#空字典&#34;&gt;空字典&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#填充&#34;&gt;填充&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#更新&#34;&gt;更新&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#完整的信息&#34;&gt;完整的信息&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#字典的方法&#34;&gt;字典的方法&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#支持&#34;&gt;支持&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;字典&#34;&gt;字典&lt;/h1&gt;
&lt;p&gt;字典是有key，有value的 key-value-pair类型数据（键-值对）&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;id&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;姓名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;年龄&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;性别&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;爱好&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;David&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;25&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Male&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Basketball, Pingpang, Hiking&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Mary&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Female&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Reading, Movies&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Henry&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Male&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Diving, Hiking&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;将上面的员工信息以关键词&lt;code&gt;name、age、hobbies&lt;/code&gt; 组织成字典数据&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;空字典&#34;&gt;空字典&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;david = dict()
print(david)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{}
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h3 id=&#34;填充&#34;&gt;填充&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;david[&#39;age&#39;] = 23
print(david)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{&#39;age&#39;: 23}
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;david[&#39;hobbies&#39;] = [&#39;Basketball&#39;, &#39;Pingpang&#39;, &#39;Hiking&#39;]
print(david)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{&#39;age&#39;: 23, &#39;hobbies&#39;: [&#39;Basketball&#39;, &#39;Pingpang&#39;, &#39;Hiking&#39;]}
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;david[&#39;gender&#39;] = &#39;Male&#39;
print(david)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{&#39;age&#39;: 23, &#39;hobbies&#39;: [&#39;Basketball&#39;, &#39;Pingpang&#39;, &#39;Hiking&#39;], &#39;gender&#39;: &#39;Male&#39;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;更新&#34;&gt;更新&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;david[&#39;age&#39;] = 25
print(david)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{&#39;age&#39;: 25, &#39;hobbies&#39;: [&#39;Basketball&#39;, &#39;Pingpang&#39;, &#39;Hiking&#39;], &#39;gender&#39;: &#39;Male&#39;}
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h3 id=&#34;完整的信息&#34;&gt;完整的信息&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;infos =  {&#39;David&#39;:{&#39;age&#39;:25, 
                   &#39;gender&#39;:&#39;Male&#39;,
                   &#39;hobbies&#39;:[&#39;Basketball&#39;, &#39;Pingpang&#39;, &#39;Hiking&#39;]},
          &#39;Mary&#39;:{&#39;age&#39;:23,
                  &#39;gender&#39;: &#39;Female&#39;,
                  &#39;hobbies&#39;: [&#39;Reading&#39;, &#39;Movies&#39;]},
          &#39;Henry&#39;:{&#39;age&#39;:23,
                  &#39;gender&#39;: &#39;Male&#39;,
                  &#39;hobbies&#39;: [&#39;Diving&#39;, &#39;Hiking&#39;]}
         }

print(infos)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{&#39;David&#39;: {&#39;age&#39;: 25, &#39;gender&#39;: &#39;Male&#39;, &#39;hobbies&#39;: [&#39;Basketball&#39;, &#39;Pingpang&#39;, &#39;Hiking&#39;]}, &#39;Mary&#39;: {&#39;age&#39;: 23, &#39;gender&#39;: &#39;Female&#39;, &#39;hobbies&#39;: [&#39;Reading&#39;, &#39;Movies&#39;]}, &#39;Henry&#39;: {&#39;age&#39;: 23, &#39;gender&#39;: &#39;Male&#39;, &#39;hobbies&#39;: [&#39;Diving&#39;, &#39;Hiking&#39;]}}
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&#34;字典的方法&#34;&gt;字典的方法&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;方法&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;效果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;dictdata.items()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回dictdata所有item&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;dictdata.keys()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回dictdata的所有关键词&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;dictdata.values()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回dictdata的所有值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;dictdata.get(keystr)&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;获取关键词keystr对应的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;dictdata[keystr]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;获取关键词keystr对应的值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;infos.items()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;dict_items([(&#39;David&#39;, {&#39;age&#39;: 25, &#39;gender&#39;: &#39;Male&#39;, &#39;hobbies&#39;: [&#39;Basketball&#39;, &#39;Pingpang&#39;, &#39;Hiking&#39;]}), (&#39;Mary&#39;, {&#39;age&#39;: 23, &#39;gender&#39;: &#39;Female&#39;, &#39;hobbies&#39;: [&#39;Reading&#39;, &#39;Movies&#39;]}), (&#39;Henry&#39;, {&#39;age&#39;: 23, &#39;gender&#39;: &#39;Male&#39;, &#39;hobbies&#39;: [&#39;Diving&#39;, &#39;Hiking&#39;]})])
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#把infos.items()转化为列表
list(infos.items())[0]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(&#39;David&#39;,
 {&#39;age&#39;: 25,
  &#39;gender&#39;: &#39;Male&#39;,
  &#39;hobbies&#39;: [&#39;Basketball&#39;, &#39;Pingpang&#39;, &#39;Hiking&#39;]})
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;infos.keys()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;dict_keys([&#39;David&#39;, &#39;Mary&#39;, &#39;Henry&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;infos.values()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;dict_values([{&#39;age&#39;: 25, &#39;gender&#39;: &#39;Male&#39;, &#39;hobbies&#39;: [&#39;Basketball&#39;, &#39;Pingpang&#39;, &#39;Hiking&#39;]}, {&#39;age&#39;: 23, &#39;gender&#39;: &#39;Female&#39;, &#39;hobbies&#39;: [&#39;Reading&#39;, &#39;Movies&#39;]}, {&#39;age&#39;: 23, &#39;gender&#39;: &#39;Male&#39;, &#39;hobbies&#39;: [&#39;Diving&#39;, &#39;Hiking&#39;]}])
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(infos[&#39;David&#39;])
print(infos.get(&#39;David&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{&#39;age&#39;: 25, &#39;gender&#39;: &#39;Male&#39;, &#39;hobbies&#39;: [&#39;Basketball&#39;, &#39;Pingpang&#39;, &#39;Hiking&#39;]}
{&#39;age&#39;: 25, &#39;gender&#39;: &#39;Male&#39;, &#39;hobbies&#39;: [&#39;Basketball&#39;, &#39;Pingpang&#39;, &#39;Hiking&#39;]}
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    两种功能等同，但是get获取方法更加安全稳定。
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;例如&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(infos[&#39;Will&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

KeyError                                  Traceback (most recent call last)

&amp;lt;ipython-input-16-f7c283c8ad8e&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 print(infos[&#39;Will&#39;])


KeyError: &#39;Will&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(infos.get(&#39;Will&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;None
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&#34;支持&#34;&gt;支持&lt;/h2&gt;
&lt;p&gt;分享不易，谢谢大家分享（或红包）支持^_^&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/my_zanshang_qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>数据类型-字符串string</title>
      <link>https://thunderhit.github.io/post/02-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Fri, 19 Jun 2020 16:39:11 +0800</pubDate>
      <guid>https://thunderhit.github.io/post/02-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    文本分析实际上就是对字符串做的处理，一定要熟悉字符串哦
  &lt;/div&gt;
&lt;/div&gt;
&lt;iframe
    src=&#34;//player.bilibili.com/player.html?bvid=BV1eb411h7sP&amp;page=4&#34;
    scrolling=&#34;no&#34;
    height=&#34;768px&#34;
    width=&#34;1024px&#34;
    frameborder=&#34;no&#34;
    framespacing=&#34;0&#34;
    allowfullscreen=&#34;true&#34;
&gt;
&lt;/iframe&gt;

&lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#字符串string&#34;&gt;字符串string&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#定义&#34;&gt;定义&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#拼接&#34;&gt;拼接+&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#切片&#34;&gt;切片&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#切片总结&#34;&gt;切片总结&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#字符串常用方法&#34;&gt;字符串常用方法&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#转义符&#34;&gt;转义符\&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#r&#34;&gt;r&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#支持&#34;&gt;支持&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;字符串string&#34;&gt;字符串string&lt;/h1&gt;
&lt;h2 id=&#34;定义&#34;&gt;定义&lt;/h2&gt;
&lt;p&gt;字符串是以  &lt;strong&gt;单引号&lt;/strong&gt;  或  &lt;strong&gt;双引号&lt;/strong&gt;  或 &lt;strong&gt;三引号&lt;/strong&gt; 括起来的任意文本，如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lsquo;abc&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;abc&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;lsquo;&amp;lsquo;&amp;lsquo;abc&amp;rsquo;&amp;rsquo;&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;&amp;ldquo;&amp;ldquo;abc&amp;rdquo;&amp;rdquo;&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = &#39;abc&#39;
a
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;abc&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;abc&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;abc&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;&#39;&#39;abc&#39;&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;abc&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;abc&amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;abc&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;abc&#39;)
print(&amp;quot;abc&amp;quot;)
print(&#39;&#39;&#39;abc&#39;&#39;&#39;)
print(&amp;quot;&amp;quot;&amp;quot;abc&amp;quot;&amp;quot;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;abc
abc
abc
abc
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;abc&#39;)
print(&#39;efg&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;abc
efg
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这里所说的引号都是英文引号&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;&#39;&lt;/code&gt; 或 &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; 本身不是字符串的一部分，因此，字符串 &lt;code&gt;&#39;abc&#39;&lt;/code&gt; 只有a，b，c这3个字符。&lt;/li&gt;
&lt;li&gt;notebook中只显示最后一个，所以这里用了两个print&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;这里所说的引号都是英文引号&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&#39;&#39;&lt;/code&gt; 或 &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; 本身不是字符串的一部分，因此，字符串 &lt;code&gt;&#39;abc&#39;&lt;/code&gt; 只有a，b，c这3个字符。&lt;br&gt;&lt;/p&gt;
&lt;p&gt;notebook中只显示最后一个，所以这里用了两个print&lt;br&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;拼接&#34;&gt;拼接+&lt;/h2&gt;
&lt;p&gt;按顺序拼接&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = &#39;P&#39;
b = &#39;ython&#39;

print(a+b)
print(b+a)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Python
ythonP
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = &#39;P&#39;

print(a+b)
print(b+a)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;切片&#34;&gt;切片&lt;/h2&gt;
&lt;p&gt;切片就像切糕，把自己想要的那块切下来&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B4%A2%E5%BC%95.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;name = &#39;My Name is Mike&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;name[0]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;M&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;name[-15]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;M&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;name[3:6]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;Nam&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;name[-12:-9]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;Nam&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;name[0:2]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;My&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;name[:2]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;My&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;name[5:]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;me is Mike&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;name[-7:]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;is Mike&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;切片总结&#34;&gt;切片总结&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;切片表达式&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;解读&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;从左往右&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;索引值从0开始，0表示&amp;rsquo;第一个&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;从右向左&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-1表示倒数第一个，-2表示倒数第二个&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;a:b&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;选取列表索引位置为&lt;code&gt;a，a+1...b-2, b-1&lt;/code&gt;的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;a:&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;选取列表中a之后的所有元素(含a)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;:b&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;选取列表中b之前的所有元素(不含b)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;br&gt;
&lt;h1 id=&#34;字符串常用方法&#34;&gt;字符串常用方法&lt;/h1&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    再次强调，数据类(型)与猪牛羊不同的动物类型一样，都有满足人类需要的特殊本领(方法)。方法可以理解为数据类(型)一种特殊的本性、属性、特性
  &lt;/div&gt;
&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;字符串常用方法&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;str.lower()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;变小写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;str.upper()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;变大写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;str.split(sep)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;使用sep将字符串分割，默认sep为空格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;str.replace(old, new)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;将str中的old替换为new&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;str.format()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;向str中填充内容&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;words = &#39;Python is poweful!&#39;
words.lower()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;python is poweful!&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;words.upper()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;PYTHON IS POWEFUL!&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;words
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;Python is poweful!&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;words.split(&#39; &#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;Python&#39;, &#39;is&#39;, &#39;poweful!&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;words.replace(&#39;Python&#39;, &#39;Python programing language&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;Python programing language is poweful!&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;p&gt;需要发送每个员工的工资组成详情。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;张三,你这个月的工资是2310元；以下是你的工资详情。。。。&amp;quot;
&amp;quot;李四,你这个月的工资是3456元；以下是你的工资详情。。。。&amp;quot;
&amp;quot;王五,你这个月的工资是2431元；以下是你的工资详情。。。。&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如何自动化自动化填充?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;template = &#39;{name},你这个月的工资是{salary}元；以下是你的工资详情&#39;

print(template.format(name=&#39;张三&#39;, salary=&#39;2310&#39;))
print(template.format(name=&#39;李四&#39;, salary=&#39;3456&#39;))
print(template.format(name=&#39;王五&#39;, salary=&#39;2431&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;张三,你这个月的工资是2310元；以下是你的工资详情
李四,你这个月的工资是3456元；以下是你的工资详情
王五,你这个月的工资是2431元；以下是你的工资详情
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;转义符&#34;&gt;转义符\&lt;/h1&gt;
&lt;p&gt;如果字符串内部既包含 &lt;strong&gt;单引号&lt;/strong&gt; 又包含 &lt;strong&gt;双引号&lt;/strong&gt;， 会发生什么？&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;I&#39;m &amp;quot;OK&amp;quot;!&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  File &amp;quot;&amp;lt;ipython-input-28-af5dc904b170&amp;gt;&amp;quot;, line 1
    print(&#39;I&#39;m &amp;quot;OK&amp;quot;!&#39;)
             ^
SyntaxError: invalid syntax
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 可以用 转义字符\ 来标识，比如：
print(&#39;I\&#39;m \&amp;quot;OK\&amp;quot;!&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;I&#39;m &amp;quot;OK&amp;quot;!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;常见的转义符还有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\n&lt;/code&gt; 换行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\t&lt;/code&gt; 制表符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;字符\&lt;/code&gt; 本身也要转义，所以 &lt;code&gt;\\&lt;/code&gt; 表示的字符就是 &lt;code&gt;\&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以试着自己运行下面代码，看看下面打印结果是?：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;Hello\tWorld!&#39;)
print(&#39;转义\n换行!&#39;)
print(&#39;反斜杠线\\&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;Hello\tWorld!&#39;)
print(&#39;Hello World!&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Hello	World!
Hello World!
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;转义\n换行!&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;转义
换行!
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;反斜杠线\\&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;反斜杠线\
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;r&#34;&gt;r&lt;/h1&gt;
&lt;p&gt;如果字符串里面有很多字符都需要转义，就需要加很多&lt;code&gt;\&lt;/code&gt;,&lt;/p&gt;
&lt;p&gt;为了简化，Python还允许用&lt;code&gt;r&#39;&#39;&lt;/code&gt;表示&lt;code&gt;&#39;&#39;内部&lt;/code&gt;的字符串默认不转义,例如&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;\\\t\\&#39;)
print(r&#39;\\\t\\&#39;)
print(&#39;hello world!&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;\\\t\\&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;\	\
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(r&#39;\\\t\\&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;\\\t\\
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;支持&#34;&gt;支持&lt;/h2&gt;
&lt;p&gt;分享不易，谢谢大家分享（或红包）支持^_^&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/my_zanshang_qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>数据类型-布尔值&amp;None</title>
      <link>https://thunderhit.github.io/post/05-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%B8%83%E5%B0%94%E5%80%BCnone/</link>
      <pubDate>Fri, 19 Jun 2020 16:39:11 +0800</pubDate>
      <guid>https://thunderhit.github.io/post/05-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%B8%83%E5%B0%94%E5%80%BCnone/</guid>
      <description>&lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#布尔值boolean&#34;&gt;布尔值Boolean&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#布尔运算&#34;&gt;布尔运算&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#比较运算&#34;&gt;比较运算&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#成员运算符in&#34;&gt;成员运算符in&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#none&#34;&gt;None&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#支持&#34;&gt;支持&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;iframe
    src=&#34;//player.bilibili.com/player.html?bvid=BV1eb411h7sP&amp;page=7&#34;
    scrolling=&#34;no&#34;
    height=&#34;768px&#34;
    width=&#34;1024px&#34;
    frameborder=&#34;no&#34;
    framespacing=&#34;0&#34;
    allowfullscreen=&#34;true&#34;
&gt;
&lt;/iframe&gt;

&lt;br&gt;
&lt;h1 id=&#34;布尔值boolean&#34;&gt;布尔值Boolean&lt;/h1&gt;
&lt;p&gt;用于逻辑判断，一般与if结合使用。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = True
print(a)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;True
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;False
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;p&gt;其他产生布尔值的方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;布尔运算&lt;/li&gt;
&lt;li&gt;比较运算&lt;/li&gt;
&lt;li&gt;成员运算&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&#34;布尔运算&#34;&gt;布尔运算&lt;/h2&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    中学数学课里的且或非
  &lt;/div&gt;
&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;运算符号&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;功能&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;例子&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;等于&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;x and y&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;且&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;True and False&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;x or y&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;或&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;True or False&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;not x&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;非&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;not True&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = True and False
print(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = True or False
print(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = not True
print(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = not False
print(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&#34;比较运算&#34;&gt;比较运算&lt;/h2&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    注意=和&lt;code&gt;==&lt;/code&gt;的区别，=用来把某个值传给某个变量(赋值操作)，&lt;code&gt;==&lt;/code&gt;用来判断两个值(变量)是否相等(判断操作)
  &lt;/div&gt;
&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;比较运算符号&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;功能&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;例子&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;等于&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;==&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;相等&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;5==3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;!=&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;不等于&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;5!=3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;大于&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;5&amp;gt;3&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;小于&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;5&amp;lt;3&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;小于等于&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;5&amp;lt;=3&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;小于&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;5&amp;gt;=3&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;True&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = 5
b = 3

x = a&amp;lt;b
print(x)
print(type(x))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;False
&amp;lt;class &#39;bool&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(5==5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(5!=5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    注意:比较符两侧必须为同样的数据类型
  &lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = &#39;5&#39;
b = 5

print(a&amp;gt;b)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&amp;lt;ipython-input-15-861d7a553a1d&amp;gt; in &amp;lt;module&amp;gt;
      2 b = 5
      3 
----&amp;gt; 4 print(a&amp;gt;b)
TypeError: &#39;&amp;gt;&#39; not supported between instances of &#39;str&#39; and &#39;int&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = &#39;5&#39;
b = &#39;5&#39;
print(a==b)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;成员运算符in&#34;&gt;成员运算符in&lt;/h2&gt;
&lt;p&gt;用来判断某个值是否在集合中（这个集合可以使列表、元组、字符串等)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;案例&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;4 in [1,2,4]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;4 not in [1,2,4]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;3 in [1,2,4]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;3 not in [1,2,4]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;True&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = 4 in [1,2,4]
x
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;y = 4 not in [1,2,4]
y
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;none&#34;&gt;None&lt;/h1&gt;
&lt;p&gt;特殊的空值，类似于C语言中的Null。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;None
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code&gt;&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[]
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dict()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{}
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(None)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;NoneType
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&#34;支持&#34;&gt;支持&lt;/h2&gt;
&lt;p&gt;分享不易，谢谢大家分享（或红包）支持^_^&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/my_zanshang_qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>理解函数</title>
      <link>https://thunderhit.github.io/post/08-%E7%90%86%E8%A7%A3%E5%87%BD%E6%95%B0/</link>
      <pubDate>Fri, 19 Jun 2020 16:39:11 +0800</pubDate>
      <guid>https://thunderhit.github.io/post/08-%E7%90%86%E8%A7%A3%E5%87%BD%E6%95%B0/</guid>
      <description>&lt;p&gt;流水线每个环节都有质量要求，只有符合质量规范，才能流通到下一个环节。这样环环相扣，设计好后经过试运营就可以投产了。Python编程也一样，编程序其实也是设计流水线，而函数就是流水线上的一个个的环节。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;featured.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#函数&#34;&gt;函数&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#位置参数&#34;&gt;位置参数&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#关键词参数&#34;&gt;关键词参数&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#默认参数&#34;&gt;默认参数&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#支持&#34;&gt;支持&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;iframe
    src=&#34;//player.bilibili.com/player.html?bvid=BV1eb411h7sP&amp;page=10&#34;
    scrolling=&#34;no&#34;
    height=&#34;768px&#34;
    width=&#34;1024px&#34;
    frameborder=&#34;no&#34;
    framespacing=&#34;0&#34;
    allowfullscreen=&#34;true&#34;
&gt;
&lt;/iframe&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;函数&#34;&gt;函数&lt;/h1&gt;
&lt;p&gt;可重复使用的代码块&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;%E5%87%BD%E6%95%B0.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;def函数常见参数定义&amp;amp;调用方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;位置参数&lt;/li&gt;
&lt;li&gt;关键词参数&lt;/li&gt;
&lt;li&gt;默认参数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;位置参数&#34;&gt;位置参数&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def hello1(name, age):
    return &#39;我是{0},今年{1}&#39;.format(name, age)
    
hello1(&#39;张三&#39;, 25)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;我是张三,今年25&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;hello1(25,&#39;张三&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;我是25,今年张三&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;关键词参数&#34;&gt;关键词参数&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def hello2(name, age):
    return &#39;我是{0},今年{1}&#39;.format(name, age)
    
    
hello2(name=&#39;张三&#39;, age=25)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;我是张三,今年25&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;hello2(age=25, name=&#39;张三&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;我是张三,今年25&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;默认参数&#34;&gt;默认参数&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def hello3(name, age, gender=&#39;男&#39;):
    return &#39;我是{0},今年{1}, 性别{2}&#39;.format(name, age, gender)

    
hello3(&#39;David&#39;, 25)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;我是David,今年25, 性别男&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;hello3(&#39;David&#39;, 25, gender=&#39;male&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;我是David,今年25, 性别male&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;支持&#34;&gt;支持&lt;/h2&gt;
&lt;p&gt;分享不易，谢谢大家分享（或红包）支持^_^&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/my_zanshang_qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>程序语句-逻辑语句(if&amp;for&amp;tryexcept)</title>
      <link>https://thunderhit.github.io/post/06-%E9%80%BB%E8%BE%91%E8%AF%AD%E5%8F%A5iffortryexcept/</link>
      <pubDate>Fri, 19 Jun 2020 16:39:11 +0800</pubDate>
      <guid>https://thunderhit.github.io/post/06-%E9%80%BB%E8%BE%91%E8%AF%AD%E5%8F%A5iffortryexcept/</guid>
      <description>&lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#if条件判断&#34;&gt;if条件判断&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#condition为布尔值布尔运算成员运算符&#34;&gt;condition为布尔值、布尔运算、成员运算符&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#特殊的conditon&#34;&gt;特殊的conditon&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#for循环&#34;&gt;for循环&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#上面这个图可以解读为&#34;&gt;上面这个图可以解读为&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#重复做某事&#34;&gt;重复做某事&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#问题1&#34;&gt;问题1&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#迭代出数据中的内容&#34;&gt;迭代出数据中的内容&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#try-except&#34;&gt;try-except&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#练习1&#34;&gt;练习1&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#安装包的方法&#34;&gt;安装包的方法&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#练习2&#34;&gt;练习2&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#支持&#34;&gt;支持&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;iframe
    src=&#34;//player.bilibili.com/player.html?bvid=BV1eb411h7sP&amp;page=8&#34;
    scrolling=&#34;no&#34;
    height=&#34;768px&#34;
    width=&#34;1024px&#34;
    frameborder=&#34;no&#34;
    framespacing=&#34;0&#34;
    allowfullscreen=&#34;true&#34;
&gt;
&lt;/iframe&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;if条件判断&#34;&gt;if条件判断&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;if%E5%9B%BE.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;condition为布尔值布尔运算成员运算符&#34;&gt;condition为布尔值、布尔运算、成员运算符&lt;/h2&gt;
&lt;p&gt;通常我们理解的condition为布尔值&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Tab
condition = True

if condition:
    print(&#39;condition为True&#39;)
else:
    print(&#39;condition为False&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;condition为True
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;age = 17

if age&amp;gt;=18:
    print(&#39;你是成年人了&#39;)
else:
    print(&#39;你还是个孩子&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;你还是个孩子
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;age = 20

if age&amp;gt;=55:
    print(&#39;老年人&#39;)
elif 35&amp;lt;=age&amp;lt;55:
    print(&#39;中年&#39;)
elif 18&amp;lt;=age&amp;lt;35:
    print(&#39;青年&#39;)
elif 0&amp;lt;=age&amp;lt;18:
    print(&#39;儿童&#39;)

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;青年
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;特殊的conditon&#34;&gt;特殊的conditon&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;各种空值(空字符串、空列表等)作用等同于False&lt;/li&gt;
&lt;li&gt;各种非空值，作用等同于True&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = None

if a:
    print(&#39;a是非空数据&#39;)
else:
    print(&#39;a是空数据&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;a是空数据
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;for循环&#34;&gt;for循环&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;重复做某件事&lt;/li&gt;
&lt;li&gt;迭代出数据中的内容(元素)
&lt;img src=&#34;for%E5%BE%AA%E7%8E%AF.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;上面这个图可以解读为&#34;&gt;上面这个图可以解读为&lt;/h3&gt;
&lt;p&gt;我们想对iterable这个集合中的每一个item:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;做点事(对item做操作)
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h2 id=&#34;重复做某事&#34;&gt;重复做某事&lt;/h2&gt;
&lt;h3 id=&#34;问题1&#34;&gt;问题1&lt;/h3&gt;
&lt;p&gt;计算1+2+3+&amp;hellip;+97+98+99+100=?&lt;/p&gt;
&lt;p&gt;1 + 2 = 3
3 + 3 = 6
6 + 4 = 10
10 + 5 = 15&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;result = 0

#int
for i in range(1, 101):
    result = result + i
    
print(result)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;5050
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h2 id=&#34;迭代出数据中的内容&#34;&gt;迭代出数据中的内容&lt;/h2&gt;
&lt;p&gt;从某种“集合”（这个“集合”可以使list、set、tuple等），只要“集合”内部有多个成员就可以使用for循环迭代出内部的成员&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;names = [&#39;David&#39;, &#39;Henry&#39;, &#39;Mary&#39;]

for name in names:
    print(name)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;David
Henry
Mary
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;name = &#39;David&#39;

for s in name:
    print(s)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;D
a
v
i
d
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;infos =  {&#39;David&#39;:{&#39;age&#39;:25, 
                   &#39;gender&#39;:&#39;Male&#39;},
          &#39;Mary&#39;:{&#39;age&#39;:23,
                  &#39;gender&#39;: &#39;Female&#39;},
          &#39;Henry&#39;:{&#39;age&#39;:23,
                  &#39;gender&#39;: &#39;Male&#39;}
         }

for item in infos.items():
    print(item)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(&#39;David&#39;, {&#39;age&#39;: 25, &#39;gender&#39;: &#39;Male&#39;})
(&#39;Mary&#39;, {&#39;age&#39;: 23, &#39;gender&#39;: &#39;Female&#39;})
(&#39;Henry&#39;, {&#39;age&#39;: 23, &#39;gender&#39;: &#39;Male&#39;})
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for name, info in infos.items():
    print(name, info)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;David
Mary
Henry
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;try-except&#34;&gt;try-except&lt;/h1&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    遇到无关紧要的bug，不会停下来，让程序有一定的容错能力
  &lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for x in [1,2,0,2,1]:
    print(10/x)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;10.0
5.0
---------------------------------------------------------------------------

ZeroDivisionError                         Traceback (most recent call last)

&amp;lt;ipython-input-19-83bea9c92c0e&amp;gt; in &amp;lt;module&amp;gt;
      1 for x in [1,2,0,2,1]:
----&amp;gt; 2     print(10/x)
ZeroDivisionError: division by zero
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for x in [1,2,0,2,1]:
    try:
        print(10/x)
    except:
        print(&#39;0除错误&#39;)
        #pass
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;10.0
5.0
0除错误
5.0
10.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;练习1&#34;&gt;练习1&lt;/h2&gt;
&lt;p&gt;假设现在某人的能力为1， 每天比前一天进步0.01， 一年后他的能力是多少？&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ability = 1
scale = 1.01

records = []
for i in range(365):
    ability = ability * 1.01
    records.append(ability)
    
print(records)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1.01, 1.0201, 1.030301, 1.04060401, 1.0510100501, 1.061520150601, 1.0721353521070098, 1.08285670562808, 1.0936852726843609, 1.1046221254112045, 1.1156683466653166, ...................36.30913774096189, 36.672229118371504, 37.03895140955522, 37.40934092365077, 37.783434332887275]
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
import math
%matplotlib inline

ability = 1
scale = 1.02
records = []

days = range(1, 365)
for day in days:
    ability = ability*scale
    records.append(ability)
 

plt.plot(days, records)
plt.title(&#39;Be better everyday!&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Text(0.5, 1.0, &#39;Be better everyday!&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;output_23_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;安装包的方法&#34;&gt;安装包的方法&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;命令行执行 &lt;code&gt;pip install packagename&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;jupyter notebook的Cell中执行&lt;code&gt;!pip install packagename&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果是mac，pip写成pip3&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;!pip install matplotlib
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Looking in indexes: https://mirrors.aliyun.com/pypi/simple/
Requirement already satisfied: matplotlib in c:\users\thunderhit\appdata\local\programs\python\python37-32\lib\site-packages (3.2.1)
Requirement already satisfied: kiwisolver&amp;gt;=1.0.1 in c:\users\thunderhit\appdata\local\programs\python\python37-32\lib\site-packages (from matplotlib) (1.2.0)
Requirement already satisfied: python-dateutil&amp;gt;=2.1 in c:\users\thunderhit\appdata\local\programs\python\python37-32\lib\site-packages (from matplotlib) (2.8.1)
Requirement already satisfied: cycler&amp;gt;=0.10 in c:\users\thunderhit\appdata\local\programs\python\python37-32\lib\site-packages (from matplotlib) (0.10.0)
Requirement already satisfied: numpy&amp;gt;=1.11 in c:\users\thunderhit\appdata\local\programs\python\python37-32\lib\site-packages (from matplotlib) (1.18.2)
Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,&amp;gt;=2.0.1 in c:\users\thunderhit\appdata\local\programs\python\python37-32\lib\site-packages (from matplotlib) (2.4.7)
Requirement already satisfied: six&amp;gt;=1.5 in c:\users\thunderhit\appdata\local\programs\python\python37-32\lib\site-packages (from python-dateutil&amp;gt;=2.1-&amp;gt;matplotlib) (1.14.0)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;练习2&#34;&gt;练习2&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;打印九九乘法表格&lt;/strong&gt;
&lt;img src=&#34;%E4%B9%9D%E4%B9%9D%E4%B9%98%E6%B3%95%E8%A1%A82.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;用到的知识点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for循环&lt;/li&gt;
&lt;li&gt;字符串format方法&lt;/li&gt;
&lt;li&gt;print函数(涉及到end参数)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for row in range(1, 10):
    #print(row)
    for col in range(1, row+1):
        formula = &#39;{col}*{row}={res}&#39;.format(col=col, row=row, res=col*row)
        print(formula, end=&#39;\t&#39;)
    print(&#39;&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1*1=1	
1*2=2	2*2=4	
1*3=3	2*3=6	3*3=9	
1*4=4	2*4=8	3*4=12	4*4=16	
1*5=5	2*5=10	3*5=15	4*5=20	5*5=25	
1*6=6	2*6=12	3*6=18	4*6=24	5*6=30	6*6=36	
1*7=7	2*7=14	3*7=21	4*7=28	5*7=35	6*7=42	7*7=49	
1*8=8	2*8=16	3*8=24	4*8=32	5*8=40	6*8=48	7*8=56	8*8=64	
1*9=9	2*9=18	3*9=27	4*9=36	5*9=45	6*9=54	7*9=63	8*9=72	9*9=81	
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;help(print)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Help on built-in function print in module builtins:

print(...)
    print(value, ..., sep=&#39; &#39;, end=&#39;\n&#39;, file=sys.stdout, flush=False)
    
    Prints the values to a stream, or to sys.stdout by default.
    Optional keyword arguments:
    file:  a file-like object (stream); defaults to the current sys.stdout.
    sep:   string inserted between values, default a space.
    end:   string appended after the last value, default a newline.
    flush: whether to forcibly flush the stream.
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for row in range(1, 10):
    for col in range(1, row+1):
        formula = &#39;{col}*{row}={res}&#39;
        content = formula.format(col=col, row=row, res=col*row)
        print(content, end=&#39;\t&#39;)
    print()
    
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1*1=1	
1*2=2	2*2=4	
1*3=3	2*3=6	3*3=9	
1*4=4	2*4=8	3*4=12	4*4=16	
1*5=5	2*5=10	3*5=15	4*5=20	5*5=25	
1*6=6	2*6=12	3*6=18	4*6=24	5*6=30	6*6=36	
1*7=7	2*7=14	3*7=21	4*7=28	5*7=35	6*7=42	7*7=49	
1*8=8	2*8=16	3*8=24	4*8=32	5*8=40	6*8=48	7*8=56	8*8=64	
1*9=9	2*9=18	3*9=27	4*9=36	5*9=45	6*9=54	7*9=63	8*9=72	9*9=81	
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;支持&#34;&gt;支持&lt;/h2&gt;
&lt;p&gt;分享不易，谢谢大家分享（或红包）支持^_^&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/my_zanshang_qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在Markdown中用mermaid语法绘制图表</title>
      <link>https://thunderhit.github.io/post/mermaid/</link>
      <pubDate>Thu, 18 Jun 2020 12:45:03 +0800</pubDate>
      <guid>https://thunderhit.github.io/post/mermaid/</guid>
      <description>&lt;p&gt;Mermaid可以用文本方式绘制图表和流程图，相比Visio而言更加的轻量便捷，此外Markdown内部支持Mermaid语法，可以有效避免切换软件，让我们更加专注于内容本身。&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://mermaid-js.github.io/mermaid/#/README&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mermaid官方文档&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#图表类型支持&#34;&gt;图表类型支持&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#饼形图&#34;&gt;饼形图&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#流程图&#34;&gt;流程图&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#时序图&#34;&gt;时序图&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#状态图&#34;&gt;状态图&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#甘特图&#34;&gt;甘特图&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#class类图&#34;&gt;class类图&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#支持&#34;&gt;支持&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;h1 id=&#34;图表类型支持&#34;&gt;图表类型支持&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;饼形图(Pie Chart)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;流程图（Flow Chart）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;时序图（Sequence Diagram）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;状态图(State Diagram)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;甘特图（Gantt Diagram）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;类图(class Diagram)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;等等&lt;/p&gt;
  &lt;br&gt;
&lt;h1 id=&#34;饼形图&#34;&gt;饼形图&lt;/h1&gt;
&lt;p&gt;饼形图是我们经常用到的图表，在mermaid中最简单，基本上一看就会&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;pie 
title Pets adopted by volunteers
&amp;quot;Dogs&amp;quot; : 386
&amp;quot;Cats&amp;quot; : 85
&amp;quot;Rats&amp;quot; : 15
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;​```mermaid
pie 
title Pets adopted by volunteers
&amp;quot;Dogs&amp;quot; : 386
&amp;quot;Cats&amp;quot; : 85
&amp;quot;Rats&amp;quot; : 15 
​```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用到的关键词&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;关键词&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;pie&lt;/td&gt;
&lt;td&gt;定义饼形图&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;title&lt;/td&gt;
&lt;td&gt;标题&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;流程图&#34;&gt;流程图&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD
    A--&amp;gt;B
    A--&amp;gt;C
    B--&amp;gt;D
    C--&amp;gt;D
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该流程图就是用下方的代码再markdown中实现的&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;​```mermaid
graph RL;
    A--&amp;gt;B;
    A--&amp;gt;C;
    B--&amp;gt;D;
    C--&amp;gt;D;
​```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;关键词解读&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;关键词&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;graph&lt;/td&gt;
&lt;td&gt;定义流程图&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TD&lt;/td&gt;
&lt;td&gt;流程图方向。mermai的方位还有T、D、L、 R，分别代表上、下、左、右。两个方位组合成一个流动方向。本案例是从上到下，即TD&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;有向箭头&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;br&gt;
&lt;p&gt;节点还可以用&lt;code&gt;:::&lt;/code&gt;调用修饰函数，如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR
    A:::someclass --&amp;gt; B
    classDef someclass fill:#f96;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;​```mermaid
graph LR
    A:::someclass --&amp;gt; B
    classDef someclass fill:#f96;
​```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;时序图&#34;&gt;时序图&lt;/h1&gt;
&lt;p&gt;时序图用于描述对象之间的传递消息的时间顺序, 即用例中的行为顺序.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;sequenceDiagram
    participant Alice
    participant Bob
    participant John
    Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
    loop Healthcheck
        John-&amp;gt;&amp;gt;John: Fight against hypochondria
    end
    Note right of John: Rational thoughts &amp;lt;br/&amp;gt;prevail!
    John--&amp;gt;&amp;gt;Alice: Great!
    John-&amp;gt;&amp;gt;Bob: How about you?
    Bob--&amp;gt;&amp;gt;John: Jolly good!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;顺序图稍微复杂了一丢丢，代码如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;​```mermaid
sequenceDiagram
    participant Alice
    participant Bob
    participant John
    
    Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
    
    loop Healthcheck
        John-&amp;gt;&amp;gt;John: Fight against hypochondria
    end
    
    Note right of John: Rational thoughts &amp;lt;br/&amp;gt;prevail!
    John--&amp;gt;&amp;gt;Alice: Great!
    John-&amp;gt;&amp;gt;Bob: How about you?
    Bob--&amp;gt;&amp;gt;John: Jolly good!
​```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用到的关键词&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;关键词&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;sequenceDiagram&lt;/td&gt;
&lt;td&gt;定义顺序表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;participant&lt;/td&gt;
&lt;td&gt;定义图中的节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;loop 、end&lt;/td&gt;
&lt;td&gt;循环体代码块，以loop开头，end结束；&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Note&lt;/td&gt;
&lt;td&gt;提示框&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;right of&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;方位关键词&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;实线箭头连接线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--&amp;gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;虚线箭头&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;状态图&#34;&gt;状态图&lt;/h1&gt;
&lt;p&gt;通过建立对象的生存周期模型来描述对象随时间变化的动态行为&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;stateDiagram 
    Start --&amp;gt; First
    First --&amp;gt; Second
    First --&amp;gt; Third
    Second --&amp;gt; End
    Third --&amp;gt; End

    state First {
        [*] --&amp;gt; fir
        fir --&amp;gt; [*]
    }
    state Second {
        [*] --&amp;gt; sec
        sec --&amp;gt; [*]
    }
    state Third {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;​```mermaid
stateDiagram 
    Start --&amp;gt; First
    First --&amp;gt; Second
    First --&amp;gt; Third
    Second --&amp;gt; End
    Third --&amp;gt; End

    state First {
        [*] --&amp;gt; fir
        fir --&amp;gt; [*]
    }
    state Second {
        [*] --&amp;gt; sec
        sec --&amp;gt; [*]
    }
    state Third {}
​```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码关键词解读&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;关键词&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;stateDiagram&lt;/td&gt;
&lt;td&gt;用于定义状态图&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[*]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;实心黑点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;有向实线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;state&lt;/td&gt;
&lt;td&gt;用于定义状态&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;我们可以看到状态state还可以定义内部的流程，如First和Second；Third没有定义内部处理过程。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;甘特图&#34;&gt;甘特图&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;gantt
dateFormat  YYYY-MM-DD
title Adding GANTT diagram to mermaid
excludes 2014-01-10 

section A section
Completed task            :done,    des1, 2014-01-06,2014-01-08
Active task               :active,  des2, 2014-01-09, 3d
Future task               :         des3, after des2, 5d
Future task2               :         des4, after des3, 5d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;​```mermaid
gantt
dateFormat  YYYY-MM-DD
title Adding GANTT diagram to mermaid
excludes weekdays 2014-01-10

section A section
Completed task            :done,    des1, 2014-01-06,2014-01-08
Active task               :active,  des2, 2014-01-09, 3d
Future task               :         des3, after des2, 5d
Future task2               :         des4, after des3, 5d
​```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用到的关键词&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;关键词&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;gantt&lt;/td&gt;
&lt;td&gt;定义甘特图&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dataFormat&lt;/td&gt;
&lt;td&gt;定义日期格式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;title&lt;/td&gt;
&lt;td&gt;标题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;excludes&lt;/td&gt;
&lt;td&gt;排除项目周期中的放假休息等日期&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;section&lt;/td&gt;
&lt;td&gt;定义一个项目&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:done&lt;/code&gt;  、 &lt;code&gt;:active&lt;/code&gt;、&lt;code&gt;:&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;项目中的状态&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;after&lt;/td&gt;
&lt;td&gt;紧随其后&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;class类图&#34;&gt;class类图&lt;/h1&gt;
&lt;p&gt;面向对象的编程会经常看到类，类与类有所属关系。比如中国人是人类的一员，而人类又隶属于灵长类动物。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;classDiagram
      Animal &amp;lt;|-- Duck
      Animal &amp;lt;|-- Fish
      Animal &amp;lt;|-- Zebra
      Animal : int age
      Animal : String gender
      Animal: isMammal()
      Animal: mate()
      class Duck{
          String beakColor
          swim()
          quack()
      }
      class Fish{
          int sizeInFeet
          canEat()
      }
      class Zebra{
          bool is_wild
          run()
          eat()
      }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;​```mermaid
classDiagram
      Animal &amp;lt;|-- Duck
      Animal &amp;lt;|-- Fish
      Animal &amp;lt;|-- Zebra
      Animal : int age
      Animal : String gender
      Animal: isMammal()
      Animal: mate()
      class Duck{
          String beakColor
          swim()
          quack()
      }
      class Fish{
          int sizeInFeet
          canEat()
      }
      class Zebra{
          bool is_wild
          run()
          eat()
      }
​```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用到的关键词&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;关键词&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;classDiagram&lt;/td&gt;
&lt;td&gt;定义类图&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;--&lt;/td&gt;
&lt;td&gt;隶属于某类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Animal : int age&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定义Animal的年龄属性(属性没有用括号)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Animal: isMammal()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定义Animal的是否为哺乳动物方法(方法有括号)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;class Duck&lt;/td&gt;
&lt;td&gt;定义Duck类&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;大家如果熟悉Python，就能理解类的属性和方法区别就是是否有括号。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;支持&#34;&gt;支持&lt;/h2&gt;
&lt;p&gt;分享不易，谢谢大家分享（或红包）支持^_^&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/my_zanshang_qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用Hugo框架建立个人网站</title>
      <link>https://thunderhit.github.io/post/hugo/</link>
      <pubDate>Tue, 16 Jun 2020 17:31:20 +0800</pubDate>
      <guid>https://thunderhit.github.io/post/hugo/</guid>
      <description>&lt;p&gt;在B站看到一位博主用Hugo制作个人博客的视频，感觉挺简单的，真的十几分钟就能看到云端出现自己的博客，当然了想让自己的博客更美观更炫酷，精雕细琢会花很多功夫。现在大家看到的效果，大邓用了一整天的时间，一点点修饰改动出来的。&lt;/p&gt;
&lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#1-安装hugo&#34;&gt;1. 安装Hugo&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#2-新建hugo项目&#34;&gt;2. 新建Hugo项目&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#3-academic主题下载&#34;&gt;3. Academic主题下载&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#4-启动本地博客&#34;&gt;4. 启动本地博客&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#5-在本地新建一篇文章&#34;&gt;5. 在本地新建一篇文章&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#6-将本地博客部署到服务器&#34;&gt;6. 将本地博客部署到服务器&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#更多&#34;&gt;更多&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#实验代码下载&#34;&gt;实验代码下载&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#打赏&#34;&gt;打赏&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h1 id=&#34;1-安装hugo&#34;&gt;1. 安装Hugo&lt;/h1&gt;
&lt;p&gt;这里以&lt;strong&gt;Mac&lt;/strong&gt;为例，安装Hugo，命令行输入&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install hugo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;2-新建hugo项目&#34;&gt;2. 新建Hugo项目&lt;/h1&gt;
&lt;p&gt;切换到桌面(我喜欢把项目放到桌面), 命令行执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd desktop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;新建一个叫做&lt;strong&gt;MyBlog&lt;/strong&gt;的hugo项目文件夹，命令行执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo new site MyBlog
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在可以在桌面看到一个MyBlog文件夹，接下来切换工作目录到MyBlog&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd MyBlog
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;记者目前我们的命令行处于MyBlog的根目录 , 接下来下载网站主题&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;3-academic主题下载&#34;&gt;3. Academic主题下载&lt;/h1&gt;
&lt;p&gt;Hugo有很多主题，我选择的 &lt;a href=&#34;https://themes.gohugo.io/academic/&#34;&gt;https://themes.gohugo.io/academic/&lt;/a&gt;，&lt;/p&gt;
&lt;p&gt;在命令行逐行执行下方命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd themes

git clone https://github.com/gcushen/hugo-academic.git
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    我们可以在 &lt;strong&gt;MyBlog/themes&lt;/strong&gt; 看到多了一个 &lt;strong&gt;hugo-academic文件夹，把hugo-academic改为academic&lt;/strong&gt; ，现在网站已经建立好了~
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    这里切换回项目根目录MyBlog
  &lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;cd ..
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;命令行执行pwd，检查一下目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pwd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;得到&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/Users/电脑用户名/desktop/MyBlog
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h1 id=&#34;4-启动本地博客&#34;&gt;4. 启动本地博客&lt;/h1&gt;
&lt;p&gt;现在我们以academic主题为例，启动博客&lt;/p&gt;
&lt;p&gt;命令行执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo server -t academic --buildDrafts
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    补充: t的意思是主题
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;执行后，在命令行中会提示我们&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://localhost:1313/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在浏览器中复制粘贴上方的链接，我们的Blog毛坯房搭建好了~&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h1 id=&#34;5-在本地新建一篇文章&#34;&gt;5. 在本地新建一篇文章&lt;/h1&gt;
&lt;p&gt;依旧是MyBlog根目录，命令行执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo new post/first-article.md
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    在MyBlog/content内新生成了一个post文件夹，并且post内有了一个first-article.md文件。
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;接下来就是在first-article.md内用markdown方式写内容即可。&lt;/p&gt;
&lt;p&gt;我们测试一下现在的网站,继续回到MyBlog根目录，命令行执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo server -t academic --buildDrafts
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在浏览器中我们可以看到有First Ariticle的文章。&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h1 id=&#34;6-将本地博客部署到服务器&#34;&gt;6. 将本地博客部署到服务器&lt;/h1&gt;
&lt;p&gt;在github新建一个仓库，仓库名命名方式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;你的github用户名&amp;gt;.github.io
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;比如我的github账号名是thunderhit，那么仓库名为&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;thunderhit.github.io
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在MyBlog根目录，命令行执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo --theme=academic --baseUrl=&#39;https://thunderhit.github.io/&#39; --buildDrafts
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    补充: 主题academic, 网站地址 &lt;code&gt;https://thunderhit.github.io/ &lt;/code&gt;，你们根据自己需要改成自己的仓库名
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;现在我们在MyBlog中多了一个public文件夹，其中有我们新建的文章内容。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;绑定public与github仓库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;命令行切换到public目录，初始化git&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd public 
git init
git add .
git commit -m &#39;我的hugo博客第一次提交&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;把public与远程github仓库关联&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;依次执行（大家的github地址略微不同，需要改动一下)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git remote add origin git@github.com:thunderhit/thunderhit.github.io.git

git push -u origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;命令行上传完毕后，在浏览器网址栏打开链接 &lt;a href=&#34;https://thunderhit.github.io/&#34;&gt;https://thunderhit.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;就可以看到我们自己的博客了~&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;featured.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;更多&#34;&gt;更多&lt;/h1&gt;
&lt;p&gt;如果大家想学仔细学Hugo，推荐大家看B站&lt;strong&gt;Up主：ianianying&lt;/strong&gt;的视频&lt;/p&gt;
&lt;iframe
    src=&#34;//player.bilibili.com/player.html?bvid=BV1iA411v7Gi&amp;page=1&#34;
    scrolling=&#34;no&#34;
    height=&#34;768px&#34;
    width=&#34;1024px&#34;
    frameborder=&#34;no&#34;
    framespacing=&#34;0&#34;
    allowfullscreen=&#34;true&#34;
&gt;
&lt;/iframe&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;实验代码下载&#34;&gt;实验代码下载&lt;/h1&gt;
&lt;p&gt;如果实验没成功，大家可以下载我的博客项目。项目资源获取方式，【公众号：大邓和他的Python】后台回复关键词&amp;rdquo;&lt;strong&gt;Hugo&lt;/strong&gt;&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;打赏&#34;&gt;打赏&lt;/h1&gt;
&lt;p&gt;分享不易，谢谢大家分享（或红包）支持^_^&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/my_zanshang_qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>cnsenti库</title>
      <link>https://thunderhit.github.io/project/cnsenti/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      <guid>https://thunderhit.github.io/project/cnsenti/</guid>
      <description>&lt;h1 id=&#34;一cnsenti&#34;&gt;一、cnsenti&lt;/h1&gt;
&lt;p&gt;中文情感分析库(Chinese Sentiment))可对文本进行情绪分析、正负情感分析。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/thunderhit/cnsenti&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github地址&lt;/a&gt; &lt;code&gt;https://github.com/thunderhit/cnsenti&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://pypi.org/project/cnsenti/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pypi地址&lt;/a&gt;  &lt;code&gt;https://pypi.org/project/cnsenti/&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;特性&#34;&gt;特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;情感分析默认使用的知网Hownet&lt;/li&gt;
&lt;li&gt;情感分析可支持导入自定义txt情感词典(pos和neg)&lt;/li&gt;
&lt;li&gt;情绪分析使用大连理工大学情感本体库，可以计算文本中的七大情绪词分布&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;pip install cnsenti
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h1 id=&#34;二快速上手&#34;&gt;二、快速上手&lt;/h1&gt;
&lt;p&gt;中文文本情感词正负情感词统计&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from cnsenti import Sentiment

senti = Sentiment()
test_text= &#39;我好开心啊，非常非常非常高兴！今天我得了一百分，我很兴奋开心，愉快，开心&#39;
result = senti.sentiment_count(test_text)
print(result)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{&#39;words&#39;: 24, 
&#39;sentences&#39;: 2, 
&#39;pos&#39;: 4, 
&#39;neg&#39;: 0}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;中文文本情绪统计&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from cnsenti import Emotion

emotion = Emotion()
test_text = &#39;我好开心啊，非常非常非常高兴！今天我得了一百分，我很兴奋开心，愉快，开心&#39;
result = emotion.emotion_count(test_text)
print(result)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{&#39;words&#39;: 22, 
&#39;sentences&#39;: 2, 
&#39;好&#39;: 0, 
&#39;乐&#39;: 4, 
&#39;哀&#39;: 0, 
&#39;怒&#39;: 0, 
&#39;惧&#39;: 0, 
&#39;恶&#39;: 0, 
&#39;惊&#39;: 0}
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h1 id=&#34;三文档&#34;&gt;三、文档&lt;/h1&gt;
&lt;p&gt;cnsenti包括Emotion和Sentiment两大类，其中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Emotion&lt;/strong&gt; 情绪计算类,包括**emotion_count(text)**方法&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sentiment&lt;/strong&gt; 正负情感计算类，包括**sentiment_count(text)&lt;strong&gt;和&lt;/strong&gt;sentiment_calculate(text)**两种方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;31-emotion_counttext&#34;&gt;3.1 emotion_count(text)&lt;/h3&gt;
&lt;p&gt;emotion_count(text)y用于统计文本中各种情绪形容词出现的词语数。使用大连理工大学情感本体库词典，支持&lt;strong&gt;七种情绪统计(好、乐、哀、怒、惧、恶、惊)&lt;/strong&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from cnsenti import Emotion

emotion = Emotion()
test_text = &#39;我好开心啊，非常非常非常高兴！今天我得了一百分，我很兴奋开心，愉快，开心&#39;
result = emotion.emotion_count(test_text)
print(result)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;返回&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{&#39;words&#39;: 22, 
&#39;sentences&#39;: 2, 
&#39;好&#39;: 0, 
&#39;乐&#39;: 4, 
&#39;哀&#39;: 0, 
&#39;怒&#39;: 0, 
&#39;惧&#39;: 0, 
&#39;恶&#39;: 0, 
&#39;惊&#39;: 0}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;words&lt;/strong&gt; 中文文本的词语数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sentences&lt;/strong&gt; 中文文本的句子数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;好、乐、哀、怒、惧、恶、惊&lt;/strong&gt;  text中各自情绪出现的词语数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;32-sentiment_counttext&#34;&gt;3.2 sentiment_count(text)&lt;/h3&gt;
&lt;p&gt;隶属于Sentiment类，可对文本text中的正、负面词进行统计。默认使用Hownet词典，后面会讲到如何导入自定义正、负情感txt词典文件。这里以默认hownet词典进行统计。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from cnsenti import Sentiment

senti = Sentiment()
test_text = &#39;我好开心啊，非常非常非常高兴！今天我得了一百分，我很兴奋开心，愉快，开心&#39;
result = senti.sentiment_count(test_text)
print(result)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{&#39;words&#39;: 24, 
&#39;sentences&#39;: 2, 
&#39;pos&#39;: 4, 
&#39;neg&#39;: 0}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;words 文本中词语数&lt;/li&gt;
&lt;li&gt;sentences 文本中句子数&lt;/li&gt;
&lt;li&gt;pos 文本中正面词总个数&lt;/li&gt;
&lt;li&gt;neg 文本中负面词总个数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;33-sentiment_calculatetext&#34;&gt;3.3 sentiment_calculate(text)&lt;/h3&gt;
&lt;p&gt;隶属于Sentiment类，可更加精准的计算文本的情感信息。相比于sentiment_count只统计文本正负情感词个数，sentiment_calculate还考虑了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;情感词前是否有强度副词的修饰作用&lt;/li&gt;
&lt;li&gt;情感词前是否有否定词的情感语义反转作用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from cnsenti import Sentiment

senti = Sentiment()
test_text = &#39;我好开心啊，非常非常非常高兴！今天我得了一百分，我很兴奋开心，愉快，开心&#39;
result1 = senti.sentiment_count(test_text)
result2 = senti.sentiment_calculate(test_text)
print(&#39;sentiment_count&#39;,result1)
print(&#39;sentiment_calculate&#39;,result2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sentiment_count 
{&#39;words&#39;: 22, 
&#39;sentences&#39;: 2, 
&#39;pos&#39;: 4, 
&#39;neg&#39;: 0}

sentiment_calculate 
{&#39;sentences&#39;: 2, 
&#39;words&#39;: 22, 
&#39;pos&#39;: 27.0, 
&#39;neg&#39;: 0.0}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;34-自定义词典&#34;&gt;3.4 自定义词典&lt;/h3&gt;
&lt;p&gt;我们先看看没有情感形容词的情形&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from cnsenti import Sentiment
senti = Sentiment()      #两txt均为utf-8编码
test_text = &#39;这家公司是行业的引领者，是中流砥柱。&#39;
result1 = senti.sentiment_count(test_text)
result2 = senti.sentiment_calculate(test_text)
print(&#39;sentiment_count&#39;,result1)
print(&#39;sentiment_calculate&#39;,result2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sentiment_count {&#39;words&#39;: 10, &#39;sentences&#39;: 1, &#39;pos&#39;: 0, &#39;neg&#39;: 0}
sentiment_calculate {&#39;sentences&#39;: 1, &#39;words&#39;: 10, &#39;pos&#39;: 0, &#39;neg&#39;: 0}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如我所料，虽然句子是正面的，但是因为cnsenti自带的情感词典仅仅是形容词情感词典，对于很多场景而言，适用性有限，所以pos=0。&lt;/p&gt;
&lt;h4 id=&#34;341-自定词典格式&#34;&gt;3.4.1 自定词典格式&lt;/h4&gt;
&lt;p&gt;好在cnsenti支持导入自定义词典，但目前&lt;strong&gt;只有Sentiment类支持导入自定义正负情感词典&lt;/strong&gt;，自定义词典需要满足&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;必须为txt文件&lt;/li&gt;
&lt;li&gt;原则上建议encoding为utf-8&lt;/li&gt;
&lt;li&gt;txt文件每行只有一个词&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;342-sentiment自定义词典参数&#34;&gt;3.4.2 Sentiment自定义词典参数&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;senti = Sentiment(pos=&#39;正面词自定义.txt&#39;,  
                  neg=&#39;负面词自定义.txt&#39;, 
                  merge=True,  
                  encoding=&#39;utf-8&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;pos 正面情感词典txt文件路径&lt;/li&gt;
&lt;li&gt;neg 负面情感词典txt文件路径&lt;/li&gt;
&lt;li&gt;merge 布尔值；merge=True，cnsenti会融合自定义词典和cnsenti自带词典；merge=False，cnsenti只使用自定义词典&lt;/li&gt;
&lt;li&gt;encoding  两txt均为utf-8编码&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;343-自定义词典使用案例&#34;&gt;3.4.3 自定义词典使用案例&lt;/h4&gt;
&lt;p&gt;这部分我放到test文件夹内,代码和自定义词典均在test内，所以我使用相对路径设定自定义词典的路径&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;|test
   |---代码.py
   |---正面词自定义.txt
   |---负面词自定义.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;正面词自定义.txt&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;中流砥柱
引领者
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from cnsenti import Sentiment

senti = Sentiment(pos=&#39;正面词自定义.txt&#39;,  #正面词典txt文件相对路径
                  neg=&#39;负面词自定义.txt&#39;,  #负面词典txt文件相对路径
                  merge=True,             #融合cnsenti自带词典和用户导入的自定义词典
                  encoding=&#39;utf-8&#39;)      #两txt均为utf-8编码

test_text = &#39;这家公司是行业的引领者，是中流砥柱。今年的业绩非常好。&#39;
result1 = senti.sentiment_count(test_text)
result2 = senti.sentiment_calculate(test_text)
print(&#39;sentiment_count&#39;,result1)
print(&#39;sentiment_calculate&#39;,result2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sentiment_count {&#39;words&#39;: 16, &#39;sentences&#39;: 2, &#39;pos&#39;: 2, &#39;neg&#39;: 0}
sentiment_calculate {&#39;sentences&#39;: 2, &#39;words&#39;: 16, &#39;pos&#39;: 5, &#39;neg&#39;: 0}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面参数我们传入了正面自定义词典和负面自定义词典，并且使用了融合模式（merge=True），可以利用cnsenti自带的词典和刚刚导入的自定义词典进行情感计算。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;补充：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我设计的这个库目前仅能支持两类型pos和neg，如果你的研究问题是两分类问题，如好坏、美丑、善恶、正邪、友好敌对，你就可以定义两个txt文件，分别赋值给pos和neg，就可以使用cnsenti库。&lt;/p&gt;
&lt;br&gt;
&lt;h1 id=&#34;四关于词典&#34;&gt;四、关于词典&lt;/h1&gt;
&lt;p&gt;目前比较有可解释性的文本分析方法是词典法，算法逻辑都很清晰。词典的好坏决定了情感分析的好坏。如果没有词典，也就限制了你进行文本情感计算。&lt;/p&gt;
&lt;p&gt;目前大多数人使用的是形容词情感词典，如大连理工大学情感本体库和知网Hownet，优点是直接拿来用，缺点也很明显，对于很多带情感却无形容词的文本无能为力。如&lt;strong&gt;这手机很耐摔&lt;/strong&gt;， 使用形容词情感词典计算得分pos和neg均为0。类似问题在不同研究对象的文本数据应该都是挺普遍的，所以人工构建情感词典还是很有必要的。&lt;/p&gt;
&lt;p&gt;我封装了刘焕勇基于so_pmi算法的新词发现代码，将该库其命名为&lt;strong&gt;wordexpansion&lt;/strong&gt;。wordexpansion可以极大的提高提高自定义词典的构建速度，感兴趣的童鞋详情可以访问
&lt;a href=&#34;https://github.com/thunderhit/wordexpansion&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wordexpansion项目地址&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;如果&#34;&gt;如果&lt;/h2&gt;
&lt;p&gt;如果您是经管人文社科专业背景，编程小白，面临海量文本数据采集和处理分析艰巨任务，个人建议学习
&lt;a href=&#34;https://ke.qq.com/course/482241?tuin=163164df&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《python网络爬虫与文本数据分析》&lt;/a&gt;视频课。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;python入门&lt;/li&gt;
&lt;li&gt;网络爬虫&lt;/li&gt;
&lt;li&gt;数据读取&lt;/li&gt;
&lt;li&gt;文本分析入门&lt;/li&gt;
&lt;li&gt;机器学习与文本分析&lt;/li&gt;
&lt;li&gt;文本分析在经管研究中的应用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;感兴趣的童鞋不妨 戳一下
&lt;a href=&#34;https://ke.qq.com/course/482241?tuin=163164df&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《python网络爬虫与文本数据分析》&lt;/a&gt;进来看看~&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;更多&#34;&gt;更多&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://space.bilibili.com/122592901/channel/detail?cid=66008&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;B站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;公众号：大邓和他的python&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.zhihu.com/people/deng-xu-dong-hit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;知乎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/thunderhit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&#34;支持&#34;&gt;支持&lt;/h2&gt;
&lt;p&gt;分享不易，谢谢大家分享（或红包）支持^_^&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/my_zanshang_qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>eventextraction库</title>
      <link>https://thunderhit.github.io/project/eventextraction/</link>
      <pubDate>Sat, 16 May 2020 00:00:00 +0000</pubDate>
      <guid>https://thunderhit.github.io/project/eventextraction/</guid>
      <description>&lt;h1 id=&#34;一文本事理类型分析&#34;&gt;一、文本事理类型分析&lt;/h1&gt;
&lt;p&gt;中文复合事件抽取，可以用来识别文本的模式，包括条件事件、顺承事件、反转事件。&lt;/p&gt;
&lt;p&gt;我仅仅是对代码做了简单的修改，增加了函数说明注释和stats函数，可以用于统计文本中各种模式的分布(数量)情况。代码原作者为刘焕勇 &lt;a href=&#34;https://github.com/liuhuanyong&#34;&gt;https://github.com/liuhuanyong&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;事件图谱事理图谱的类型&#34;&gt;事件图谱（事理图谱）的类型&lt;/h3&gt;
&lt;p&gt;项目地址https://github.com/liuhuanyong/ComplexEventExtraction 项目介绍很详细，感兴趣的一定要去原项目看一下。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;事件&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;th&gt;形式化&lt;/th&gt;
&lt;th&gt;事件应用&lt;/th&gt;
&lt;th&gt;图谱场景&lt;/th&gt;
&lt;th&gt;举例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;条件事件&lt;/td&gt;
&lt;td&gt;某事件条件下另一事件发生&lt;/td&gt;
&lt;td&gt;如果A那么B&lt;/td&gt;
&lt;td&gt;事件预警&lt;/td&gt;
&lt;td&gt;时机判定&lt;/td&gt;
&lt;td&gt;&amp;lt;限制放宽,立即增产&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;反转事件&lt;/td&gt;
&lt;td&gt;某事件与另一事件形成对立&lt;/td&gt;
&lt;td&gt;虽然A但是B&lt;/td&gt;
&lt;td&gt;预防不测&lt;/td&gt;
&lt;td&gt;反面教材&lt;/td&gt;
&lt;td&gt;&amp;lt;起步晚,发展快&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;顺承事件&lt;/td&gt;
&lt;td&gt;某事件紧接着另一事件发生&lt;/td&gt;
&lt;td&gt;A接着B&lt;/td&gt;
&lt;td&gt;事件演化&lt;/td&gt;
&lt;td&gt;未来意图识别&lt;/td&gt;
&lt;td&gt;&amp;lt;去旅游,买火车票&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;分析出文本中的条件、顺承、反转，理论上就可以构建知识网络(本库做不到这可视化)。
1、反转事件图谱
&lt;img src=&#34;img/but.png&#34; alt=&#34;&#34;&gt;
2、条件事件图谱
&lt;img src=&#34;img/condition.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h1 id=&#34;二安装方法&#34;&gt;二、安装方法&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;pip install eventextraction
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h1 id=&#34;三使用&#34;&gt;三、使用&lt;/h1&gt;
&lt;h3 id=&#34;31-主函数&#34;&gt;3.1 主函数&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;from eventextraction import EventsExtraction

extractor = EventsExtraction()
content = &#39;虽然你做了坏事，但我觉得你是好人。一旦时机成熟，就坚决推行&#39;
datas = extractor.extract_main(content)
print(datas)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行结果&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[{&#39;sent&#39;: &#39;虽然你做了坏事，但我觉得你是好人&#39;, &#39;type&#39;: &#39;but&#39;, &#39;tuples&#39;: {&#39;pre_wd&#39;: &#39;虽然&#39;, &#39;pre_part&#39;: &#39;你做了坏事，&#39;, &#39;post_wd&#39;: &#39;但&#39;, &#39;post_part &#39;: &#39;我觉得你是好人&#39;}},
{&#39;sent&#39;: &#39;一旦时机成熟，就坚决推行&#39;, &#39;type&#39;: &#39;condition&#39;, &#39;tuples&#39;: {&#39;pre_wd&#39;: &#39;一旦&#39;, &#39;pre_part&#39;: &#39;时机成熟，&#39;, &#39;post_wd&#39;: &#39;就&#39;, &#39;post_part &#39;: &#39;坚决推行&#39;}}]

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;32-统计&#34;&gt;3.2 统计&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;from eventextraction import EventsExtraction

extractor = EventsExtraction()
content = &#39;虽然你做了坏事，但我觉得你是好人。一旦时机成熟，就坚决推行&#39;
datas = extractor.extract_main(content)
print(extractor.stats(datas))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行结果&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{&#39;but&#39;: 1, &#39;condition&#39;: 1, &#39;seq&#39;: 0, &#39;more&#39;: 0, &#39;other&#39;: 0}
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h2 id=&#34;如果&#34;&gt;如果&lt;/h2&gt;
&lt;p&gt;如果您是经管人文社科专业背景，编程小白，面临海量文本数据采集和处理分析艰巨任务，个人建议学习
&lt;a href=&#34;https://ke.qq.com/course/482241?tuin=163164df&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《python网络爬虫与文本数据分析》&lt;/a&gt;视频课。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;python入门&lt;/li&gt;
&lt;li&gt;网络爬虫&lt;/li&gt;
&lt;li&gt;数据读取&lt;/li&gt;
&lt;li&gt;文本分析入门&lt;/li&gt;
&lt;li&gt;机器学习与文本分析&lt;/li&gt;
&lt;li&gt;文本分析在经管研究中的应用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;感兴趣的童鞋不妨 戳一下
&lt;a href=&#34;https://ke.qq.com/course/482241?tuin=163164df&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《python网络爬虫与文本数据分析》&lt;/a&gt;进来看看~&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;更多&#34;&gt;更多&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://space.bilibili.com/122592901/channel/detail?cid=66008&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;B站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;公众号：大邓和他的python&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.zhihu.com/people/deng-xu-dong-hit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;知乎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[github](&lt;a href=&#34;https://github.com/thunderhit&#34;&gt;https://github.com/thunderhit&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&#34;支持&#34;&gt;支持&lt;/h2&gt;
&lt;p&gt;分享不易，谢谢大家点赞分享和红包^_^&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/my_zanshang_qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>cntopic:快速构建不同领域(手机、汽车等)的情感词典</title>
      <link>https://thunderhit.github.io/project/cntopic/</link>
      <pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate>
      <guid>https://thunderhit.github.io/project/cntopic/</guid>
      <description>&lt;h1 id=&#34;cntopic&#34;&gt;cntopic&lt;/h1&gt;
&lt;p&gt;简单好用的lda话题模型，支持中英文。该库基于gensim和pyLDAvis，实现了lda话题模型及可视化功能。&lt;/p&gt;
&lt;iframe
    src=&#34;//player.bilibili.com/player.html?bvid=BV1m54y1B7F9&amp;page=1&#34;
    scrolling=&#34;no&#34;
    height=&#34;768px&#34;
    width=&#34;1024px&#34;
    frameborder=&#34;no&#34;
    framespacing=&#34;0&#34;
    allowfullscreen=&#34;true&#34;
&gt;
&lt;/iframe&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;安装&#34;&gt;安装&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pip install cntopic
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;使用&#34;&gt;使用&lt;/h1&gt;
&lt;p&gt;这里给大家引入一个场景，假设大家采集新闻数据，忘记采集新闻文本对应的新闻类别，如果人工标注又很费工夫。这时候我们可以用lda话题模型帮我们洞察数据中的规律，发现新闻有n种话题群体。这样lda模型对数据自动打标注topic_1, topic_2, topic_3&amp;hellip; ,topic_n。&lt;/p&gt;
&lt;p&gt;我们研究者的工作量仅仅限于解读topic_1, topic_2, topic_3&amp;hellip; ,topic_n分别是什么话题即可。&lt;/p&gt;
&lt;p&gt;lda训练过程，大致分为&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;读取文件&lt;/li&gt;
&lt;li&gt;准备数据&lt;/li&gt;
&lt;li&gt;训练lda模型&lt;/li&gt;
&lt;li&gt;使用lda模型&lt;/li&gt;
&lt;li&gt;存储与导入lda模型&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;1-读取文件&#34;&gt;1. 读取文件&lt;/h1&gt;
&lt;p&gt;这里我们用一个新闻数据,一共有10类，每类1000条数据，涵盖&lt;/p&gt;
&lt;p&gt;&amp;lsquo;时尚&amp;rsquo;, &amp;lsquo;财经&amp;rsquo;, &amp;lsquo;科技&amp;rsquo;, &amp;lsquo;教育&amp;rsquo;, &amp;lsquo;家居&amp;rsquo;, &amp;lsquo;体育&amp;rsquo;, &amp;lsquo;时政&amp;rsquo;, &amp;lsquo;游戏&amp;rsquo;, &amp;lsquo;房产&amp;rsquo;, &amp;lsquo;娱乐&amp;rsquo;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd

df = pd.read_csv(&#39;chinese_news.csv&#39;)
df.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;label&lt;/th&gt;
      &lt;th&gt;content&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;体育&lt;/td&gt;
      &lt;td&gt;鲍勃库西奖归谁属？ NCAA最强控卫是坎巴还是弗神新浪体育讯如今，本赛季的NCAA进入到了末...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;体育&lt;/td&gt;
      &lt;td&gt;麦基砍28+18+5却充满寂寞 纪录之夜他的痛阿联最懂新浪体育讯上天对每个人都是公平的，贾维...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;体育&lt;/td&gt;
      &lt;td&gt;黄蜂vs湖人首发：科比冲击七连胜 火箭两旧将登场新浪体育讯北京时间3月28日，NBA常规赛洛...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;体育&lt;/td&gt;
      &lt;td&gt;双面谢亚龙作秀终成做作 谁来为低劣行政能力埋单是谁任命了谢亚龙？谁放纵了谢亚龙？谁又该为谢亚...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;体育&lt;/td&gt;
      &lt;td&gt;兔年首战山西换帅后有虎胆 张学文用乔丹名言励志今晚客场挑战浙江稠州银行队，是山西汾酒男篮的兔...&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;label标签的分布情况&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;label&#39;].value_counts()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;家居    1000
时尚    1000
房产    1000
时政    1000
教育    1000
游戏    1000
财经    1000
娱乐    1000
体育    1000
科技    1000
Name: label, dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;2-准备数据&#34;&gt;2. 准备数据&lt;/h1&gt;
&lt;p&gt;一般准备数据包括:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;分词、数据清洗&lt;/li&gt;
&lt;li&gt;按照模块需求整理数据的格式&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意在scikit-learn中:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;英文文本不需要分词，原封不动传入即可。&lt;/li&gt;
&lt;li&gt;中文文本需要先分词，后整理为英文那样用空格间隔的字符串。形如”我 爱 中国“&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import jieba

def text2tokens(raw_text):
    #将文本raw_text分词后得到词语列表
    tokens = jieba.lcut(raw_text)
    #tokens = raw_text.lower().split(&#39; &#39;) #英文用空格分词即可
    tokens = [t for t in tokens if len(t)&amp;gt;1] #剔除单字
    return tokens

#对content列中所有的文本依次进行分词
documents = [text2tokens(txt) 
             for txt in df[&#39;content&#39;]]  

#显示前5个document
print(documents[:5])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[&#39;鲍勃&#39;, &#39;库西&#39;, &#39;奖归&#39;, &#39;NCAA&#39;, &#39;最强&#39;, &#39;控卫&#39;, &#39;坎巴&#39;, &#39;还是&#39;, &#39;弗神&#39;, &#39;新浪&#39;, &#39;体育讯&#39;, &#39;称赞&#39;, &#39;得分&#39;, &#39;能力&#39;, &#39;毋庸置疑&#39;,...],
[&#39;球员&#39;, &#39;大东&#39;, &#39;赛区&#39;, &#39;锦标赛&#39;, &#39;全国&#39;, &#39;锦标赛&#39;, &#39;他场&#39;, &#39;27.1&#39;, &#39;6.1&#39;, &#39;篮板&#39;, &#39;5.1&#39;, &#39;助攻&#39;,..],
[&#39;依旧&#39;, &#39;如此&#39;, &#39;给力&#39;, &#39;疯狂&#39;, &#39;表现&#39;, &#39;开始&#39;, &#39;这个&#39;, &#39;赛季&#39;, &#39;疯狂&#39;, &#39;表现&#39;, &#39;结束&#39;, &#39;这个&#39;, &#39;赛季&#39;, &#39;我们&#39;, &#39;全国&#39;, &#39;锦标赛&#39;, &#39;前进&#39;, &#39;并且&#39;, &#39;之前&#39;, &#39;曾经&#39;, &#39;连赢&#39;, &#39;赢得&#39;, &#39;大东&#39;, ...],
[&#39;赛区&#39;, &#39;锦标赛&#39;, &#39;冠军&#39;, &#39;这些&#39;, &#39;归功于&#39;, &#39;坎巴&#39;, &#39;沃克&#39;, &#39;康涅狄格&#39;, &#39;大学&#39;, &#39;主教练&#39;, &#39;吉姆&#39;, &#39;卡洪&#39;, ...],
[&#39;称赞&#39;, &#39;一名&#39;, &#39;纯正&#39;, &#39;控卫&#39;, &#39;而且&#39;, &#39;能为&#39;, &#39;我们&#39;, &#39;得分&#39;, &#39;单场&#39;, &#39;42&#39;, &#39;有过&#39;, &#39;单场&#39;, &#39;17&#39;, &#39;助攻&#39;, ...]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;3-训练lda模型&#34;&gt;3. 训练lda模型&lt;/h1&gt;
&lt;p&gt;现在开始正式使用cntopic模块，开启LDA话题模型分析。步骤包括&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Step&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;功能&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;代码&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;准备documents，已经在前面准备好了&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;初始化Topic类&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;topic = Topic(cwd=os.getcwd())&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;根据documents数据，构建词典空间&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;topic.create_dictionary(documents=documents)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;构建语料(将文本转为文档-词频矩阵)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;topic.create_corpus(documents=documents)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;指定n_topics，构建LDA话题模型&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;topic.train_lda_model(n_topics)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这里我们就按照n_topics=10构建lda话题模型，一般情况n_topics可能要实验多次，找到最佳的n_topics&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;img/test.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;运行过程中会在代码所在的文件夹内生成一个output文件夹，内部含有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dictionary.dict 词典文件&lt;/li&gt;
&lt;li&gt;lda.model.xxx 多个lda模型文件，其中xxx是代指&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;img/output.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;img/model.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上述代码耗时较长，请耐心等待程序运行完毕~&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os
from cntopic import Topic

topic = Topic(cwd=os.getcwd()) #构建词典dictionary
topic.create_dictionary(documents=documents) #根据documents数据，构建词典空间
topic.create_corpus(documents=documents) #构建语料(将文本转为文档-词频矩阵)
topic.train_lda_model(n_topics=10) #指定n_topics，构建LDA话题模型
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;gensim.models.ldamulticore.LdaMulticore at 0x158da5090&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;4-使用lda模型&#34;&gt;4. 使用LDA模型&lt;/h1&gt;
&lt;p&gt;上面的代码大概运行了5分钟，LDA模型已经训练好了。&lt;/p&gt;
&lt;p&gt;现在我们可以利用LDA做一些事情，包括&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Step&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;功能&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;代码&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;补充&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;分词后的某文档&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;document = [&amp;lsquo;游戏&amp;rsquo;, &amp;lsquo;体育&amp;rsquo;]&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;预测document对应的话题&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;topic.get_document_topics(document)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;显示每种话题与对应的特征词之间关系&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;topic.show_topics()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;数据中不同话题分布情况&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;topic.topic_distribution(raw_documents)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;raw_documents是列表或series，如本教程中的df[&amp;lsquo;content&amp;rsquo;]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;可视化LDA话题模型（&lt;strong&gt;功能不稳定&lt;/strong&gt;）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;topic.visualize_lda()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;可视化结果在output中查找vis.html文件，浏览器打开即可&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;41-准备document&#34;&gt;4.1 准备document&lt;/h2&gt;
&lt;p&gt;假设有一个文档 &lt;code&gt;&#39;游戏体育真有意思&#39;&lt;/code&gt; 分词处理得到document&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;document = jieba.lcut(&#39;游戏体育真有意思&#39;)
document
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;游戏&#39;, &#39;体育&#39;, &#39;真&#39;, &#39;有意思&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;42-预测document对应的话题&#34;&gt;4.2 预测document对应的话题&lt;/h2&gt;
&lt;p&gt;我们使用topic模型，看看document对应的话题&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;topic.get_document_topics(document)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[(0, 0.02501536),
 (1, 0.025016038),
 (2, 0.28541195),
 (3, 0.025018401),
 (4, 0.025018891),
 (5, 0.025017735),
 (6, 0.51443774),
 (7, 0.02502284),
 (8, 0.025015472),
 (9, 0.025025582)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们的lda话题模型是按照n_topics=10训练的，限制调用topic预测某个document时，得到的结果是这10种话题及对应概率的元组列表。&lt;/p&gt;
&lt;p&gt;从中可以看到概率最大的是 &lt;code&gt;话题6&lt;/code&gt;， 概率有0.51443774。&lt;/p&gt;
&lt;p&gt;所以我们可以大致认为document是话题6&lt;/p&gt;
&lt;h2 id=&#34;43-显示每种话题与对应的特征词之间关系&#34;&gt;4.3 显示每种话题与对应的特征词之间关系&lt;/h2&gt;
&lt;p&gt;但是仅仅告诉每个文档是 &lt;code&gt;话题n&lt;/code&gt;，我们仍然不知道 &lt;code&gt;话题n&lt;/code&gt;代表的是什么，所以我们需要看看每种 &lt;code&gt;话题n&lt;/code&gt;对应的 &lt;code&gt;特征词语&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;topic.show_topics()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[(0,
  &#39;0.042*&amp;quot;基金&amp;quot; + 0.013*&amp;quot;市场&amp;quot; + 0.011*&amp;quot;投资&amp;quot; + 0.009*&amp;quot;公司&amp;quot; + 0.005*&amp;quot;上涨&amp;quot; + 0.004*&amp;quot;股票&amp;quot; + 0.004*&amp;quot;房地产&amp;quot; + 0.004*&amp;quot;指数&amp;quot; + 0.004*&amp;quot;房价&amp;quot; + 0.004*&amp;quot;2008&amp;quot;&#39;),
 (1,
  &#39;0.010*&amp;quot;中国&amp;quot; + 0.007*&amp;quot;移民&amp;quot; + 0.006*&amp;quot;项目&amp;quot; + 0.005*&amp;quot;发展&amp;quot; + 0.005*&amp;quot;表示&amp;quot; + 0.005*&amp;quot;经济&amp;quot; + 0.005*&amp;quot;政府&amp;quot; + 0.005*&amp;quot;土地&amp;quot; + 0.004*&amp;quot;政策&amp;quot; + 0.004*&amp;quot;问题&amp;quot;&#39;),
 (2,
  &#39;0.014*&amp;quot;比赛&amp;quot; + 0.009*&amp;quot;他们&amp;quot; + 0.008*&amp;quot;球队&amp;quot; + 0.007*&amp;quot;篮板&amp;quot; + 0.006*&amp;quot;我们&amp;quot; + 0.005*&amp;quot;球员&amp;quot; + 0.005*&amp;quot;季后赛&amp;quot; + 0.005*&amp;quot;时间&amp;quot; + 0.005*&amp;quot;热火&amp;quot; + 0.005*&amp;quot;赛季&amp;quot;&#39;),
 (3,
  &#39;0.013*&amp;quot;我们&amp;quot; + 0.013*&amp;quot;一个&amp;quot; + 0.009*&amp;quot;自己&amp;quot; + 0.009*&amp;quot;这个&amp;quot; + 0.007*&amp;quot;没有&amp;quot; + 0.007*&amp;quot;他们&amp;quot; + 0.006*&amp;quot;可以&amp;quot; + 0.006*&amp;quot;就是&amp;quot; + 0.006*&amp;quot;很多&amp;quot; + 0.006*&amp;quot;记者&amp;quot;&#39;),
 (4,
  &#39;0.020*&amp;quot;电影&amp;quot; + 0.010*&amp;quot;导演&amp;quot; + 0.009*&amp;quot;微博&amp;quot; + 0.008*&amp;quot;影片&amp;quot; + 0.006*&amp;quot;观众&amp;quot; + 0.006*&amp;quot;一个&amp;quot; + 0.005*&amp;quot;自己&amp;quot; + 0.005*&amp;quot;票房&amp;quot; + 0.004*&amp;quot;拍摄&amp;quot; + 0.004*&amp;quot;娱乐&amp;quot;&#39;),
 (5,
  &#39;0.018*&amp;quot;学生&amp;quot; + 0.015*&amp;quot;留学&amp;quot; + 0.008*&amp;quot;大学&amp;quot; + 0.008*&amp;quot;可以&amp;quot; + 0.006*&amp;quot;功能&amp;quot; + 0.006*&amp;quot;像素&amp;quot; + 0.006*&amp;quot;拍摄&amp;quot; + 0.006*&amp;quot;采用&amp;quot; + 0.005*&amp;quot;学校&amp;quot; + 0.005*&amp;quot;申请&amp;quot;&#39;),
 (6,
  &#39;0.007*&amp;quot;玩家&amp;quot; + 0.006*&amp;quot;封神&amp;quot; + 0.006*&amp;quot;手机&amp;quot; + 0.006*&amp;quot;online&amp;quot; + 0.006*&amp;quot;the&amp;quot; + 0.006*&amp;quot;游戏&amp;quot; + 0.005*&amp;quot;陈水扁&amp;quot; + 0.005*&amp;quot;活动&amp;quot; + 0.005*&amp;quot;to&amp;quot; + 0.005*&amp;quot;一个&amp;quot;&#39;),
 (7,
  &#39;0.009*&amp;quot;信息&amp;quot; + 0.009*&amp;quot;考试&amp;quot; + 0.009*&amp;quot;游戏&amp;quot; + 0.007*&amp;quot;工作&amp;quot; + 0.007*&amp;quot;手机&amp;quot; + 0.006*&amp;quot;四六级&amp;quot; + 0.006*&amp;quot;考生&amp;quot; + 0.005*&amp;quot;发展&amp;quot; + 0.004*&amp;quot;可以&amp;quot; + 0.004*&amp;quot;霸王&amp;quot;&#39;),
 (8,
  &#39;0.015*&amp;quot;我们&amp;quot; + 0.011*&amp;quot;企业&amp;quot; + 0.011*&amp;quot;产品&amp;quot; + 0.010*&amp;quot;市场&amp;quot; + 0.009*&amp;quot;家具&amp;quot; + 0.009*&amp;quot;品牌&amp;quot; + 0.008*&amp;quot;消费者&amp;quot; + 0.007*&amp;quot;行业&amp;quot; + 0.007*&amp;quot;中国&amp;quot; + 0.007*&amp;quot;一个&amp;quot;&#39;),
 (9,
  &#39;0.012*&amp;quot;游戏&amp;quot; + 0.011*&amp;quot;玩家&amp;quot; + 0.010*&amp;quot;可以&amp;quot; + 0.008*&amp;quot;搭配&amp;quot; + 0.008*&amp;quot;活动&amp;quot; + 0.006*&amp;quot;时尚&amp;quot; + 0.005*&amp;quot;OL&amp;quot; + 0.004*&amp;quot;获得&amp;quot; + 0.004*&amp;quot;任务&amp;quot; + 0.004*&amp;quot;手机&amp;quot;&#39;)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据上面的 &lt;code&gt;话题n&lt;/code&gt; 与 &lt;code&gt;特征词&lt;/code&gt; 大致可以解读每个 &lt;code&gt;话题n&lt;/code&gt; 是什么内容的话题。&lt;/p&gt;
&lt;h2 id=&#34;44-话题分布情况&#34;&gt;4.4 话题分布情况&lt;/h2&gt;
&lt;p&gt;现在我们想知道数据集中不同 &lt;code&gt;话题n&lt;/code&gt; 的分布情况&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;topic.topic_distribution(raw_documents=df[&#39;content&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;9    1670
1    1443
0    1318
5    1265
4    1015
2     970
8     911
3     865
7     307
6     236
Name: topic, dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们的数据有10类，每类是1000条。而现在LDA话题模型单纯的根据文本的一些线索，按照n_topics=10给我们分出的效果还不错。&lt;/p&gt;
&lt;p&gt;最完美的情况是每个 &lt;code&gt;话题n&lt;/code&gt; 都是接近1000, 现在 &lt;code&gt;话题9&lt;/code&gt;太多， &lt;code&gt;话题6、 话题7&lt;/code&gt;太少。&lt;/p&gt;
&lt;p&gt;不过我们也要注意到某些话题可能存在交集，容易分错，比如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;财经、房产、时政&lt;/li&gt;
&lt;li&gt;体育娱乐&lt;/li&gt;
&lt;li&gt;财经、科技&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;等&lt;/p&gt;
&lt;p&gt;综上，目前模型还算可以，表现还能接受。&lt;/p&gt;
&lt;h2 id=&#34;45-可视化功能不稳定&#34;&gt;4.5 可视化（功能不稳定）&lt;/h2&gt;
&lt;p&gt;现在只有10个话题， 我们用肉眼看还能接受，但是当话题数太多的时，还是借助可视化工具帮助我们科学评判训练结果。&lt;/p&gt;
&lt;p&gt;这就用到topic.visualize_lda()，&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;topic.visualize_lda()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行结束后在&lt;/p&gt;
&lt;p&gt;&lt;code&gt;代码所在的文件夹output文件夹中找vis.html文件，右键浏览器打开&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可视化功能不稳定，存在vis.html打不开的情况；希望海涵&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;img/vis.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;图中有左右两大区域&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;左侧  话题分布情况，圆形越大话题越多，圆形四散在四个象限&lt;/li&gt;
&lt;li&gt;右侧  某话题对应的特征词，从上到下权重越来越低&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要注意的是左侧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;尽量圆形均匀分布在四个象限比较好，如果圆形全部集中到有限的区域，模型训练不好&lt;/li&gt;
&lt;li&gt;圆形与圆形交集较少比较好，如果交集太多，说明n_topics设置的太大，应该设置的再小一些&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;五存储与导入lda模型&#34;&gt;五、存储与导入lda模型&lt;/h1&gt;
&lt;p&gt;lda话题模型训练特别慢，如果不保存训练好的模型，实际上是在浪费我们的生命和电脑计算力。&lt;/p&gt;
&lt;p&gt;好消息是cntopic默认为大家存储模型，存储地址是output文件夹内，大家只需要知道如何导入模型即可。&lt;/p&gt;
&lt;p&gt;这里需要导入的有两个模型，使用步骤&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;步骤&lt;/th&gt;
&lt;th&gt;模型&lt;/th&gt;
&lt;th&gt;代码&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;准备documents&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;topic = Topic(cwd=os.getcwd())&lt;/td&gt;
&lt;td&gt;初始化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;词典&lt;/td&gt;
&lt;td&gt;topic.load_dictionary(dictpath=&#39;output/dictionary.dict&amp;rsquo;)&lt;/td&gt;
&lt;td&gt;直接导入词典，省略topic.create_dictionary()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;topic.create_corpus(documents=documents)&lt;/td&gt;
&lt;td&gt;构建语料(将文本转为文档-词频矩阵)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;lda话题模型&lt;/td&gt;
&lt;td&gt;topic.load_lda_model(modelpath=&#39;output/model/lda.model&amp;rsquo;)&lt;/td&gt;
&lt;td&gt;导入lda话题模型， 相当于省略topic.train_lda_model(n_topics)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;现在我们试一试, 为了与之前的区分，这里我们起名topic2&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;topic2 = Topic(cwd=os.getcwd())
topic2.load_dictionary(dictpath=&#39;output/dictionary.dict&#39;)
topic2.create_corpus(documents=documents)
topic2.load_lda_model(modelpath=&#39;output/model/lda.model&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;大家可以自己回去试一试第4部分&lt;code&gt;使用LDA模型&lt;/code&gt;的相关功能&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;如果&#34;&gt;如果&lt;/h2&gt;
&lt;p&gt;如果您是经管人文社科专业背景，编程小白，面临海量文本数据采集和处理分析艰巨任务，个人建议学习
&lt;a href=&#34;https://ke.qq.com/course/482241?tuin=163164df&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《python网络爬虫与文本数据分析》&lt;/a&gt;视频课。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;python入门&lt;/li&gt;
&lt;li&gt;网络爬虫&lt;/li&gt;
&lt;li&gt;数据读取&lt;/li&gt;
&lt;li&gt;文本分析入门&lt;/li&gt;
&lt;li&gt;机器学习与文本分析&lt;/li&gt;
&lt;li&gt;文本分析在经管研究中的应用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;感兴趣的童鞋不妨 戳一下
&lt;a href=&#34;https://ke.qq.com/course/482241?tuin=163164df&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《python网络爬虫与文本数据分析》&lt;/a&gt;进来看看~&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;更多&#34;&gt;更多&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://space.bilibili.com/122592901/channel/detail?cid=66008&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;B站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;公众号：大邓和他的python&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.zhihu.com/people/deng-xu-dong-hit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;知乎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/thunderhit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;支持&#34;&gt;支持&lt;/h2&gt;
&lt;p&gt;分享不易，谢谢大家分享（或红包）支持^_^&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/my_zanshang_qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>wordexpansion库</title>
      <link>https://thunderhit.github.io/project/wordexpansion/</link>
      <pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate>
      <guid>https://thunderhit.github.io/project/wordexpansion/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;README.md为本人所写，代码底层完全为刘焕勇设计。&lt;/p&gt;
&lt;p&gt;大邓项目地址https://github.com/thunderhit/wordexpansion&lt;/p&gt;
&lt;p&gt;原项目(刘焕勇)地址https://github.com/liuhuanyong/SentimentWordExpansion&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;一项目意义&#34;&gt;一、项目意义&lt;/h1&gt;
&lt;p&gt;情感分析大多是基于情感词典对文本数据进行分析，所以情感词典好坏、是否完备充足是文本分析的关键。&lt;/p&gt;
&lt;p&gt;目前常用的词典都是基于形容词，有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;知网HowNet&lt;/li&gt;
&lt;li&gt;大连理工大学情感本体库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是形容词类型的词典在某些情况下不适用，比如&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;华为手机外壳采用金属制作，更耐摔&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于句子中没有形容词，使用形容词情感词典计算得到的情感得分为0。但是&lt;strong&gt;耐摔&lt;/strong&gt;这个动词具有&lt;strong&gt;正面积极情绪&lt;/strong&gt;，这个句子的情感的分理应为&lt;strong&gt;正&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可见能够简单快速构建不同领域(手机、汽车等)的情感词典十分重要。但是人工构建太慢，如果让机器帮我们把最有可能带情感的候选词找出来，人工再去筛选构建词典，那该多好啊。那么如何构建呢？&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;二构建方法&#34;&gt;二、构建方法&lt;/h1&gt;
&lt;p&gt;计算机领域有一个算法叫做SO_PMI，互信息。简单的讲个体之间不是完全独立的，往往物以类聚，人以群分。如果我们一开始设定少量的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始正面种子词&lt;/li&gt;
&lt;li&gt;初始负面种子词&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;程序会按照“物以类聚人以群分”的思路，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据&lt;strong&gt;初始正面种子词&lt;/strong&gt;找到很多大概率为&lt;strong&gt;正面情感的候选词&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;根据&lt;strong&gt;初始负种子词&lt;/strong&gt;找到很多大概率为&lt;strong&gt;负面情感的候选词&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个包原始作者刘焕勇，项目地址https://github.com/liuhuanyong/SentimentWordExpansion 我仅仅做了简单的封装&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;三安装&#34;&gt;三、安装&lt;/h1&gt;
&lt;h3 id=&#34;21-方法一&#34;&gt;2.1 方法一&lt;/h3&gt;
&lt;p&gt;最简单的安装,现在由于国内外网络不稳定，运气不好可能需要尝试几次&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip3 install wordexpansion
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;22-加镜像站点&#34;&gt;2.2 加镜像站点&lt;/h3&gt;
&lt;p&gt;有的童鞋已经把pip默认安装镜像站点改为国内，如果国内镜像还未收录我的这个包，那么可能会安装失败。只能从国外https://pypi.org/simple站点搜索wordexpansion资源并安装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip3 install wordexpansion -i https://pypi.org/simple
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;23-国内镜像安装&#34;&gt;2.3 国内镜像安装&lt;/h3&gt;
&lt;p&gt;如果国内镜像站点已经收录，那么使用这个会更快&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip3 install wordexpansion -i https://pypi.tuna.tsinghua.edu.cn/simple/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;四使用方法&#34;&gt;四、使用方法&lt;/h1&gt;
&lt;h3 id=&#34;41-文件目录&#34;&gt;4.1 文件目录&lt;/h3&gt;
&lt;p&gt;所有的txt文件，不论输入的还是程序输出的结果，均采用utf-8编码。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;|--test                           #情感词典扩展与构建测试文件夹
     |--find_newwords.py          #测试代码
     |--test_corpus.txt           #语料（某领域）文本数据，5.5M
     |--test_seed_words.txt       #情感种子词，需要手动构建
      
     |--neg_candi.txt             #find_newwords.py运行后发现的负面候选词
     |--pos_candi.txt             #find_newwords.py运行后发现的正面候选词

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;完整项目请移步至https://github.com/thunderhit/wordexpansion&lt;/p&gt;
&lt;h3 id=&#34;42-构建种子词&#34;&gt;4.2 构建种子词&lt;/h3&gt;
&lt;p&gt;可能我们希望的情感词典几万个，但是种子词100个（正面词50个，负面词50个）说不定就可以。&lt;/p&gt;
&lt;p&gt;手动构建的种子词典&lt;strong&gt;test_seed_words.txt&lt;/strong&gt;(编码encoding为utf-8)中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每行一个词&lt;/li&gt;
&lt;li&gt;每个词用neg或pos标记&lt;/li&gt;
&lt;li&gt;词与标记用空格间隔&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;休克	neg
如出一辙	neg
渴求	neg
扎堆	neg
休整	neg
关门	neg
阴晴不定	neg
喜忧参半	neg
起起伏伏	neg
一厢情愿	neg
松紧	neg
最全	pos
雄风	pos
稳健	pos
稳定	pos
拉平	pos
保供	pos
修正	pos
稳	pos
稳住	pos
保养	pos
...
...
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;42-准备发现情感新词&#34;&gt;4.2 准备发现情感新词&lt;/h3&gt;
&lt;p&gt;已经安装好了&lt;strong&gt;wordexpansion&lt;/strong&gt;，现在我们新建一个名为&lt;strong&gt;find_newwords.py&lt;/strong&gt;的测试代码&lt;/p&gt;
&lt;p&gt;代码中的&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from wordexpansion import ChineseSoPmi

sopmier = ChineseSoPmi(inputtext_file=&#39;test_corpus.txt&#39;,
                       seedword_txtfile=&#39;test_seed_words.txt&#39;,
                       pos_candi_txt_file=&#39;pos_candi.txt&#39;,
                       neg_candi_txtfile=&#39;neg_candi.txt&#39;)
sopmier.sopmi()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们的语料数据&lt;strong&gt;test_corpus.txt&lt;/strong&gt; 文件5.5M，100个候选词，运行程序大概耗时60s&lt;/p&gt;
&lt;h3 id=&#34;43-输出的结果&#34;&gt;4.3 输出的结果&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;find_newwords.py&lt;/strong&gt;运行结束后，会在**同文件夹内(find_newwords.py所在的文件夹)**发现有两个新的txt文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pos_candi.txt&lt;/li&gt;
&lt;li&gt;neg_candi.txt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;打开&lt;strong&gt;pos_candi.txt&lt;/strong&gt;, 我们看到&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;word,sopmi,polarity,word_length,postag
保持,87.28493062512524,pos,2,v
风险,70.15627986116269,pos,2,n
货币政策,66.28476448498694,pos,4,n
发展,64.40272795986517,pos,2,vn
不要,63.71800916752807,pos,2,df
理念,61.2024367757337,pos,2,n
整体,59.415315156715586,pos,2,n
下,59.321140440512984,pos,1,f
引导,58.5817208758171,pos,2,v
投资,57.71720491331896,pos,2,vn
加强,57.067969337267684,pos,2,v
自己,53.25503772499689,pos,2,r
提升,52.80686380719989,pos,2,v
和,52.12334472663675,pos,1,c
稳步,51.58193211655792,pos,2,d
重要,51.095865548255034,pos,2,a
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;打开&lt;strong&gt;neg_candi.txt&lt;/strong&gt;, 我们看到&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;word,sopmi,polarity,word_length,postag
心灵,33.17993872989303,neg,2,n
期间,31.77900620939178,neg,2,f
西溪,30.87839808390589,neg,2,ns
人事,29.594976229171877,neg,2,n
复杂,29.47870186147108,neg,2,a
直到,27.86014637934966,neg,2,v
宰客,27.27304813428452,neg,2,nr
保险,26.433136238404746,neg,2,n
迎来,25.83859896903048,neg,2,v
至少,25.105021416064616,neg,2,d
融资,25.09148586460598,neg,2,vn
或,24.48343281812743,neg,1,c
列,22.20695894382675,neg,1,v
存在,22.041049266517774,neg,2,v
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从上面的结果看，正面候选词较好，负面候选词有点差强人意。虽然差点，但节约了很多很多时间。&lt;/p&gt;
&lt;p&gt;现在电脑已经帮我们找出候选词，我们人类最擅长找毛病，对neg_candi.txt和pos_candi.txt我们人类只需要一个个挑毛病，把不带正负情感的词剔除掉。这样经过一段时间的剔除工作，针对具体研究领域的专业情感词典就构建出来了。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&#34;五注意&#34;&gt;五、注意：&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;so_pmi算法效果受训练语料影响，语料规模越大，效果越好&lt;/li&gt;
&lt;li&gt;so_pmi算法效率受训练语料影响，语料越大，训练越耗时。100个种子词，5M的数据，大约耗时62.679秒&lt;/li&gt;
&lt;li&gt;候选词的选择，可根据PMI值，词长，词性设定规则，进行筛选  &lt;/li&gt;
&lt;li&gt;所有的txt文件均采用utf-8编码，如果遇到UnicodeDetectorError: &amp;lsquo;gbk&amp;rsquo; codec。。请自行解决文件的encode问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h2 id=&#34;如果&#34;&gt;如果&lt;/h2&gt;
&lt;p&gt;如果您是经管人文社科专业背景，编程小白，面临海量文本数据采集和处理分析艰巨任务，个人建议学习
&lt;a href=&#34;https://ke.qq.com/course/482241?tuin=163164df&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《python网络爬虫与文本数据分析》&lt;/a&gt;视频课。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;python入门&lt;/li&gt;
&lt;li&gt;网络爬虫&lt;/li&gt;
&lt;li&gt;数据读取&lt;/li&gt;
&lt;li&gt;文本分析入门&lt;/li&gt;
&lt;li&gt;机器学习与文本分析&lt;/li&gt;
&lt;li&gt;文本分析在经管研究中的应用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;感兴趣的童鞋不妨 戳一下
&lt;a href=&#34;https://ke.qq.com/course/482241?tuin=163164df&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《python网络爬虫与文本数据分析》&lt;/a&gt;进来看看~&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;更多&#34;&gt;更多&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://space.bilibili.com/122592901/channel/detail?cid=66008&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;B站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;公众号：大邓和他的python&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.zhihu.com/people/deng-xu-dong-hit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;知乎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[github](&lt;a href=&#34;https://github.com/thunderhit&#34;&gt;https://github.com/thunderhit&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&#34;支持&#34;&gt;支持&lt;/h2&gt;
&lt;p&gt;分享不易，谢谢大家点赞分享和红包^_^&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/my_zanshang_qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>simtext库</title>
      <link>https://thunderhit.github.io/project/simtext/</link>
      <pubDate>Thu, 14 May 2020 00:00:00 +0000</pubDate>
      <guid>https://thunderhit.github.io/project/simtext/</guid>
      <description>&lt;br&gt;
&lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#simtext&#34;&gt;simtext&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#安装&#34;&gt;安装&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#使用&#34;&gt;使用&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#参考文献&#34;&gt;参考文献&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#如果&#34;&gt;如果&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#更多&#34;&gt;更多&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#支持&#34;&gt;支持&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;h1 id=&#34;simtext&#34;&gt;simtext&lt;/h1&gt;
&lt;p&gt;simtext可以计算两文档间四大文本相似性指标，分别为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sim_Cosine    cosine相似性&lt;/li&gt;
&lt;li&gt;Sim_Jaccard   Jaccard相似性&lt;/li&gt;
&lt;li&gt;Sim_MinEdit  最小编辑距离&lt;/li&gt;
&lt;li&gt;Sim_Simple  微软Word中的track changes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体算法介绍可翻看Cohen, Lauren, Christopher Malloy&amp;amp;Quoc Nguyen(2018) 第60页&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;%E8%AE%BA%E6%96%87%E4%B8%AD%E7%9A%84%E5%85%AC%E5%BC%8F.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;pip install simtext
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h3 id=&#34;使用&#34;&gt;使用&lt;/h3&gt;
&lt;p&gt;中文文本相似性&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from simtext import similarity

text1 = &#39;在宏观经济背景下，为继续优化贷款结构，重点发展可以抵抗经济周期不良的贷款&#39;
text2 = &#39;在宏观经济背景下，为继续优化贷款结构，重点发展可三年专业化、集约化、综合金融+物联网金融四大金融特色的基础上&#39;

sim = similarity()
res = sim.compute(text1, text2)
print(res)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{&#39;Sim_Cosine&#39;: 0.46475800154489, 
&#39;Sim_Jaccard&#39;: 0.3333333333333333, 
&#39;Sim_MinEdit&#39;: 29, 
&#39;Sim_Simple&#39;: 0.9889595182335229}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;英文文本相似性&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from simtext import similarity

A = &#39;We expect demand to increase.&#39;
B = &#39;We expect worldwide demand to increase.&#39;
C = &#39;We expect weakness in sales&#39;

sim = similarity()
AB = sim.compute(A, B)
AC = sim.compute(A, C)

print(AB)
print(AC)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{&#39;Sim_Cosine&#39;: 0.9128709291752769, 
&#39;Sim_Jaccard&#39;: 0.8333333333333334, 
&#39;Sim_MinEdit&#39;: 2, 
&#39;Sim_Simple&#39;: 0.9545454545454546}

{&#39;Sim_Cosine&#39;: 0.39999999999999997, 
&#39;Sim_Jaccard&#39;: 0.25, 
&#39;Sim_MinEdit&#39;: 4, 
&#39;Sim_Simple&#39;: 0.9315789473684211}

&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h3 id=&#34;参考文献&#34;&gt;参考文献&lt;/h3&gt;
&lt;p&gt;Cohen, Lauren, Christopher Malloy, and Quoc Nguyen. &lt;em&gt;Lazy prices&lt;/em&gt;. No. w25084. National Bureau of Economic Research, 2018.&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&#34;如果&#34;&gt;如果&lt;/h2&gt;
&lt;p&gt;如果您是经管人文社科专业背景，编程小白，面临海量文本数据采集和处理分析艰巨任务，个人建议学习
&lt;a href=&#34;https://ke.qq.com/course/482241?tuin=163164df&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《python网络爬虫与文本数据分析》&lt;/a&gt;视频课。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;python入门&lt;/li&gt;
&lt;li&gt;网络爬虫&lt;/li&gt;
&lt;li&gt;数据读取&lt;/li&gt;
&lt;li&gt;文本分析入门&lt;/li&gt;
&lt;li&gt;机器学习与文本分析&lt;/li&gt;
&lt;li&gt;文本分析在经管研究中的应用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;感兴趣的童鞋不妨 戳一下
&lt;a href=&#34;https://ke.qq.com/course/482241?tuin=163164df&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《python网络爬虫与文本数据分析》&lt;/a&gt;进来看看~&lt;/p&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;更多&#34;&gt;更多&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://space.bilibili.com/122592901/channel/detail?cid=66008&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;B站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;公众号：大邓和他的python&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.zhihu.com/people/deng-xu-dong-hit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;知乎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/thunderhit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;支持&#34;&gt;支持&lt;/h2&gt;
&lt;p&gt;分享不易，谢谢大家分享（或红包）支持^_^&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/my_zanshang_qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>shreport库</title>
      <link>https://thunderhit.github.io/project/shreport/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      <guid>https://thunderhit.github.io/project/shreport/</guid>
      <description>&lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#一简介&#34;&gt;一、简介&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#二安装&#34;&gt;二、安装&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#三功能说明&#34;&gt;三、功能说明&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#四快速入门&#34;&gt;四、快速入门&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#41--获取上证交易所上市公司目录&#34;&gt;4.1  获取上证交易所上市公司目录&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#42下载某公司所有定期报告文件&#34;&gt;4.2下载某公司所有定期报告文件&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#43-获取某公司的所有定期报告相关信息&#34;&gt;4.3 获取某公司的所有定期报告相关信息&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#44-获取某公司的所有定期报告url&#34;&gt;4.4 获取某公司的所有定期报告url&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#五获取cookies&#34;&gt;五、获取cookies&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#如果&#34;&gt;如果&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#更多&#34;&gt;更多&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#支持&#34;&gt;支持&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;h2 id=&#34;一简介&#34;&gt;一、简介&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;上海证券交易所上市公司定期报告下载,项目地址 https://github.com/thunderhit/shreport
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;github地址 &lt;a href=&#34;https://github.com/thunderhit/shreport&#34;&gt;https://github.com/thunderhit/shreport&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pypi地址 &lt;a href=&#34;https://pypi.org/project/shreport&#34;&gt;https://pypi.org/project/shreport&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;获取上证交易所所有公司目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;上市公司历年报告(季报、半年报、年报)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;iframe
    src=&#34;//player.bilibili.com/player.html?bvid=BV15A411h7RJ&amp;page=1&#34;
    scrolling=&#34;no&#34;
    height=&#34;768px&#34;
    width=&#34;1024px&#34;
    frameborder=&#34;no&#34;
    framespacing=&#34;0&#34;
    allowfullscreen=&#34;true&#34;
&gt;
&lt;/iframe&gt;

&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&#34;二安装&#34;&gt;二、安装&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;pip install shreport
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;三功能说明&#34;&gt;三、功能说明&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;companys()
  上证所有上市公司名录，公司名及股票代码
  :return: 返回DataFrame

pdfurls(code)
  仅获取定期报告pdf下载链接
  :param code:  股票代码
  :return: 年报pdf链接
  
disclosure(self, code)
   获得该公司的股票代码、报告类型、年份、定期报告披露日期、定期报告pdf下载链接, 返回DataFrame
  :param code:  股票代码
  
  
download(code, savepath)
  下载该公司（code）的所有季度报告、半年报、年报pdf文件
  :param code:  上市公司股票代码
  :param savepath:  数据存储所在文件夹的路径，建议使用相对路径
 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;四快速入门&#34;&gt;四、快速入门&lt;/h2&gt;
&lt;p&gt;一定要先获得cookies后才能使用下面的所有代码，这里先直接看代码使用情况，cookies获取可见文档&lt;/p&gt;
&lt;h3 id=&#34;41--获取上证交易所上市公司目录&#34;&gt;4.1  获取上证交易所上市公司目录&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from shreport import SH

cookies = {&amp;quot;Cookie&amp;quot;: &#39;您的cookies&#39;}
sh = SH(cookies)
df = sh.companys()

#将查询结果存储
#df.to_excel(&#39;上证交易所上市公司名录.xlsx&#39;)

#显示前5条数据
df.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;code&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;浦发银行&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;600000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;白云机场&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;600004&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;东风汽车&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;600006&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;中国国贸&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;600007&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;首创股份&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;600008&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;42下载某公司所有定期报告文件&#34;&gt;4.2下载某公司所有定期报告文件&lt;/h3&gt;
&lt;p&gt;绝大多数报告文件名格式&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件&lt;/th&gt;
&lt;th&gt;文件名&lt;/th&gt;
&lt;th&gt;例子&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;季度报&lt;/td&gt;
&lt;td&gt;公司代码-年份-数字&lt;/td&gt;
&lt;td&gt;600000-2000-1.pdf、600000-2000-3.pdf&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;半年报&lt;/td&gt;
&lt;td&gt;公司代码-年份-z&lt;/td&gt;
&lt;td&gt;600000-2000-z.pdf&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;年报&lt;/td&gt;
&lt;td&gt;公司代码-年份-n&lt;/td&gt;
&lt;td&gt;600000-2000-n.pdf&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pathlib import Path
from shreport import SH

cookies = {&amp;quot;Cookie&amp;quot;: &#39;您的cookies&#39;}
sh = SH(cookies)
#获取当前代码所在的文件夹路径
cwd = Path().cwd() 
#以浦发银行为例股票代码600000
sh.download(code=&#39;600000&#39;, savepath=cwd)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;=======请耐心等待，正在获取600000数据
=======准备获取600000年报文件链接========
=======年报文件链接已获取完毕=============
已成功下载600000_2000_1.pdf
已成功下载600000_2000_z.pdf
已成功下载600000_2000_3.pdf
已成功下载600000_2000_n.pdf
......
已成功下载600000_2019_1.pdf
已成功下载600000_2019_z.pdf
已成功下载600000_2019_3.pdf
已成功下载600000_2000_n.pdf
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;43-获取某公司的所有定期报告相关信息&#34;&gt;4.3 获取某公司的所有定期报告相关信息&lt;/h3&gt;
&lt;p&gt;如果暂时不想下载定期报告pdf文件，可以可以先获取某公司的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;股票代码&lt;/li&gt;
&lt;li&gt;报告类型&lt;/li&gt;
&lt;li&gt;年份&lt;/li&gt;
&lt;li&gt;定期报告披露日期&lt;/li&gt;
&lt;li&gt;定期报告pdf下载链接&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结果返回DataFrame&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from shreport import SH

cookies = {&amp;quot;Cookie&amp;quot;: &#39;您的cookies&#39;}
sh = SH(cookies)


#获取浦发银行披露信息
df = sh.disclosure(code=&#39;600000&#39;)

#存储数据
#df.to_excel(&#39;600000.xlsx&#39;)

#前5条信息
df.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;company&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;code&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;type&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;year&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;date&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;pdf&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;浦发银行&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;600000&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;半年报&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2000&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2000-07-28&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://www.sse.com.cn/disclosure/listedinfo/announcement/c/600000_2000_1.pdf&#34;&gt;http://www.sse.com.cn/disclosure/listedinfo/announcement/c/600000_2000_1.pdf&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;浦发银行&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;600000&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;第三季度季报&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2002&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2002-10-30&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://www.sse.com.cn/disclosure/listedinfo/announcement/c/2002-10-30/600000_2002_3.pdf&#34;&gt;http://www.sse.com.cn/disclosure/listedinfo/announcement/c/2002-10-30/600000_2002_3.pdf&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;浦发银行&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;600000&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;半年报&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2002&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2002-08-17&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://www.sse.com.cn/disclosure/listedinfo/announcement/c/2002-08-17/600000_2002_z.pdf&#34;&gt;http://www.sse.com.cn/disclosure/listedinfo/announcement/c/2002-08-17/600000_2002_z.pdf&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;浦发银行&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;600000&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;第一季度季报&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2002&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2002-04-27&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://www.sse.com.cn/disclosure/listedinfo/announcement/c/600000_2002_1.pdf&#34;&gt;http://www.sse.com.cn/disclosure/listedinfo/announcement/c/600000_2002_1.pdf&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;浦发银行&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;600000&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;年报&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2001&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2002-03-21&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://www.sse.com.cn/disclosure/listedinfo/announcement/c/600000_2001_n.pdf&#34;&gt;http://www.sse.com.cn/disclosure/listedinfo/announcement/c/600000_2001_n.pdf&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;44-获取某公司的所有定期报告url&#34;&gt;4.4 获取某公司的所有定期报告url&lt;/h3&gt;
&lt;p&gt;如果暂时不想下载定期报告pdf文件，可以只得到该公司所有的报告文件链接&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from shreport import SH

cookies = {&amp;quot;Cookie&amp;quot;: &#39;您的cookies&#39;}
sh = SH(cookies)
#以浦发银行为例股票代码600000
urls = sh.pdfurls(code=&#39;600000&#39;)
urls
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;=======准备获取600000年报文件链接========
=======年报文件链接已获取完毕=============
[&#39;http://www.sse.com.cn/disclosure/listedinfo/announcement/c/600000_2000_1.pdf&#39;,
 &#39;http://www.sse.com.cn/disclosure/listedinfo/announcement/c/2002-10-30/600000_2002_3.pdf&#39;,
 &#39;http://www.sse.com.cn/disclosure/listedinfo/announcement/c/2002-08-17/600000_2002_z.pdf&#39;,
 .......
 &#39;http://www.sse.com.cn/disclosure/listedinfo/announcement/c/600000_2002_1.pdf&#39;,

 &#39;http://www.sse.com.cn/disclosure/listedinfo/announcement/c/2019-03-26/600000_2018_n.pdf&#39;,
 &#39;http://www.sse.com.cn/disclosure/listedinfo/announcement/c/2018-10-31/600000_2018_3.pdf&#39;,
 &#39;http://www.sse.com.cn/disclosure/listedinfo/announcement/c/2018-08-30/600000_2018_z.pdf&#39;,
 &#39;http://www.sse.com.cn/disclosure/listedinfo/announcement/c/2018-04-28/600000_2017_n.pdf&#39;,
 &#39;http://www.sse.com.cn/disclosure/listedinfo/announcement/c/2018-04-28/600000_2018_1.pdf&#39;]

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;五获取cookies&#34;&gt;五、获取cookies&lt;/h2&gt;
&lt;p&gt;一定要先获得cookies后才能使用所有的代码，获取方法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;浏览器访问http://www.sse.com.cn/disclosure/overview/&lt;/li&gt;
&lt;li&gt;按F12（mac按option+command+I)打开开发者工具的Network&lt;/li&gt;
&lt;li&gt;刷新网页，耐心寻找与www.sse.com.cn有关的任意网址，找到cookies&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;cookies.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;如果&#34;&gt;如果&lt;/h2&gt;
&lt;p&gt;如果您是经管人文社科专业背景，编程小白，面临海量文本数据采集和处理分析艰巨任务，个人建议学习
&lt;a href=&#34;https://ke.qq.com/course/482241?tuin=163164df&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《python网络爬虫与文本数据分析》&lt;/a&gt;视频课。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;python入门&lt;/li&gt;
&lt;li&gt;网络爬虫&lt;/li&gt;
&lt;li&gt;数据读取&lt;/li&gt;
&lt;li&gt;文本分析入门&lt;/li&gt;
&lt;li&gt;机器学习与文本分析&lt;/li&gt;
&lt;li&gt;文本分析在经管研究中的应用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;感兴趣的童鞋不妨 戳一下
&lt;a href=&#34;https://ke.qq.com/course/482241?tuin=163164df&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《python网络爬虫与文本数据分析》&lt;/a&gt;进来看看~&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;更多&#34;&gt;更多&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://space.bilibili.com/122592901/channel/detail?cid=66008&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;B站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;公众号：大邓和他的python&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.zhihu.com/people/deng-xu-dong-hit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;知乎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/thunderhit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;支持&#34;&gt;支持&lt;/h2&gt;
&lt;p&gt;分享不易，谢谢大家分享（或红包）支持^_^&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/my_zanshang_qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>pdfdocx库</title>
      <link>https://thunderhit.github.io/project/pdfdocx/</link>
      <pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate>
      <guid>https://thunderhit.github.io/project/pdfdocx/</guid>
      <description>&lt;p&gt;最近运行课件代码，发现pdf文件读取部分的函数失效。这里找到读取pdf文件的可运行代码，为了方便后续学习使用，我已将pdf和docx读取方法封装成pdfdocx包。&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h1 id=&#34;pdfdocx&#34;&gt;pdfdocx&lt;/h1&gt;
&lt;h3 id=&#34;github项目地址httpsgithubcomthunderhitpdfdocx&#34;&gt;
&lt;a href=&#34;https://github.com/thunderhit/pdfdocx&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github项目地址&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;只有简单的两个读取函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;read_pdf(file)&lt;/li&gt;
&lt;li&gt;read_docx(file)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;file为文件路径，函数运行后返回file文件内的文本数据。&lt;/p&gt;
&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;pip install pdfdocx
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;使用&#34;&gt;使用&lt;/h3&gt;
&lt;p&gt;读取pdf文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pdfdocx import read_pdf
p_text = read_pdf(&#39;test/data.pdf&#39;)
print(p_text)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;这是来⾃pdf⽂件内的内容
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pdfdocx import read_docx
d_text = read_pdf(&#39;test/data.docx&#39;)
print(d_text)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;这是来⾃docx⽂件内的内容
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h3 id=&#34;拆开pdfdocx&#34;&gt;拆开pdfdocx&lt;/h3&gt;
&lt;p&gt;希望大家能安装好，如果安装或者使用失败，可以使用下面的代码作为备选方法。虽然繁琐，能用就好。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;读取pdf&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from io import StringIO
from pdfminer.converter import TextConverter
from pdfminer.layout import LAParams
from pdfminer.pdfdocument import PDFDocument
from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter
from pdfminer.pdfpage import PDFPage
from pdfminer.pdfparser import PDFParser
import re


def read_pdf(file):
    &amp;quot;&amp;quot;&amp;quot;
    读取pdf文件，并返回其中的文本内容
    :param file: pdf文件路径
    :return: docx中的文本内容
    &amp;quot;&amp;quot;&amp;quot;
    output_string = StringIO()
    with open(file, &#39;rb&#39;) as in_file:
        parser = PDFParser(in_file)
        doc = PDFDocument(parser)
        rsrcmgr = PDFResourceManager()
        device = TextConverter(rsrcmgr, output_string, laparams=LAParams())
        interpreter = PDFPageInterpreter(rsrcmgr, device)
        for page in PDFPage.create_pages(doc):
            interpreter.process_page(page)
    text = output_string.getvalue()
    return re.sub(&#39;[\n\t\s]&#39;, &#39;&#39;, text)
  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;读取docx&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import docx
  
def read_docx(file):
    &amp;quot;&amp;quot;&amp;quot;
    读取docx文件，并返回其中的文本内容
    :param file: docx文件路径
    :return: docx中的文本内容
    &amp;quot;&amp;quot;&amp;quot;
    text = &#39;&#39;
    doc = docx.Document(file)
    for para in doc.paragraphs:
        text += para.text
    return text
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;如果&#34;&gt;如果&lt;/h2&gt;
&lt;p&gt;如果您是经管人文社科专业背景，编程小白，面临海量文本数据采集和处理分析艰巨任务，个人建议学习
&lt;a href=&#34;https://ke.qq.com/course/482241?tuin=163164df&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《python网络爬虫与文本数据分析》&lt;/a&gt;视频课。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;python入门&lt;/li&gt;
&lt;li&gt;网络爬虫&lt;/li&gt;
&lt;li&gt;数据读取&lt;/li&gt;
&lt;li&gt;文本分析入门&lt;/li&gt;
&lt;li&gt;机器学习与文本分析&lt;/li&gt;
&lt;li&gt;文本分析在经管研究中的应用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;感兴趣的童鞋不妨 戳一下
&lt;a href=&#34;https://ke.qq.com/course/482241?tuin=163164df&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《python网络爬虫与文本数据分析》&lt;/a&gt;进来看看~&lt;/p&gt;
&lt;h2 id=&#34;更多&#34;&gt;更多&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://space.bilibili.com/122592901/channel/detail?cid=66008&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;B站&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;公众号：大邓和他的python&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.zhihu.com/people/deng-xu-dong-hit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;知乎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/thunderhit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;支持&#34;&gt;支持&lt;/h2&gt;
&lt;p&gt;分享不易，谢谢大家分享（或红包）支持^_^&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/my_zanshang_qrcode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
